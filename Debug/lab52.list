
lab52.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b34  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004c78  08004c78  00014c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  08004f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d4  200001e4  080050f4  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002b8  080050f4  000202b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fe90  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ecf  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a90  00000000  00000000  00031f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000610  00000000  00000000  00036a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bd0  00000000  00000000  00037010  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004cd8  00000000  00000000  00037be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002850  00000000  00000000  0003c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f108  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c0c  00000000  00000000  0003f184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08004c5c 	.word	0x08004c5c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08004c5c 	.word	0x08004c5c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_InitTick+0x24>)
{
 8000b52:	b510      	push	{r4, lr}
 8000b54:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b60:	f000 f878 	bl	8000c54 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	4621      	mov	r1, r4
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 f83e 	bl	8000bec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000b70:	2000      	movs	r0, #0
 8000b72:	bd10      	pop	{r4, pc}
 8000b74:	20000010 	.word	0x20000010

08000b78 <HAL_Init>:
{
 8000b78:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f824 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ffe5 	bl	8000b50 <HAL_InitTick>
  HAL_MspInit();
 8000b86:	f001 fd89 	bl	800269c <HAL_MspInit>
}
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	bd08      	pop	{r3, pc}
	...

08000b90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000b90:	4a02      	ldr	r2, [pc, #8]	; (8000b9c <HAL_IncTick+0xc>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000020c 	.word	0x2000020c

08000ba0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba0:	4b01      	ldr	r3, [pc, #4]	; (8000ba8 <HAL_GetTick+0x8>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000020c 	.word	0x2000020c

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000bac:	b513      	push	{r0, r1, r4, lr}
 8000bae:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000bb0:	f7ff fff6 	bl	8000ba0 <HAL_GetTick>
 8000bb4:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000bb6:	f7ff fff3 	bl	8000ba0 <HAL_GetTick>
 8000bba:	9b01      	ldr	r3, [sp, #4]
 8000bbc:	1b00      	subs	r0, r0, r4
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d3f9      	bcc.n	8000bb6 <HAL_Delay+0xa>
  {
  }
}
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd10      	pop	{r4, pc}
	...

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bca:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bd6:	041b      	lsls	r3, r3, #16
 8000bd8:	0c1b      	lsrs	r3, r3, #16
 8000bda:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000be2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000be4:	60d3      	str	r3, [r2, #12]
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bee:	b530      	push	{r4, r5, lr}
 8000bf0:	68dc      	ldr	r4, [r3, #12]
 8000bf2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	bf28      	it	cs
 8000c00:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c08:	bf98      	it	ls
 8000c0a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	fa05 f303 	lsl.w	r3, r5, r3
 8000c10:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c14:	bf88      	it	hi
 8000c16:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4019      	ands	r1, r3
 8000c1a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	fa05 f404 	lsl.w	r4, r5, r4
 8000c20:	3c01      	subs	r4, #1
 8000c22:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c24:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c26:	ea42 0201 	orr.w	r2, r2, r1
 8000c2a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	bfaf      	iteee	ge
 8000c30:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	4b06      	ldrlt	r3, [pc, #24]	; (8000c50 <HAL_NVIC_SetPriority+0x64>)
 8000c36:	f000 000f 	andlt.w	r0, r0, #15
 8000c3a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	bfa5      	ittet	ge
 8000c3e:	b2d2      	uxtbge	r2, r2
 8000c40:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c4a:	bd30      	pop	{r4, r5, pc}
 8000c4c:	e000ed00 	.word	0xe000ed00
 8000c50:	e000ed14 	.word	0xe000ed14

08000c54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	3801      	subs	r0, #1
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5a:	d20a      	bcs.n	8000c72 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c82:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	bf0c      	ite	eq
 8000c88:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c8c:	f022 0204 	bicne.w	r2, r2, #4
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	4770      	bx	lr
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c98:	4770      	bx	lr

08000c9a <HAL_SYSTICK_IRQHandler>:
{
 8000c9a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c9c:	f7ff fffc 	bl	8000c98 <HAL_SYSTICK_Callback>
 8000ca0:	bd08      	pop	{r3, pc}
	...

08000ca4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000ca4:	2300      	movs	r3, #0
{ 
 8000ca6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000caa:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000e44 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb2:	4a62      	ldr	r2, [pc, #392]	; (8000e3c <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cb4:	fa38 f403 	lsrs.w	r4, r8, r3
 8000cb8:	d102      	bne.n	8000cc0 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8000cba:	b003      	add	sp, #12
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cc0:	f04f 0e01 	mov.w	lr, #1
 8000cc4:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000cc8:	ea18 060e 	ands.w	r6, r8, lr
 8000ccc:	f000 80a8 	beq.w	8000e20 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000cd0:	684c      	ldr	r4, [r1, #4]
 8000cd2:	f024 0710 	bic.w	r7, r4, #16
 8000cd6:	2f02      	cmp	r7, #2
 8000cd8:	d116      	bne.n	8000d08 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000cda:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 8000cde:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ce2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000ce6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000cea:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000cee:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000cf2:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000cf6:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000cfa:	690d      	ldr	r5, [r1, #16]
 8000cfc:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d00:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000d04:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000d08:	2503      	movs	r5, #3
 8000d0a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8000d0e:	fa05 f50a 	lsl.w	r5, r5, sl
 8000d12:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000d14:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d18:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000d1c:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d20:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d24:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d26:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d2c:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d30:	d811      	bhi.n	8000d56 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 8000d32:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d34:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d38:	68cf      	ldr	r7, [r1, #12]
 8000d3a:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000d3e:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000d42:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d44:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d46:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d4a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000d4e:	409f      	lsls	r7, r3
 8000d50:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000d54:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d56:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d58:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d5a:	688f      	ldr	r7, [r1, #8]
 8000d5c:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d60:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d62:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d64:	00e5      	lsls	r5, r4, #3
 8000d66:	d55b      	bpl.n	8000e20 <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d68:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000d70:	f023 0703 	bic.w	r7, r3, #3
 8000d74:	f045 0501 	orr.w	r5, r5, #1
 8000d78:	f8c9 5020 	str.w	r5, [r9, #32]
 8000d7c:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000d80:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d84:	f005 0501 	and.w	r5, r5, #1
 8000d88:	9501      	str	r5, [sp, #4]
 8000d8a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d8e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d94:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000d98:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d9c:	fa0c f50e 	lsl.w	r5, ip, lr
 8000da0:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000da4:	4d26      	ldr	r5, [pc, #152]	; (8000e40 <HAL_GPIO_Init+0x19c>)
 8000da6:	42a8      	cmp	r0, r5
 8000da8:	d03c      	beq.n	8000e24 <HAL_GPIO_Init+0x180>
 8000daa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dae:	42a8      	cmp	r0, r5
 8000db0:	d03a      	beq.n	8000e28 <HAL_GPIO_Init+0x184>
 8000db2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000db6:	42a8      	cmp	r0, r5
 8000db8:	d038      	beq.n	8000e2c <HAL_GPIO_Init+0x188>
 8000dba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dbe:	42a8      	cmp	r0, r5
 8000dc0:	d036      	beq.n	8000e30 <HAL_GPIO_Init+0x18c>
 8000dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dc6:	42a8      	cmp	r0, r5
 8000dc8:	d034      	beq.n	8000e34 <HAL_GPIO_Init+0x190>
 8000dca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dce:	42a8      	cmp	r0, r5
 8000dd0:	d032      	beq.n	8000e38 <HAL_GPIO_Init+0x194>
 8000dd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dd6:	42a8      	cmp	r0, r5
 8000dd8:	bf14      	ite	ne
 8000dda:	2507      	movne	r5, #7
 8000ddc:	2506      	moveq	r5, #6
 8000dde:	fa05 f50e 	lsl.w	r5, r5, lr
 8000de2:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000de6:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000de8:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000dea:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000df0:	bf0c      	ite	eq
 8000df2:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000df4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000df6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000df8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000dfe:	bf0c      	ite	eq
 8000e00:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000e02:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000e04:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000e06:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e08:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e0c:	bf0c      	ite	eq
 8000e0e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000e10:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000e12:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000e14:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e16:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e18:	bf54      	ite	pl
 8000e1a:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000e1c:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000e1e:	60d5      	str	r5, [r2, #12]
    position++;
 8000e20:	3301      	adds	r3, #1
 8000e22:	e747      	b.n	8000cb4 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e24:	2500      	movs	r5, #0
 8000e26:	e7da      	b.n	8000dde <HAL_GPIO_Init+0x13a>
 8000e28:	2501      	movs	r5, #1
 8000e2a:	e7d8      	b.n	8000dde <HAL_GPIO_Init+0x13a>
 8000e2c:	2502      	movs	r5, #2
 8000e2e:	e7d6      	b.n	8000dde <HAL_GPIO_Init+0x13a>
 8000e30:	2503      	movs	r5, #3
 8000e32:	e7d4      	b.n	8000dde <HAL_GPIO_Init+0x13a>
 8000e34:	2504      	movs	r5, #4
 8000e36:	e7d2      	b.n	8000dde <HAL_GPIO_Init+0x13a>
 8000e38:	2505      	movs	r5, #5
 8000e3a:	e7d0      	b.n	8000dde <HAL_GPIO_Init+0x13a>
 8000e3c:	40010400 	.word	0x40010400
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e48:	b10a      	cbz	r2, 8000e4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000e4a:	6181      	str	r1, [r0, #24]
 8000e4c:	4770      	bx	lr
 8000e4e:	0409      	lsls	r1, r1, #16
 8000e50:	e7fb      	b.n	8000e4a <HAL_GPIO_WritePin+0x2>

08000e52 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e52:	6802      	ldr	r2, [r0, #0]
 8000e54:	6953      	ldr	r3, [r2, #20]
 8000e56:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000e5a:	d00d      	beq.n	8000e78 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e5c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e60:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e62:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000e64:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e66:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000e70:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000e74:	2001      	movs	r0, #1
 8000e76:	4770      	bx	lr
  }
  return HAL_OK;
 8000e78:	4618      	mov	r0, r3
}
 8000e7a:	4770      	bx	lr

08000e7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e80:	4604      	mov	r4, r0
 8000e82:	4617      	mov	r7, r2
 8000e84:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e86:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000e8a:	b28e      	uxth	r6, r1
 8000e8c:	6825      	ldr	r5, [r4, #0]
 8000e8e:	f1b8 0f01 	cmp.w	r8, #1
 8000e92:	bf0c      	ite	eq
 8000e94:	696b      	ldreq	r3, [r5, #20]
 8000e96:	69ab      	ldrne	r3, [r5, #24]
 8000e98:	ea36 0303 	bics.w	r3, r6, r3
 8000e9c:	bf14      	ite	ne
 8000e9e:	2001      	movne	r0, #1
 8000ea0:	2000      	moveq	r0, #0
 8000ea2:	b908      	cbnz	r0, 8000ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ea8:	696b      	ldr	r3, [r5, #20]
 8000eaa:	055a      	lsls	r2, r3, #21
 8000eac:	d512      	bpl.n	8000ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eae:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000eb0:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000eb8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000ebc:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000ec2:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000ec4:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000ec6:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000ec8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000ecc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ed4:	1c7b      	adds	r3, r7, #1
 8000ed6:	d0d9      	beq.n	8000e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ed8:	b94f      	cbnz	r7, 8000eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000eda:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000edc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ede:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000ee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000ee4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000ee8:	2003      	movs	r0, #3
 8000eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000eee:	f7ff fe57 	bl	8000ba0 <HAL_GetTick>
 8000ef2:	eba0 0009 	sub.w	r0, r0, r9
 8000ef6:	4287      	cmp	r7, r0
 8000ef8:	d2c8      	bcs.n	8000e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000efa:	e7ee      	b.n	8000eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000efc <I2C_WaitOnFlagUntilTimeout>:
{
 8000efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f00:	4604      	mov	r4, r0
 8000f02:	4690      	mov	r8, r2
 8000f04:	461f      	mov	r7, r3
 8000f06:	9e08      	ldr	r6, [sp, #32]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f08:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000f0c:	b28d      	uxth	r5, r1
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	f1b9 0f01 	cmp.w	r9, #1
 8000f14:	bf0c      	ite	eq
 8000f16:	695b      	ldreq	r3, [r3, #20]
 8000f18:	699b      	ldrne	r3, [r3, #24]
 8000f1a:	ea35 0303 	bics.w	r3, r5, r3
 8000f1e:	bf0c      	ite	eq
 8000f20:	2301      	moveq	r3, #1
 8000f22:	2300      	movne	r3, #0
 8000f24:	4543      	cmp	r3, r8
 8000f26:	d002      	beq.n	8000f2e <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000f28:	2000      	movs	r0, #0
}
 8000f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f2e:	1c7b      	adds	r3, r7, #1
 8000f30:	d0ed      	beq.n	8000f0e <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f32:	b95f      	cbnz	r7, 8000f4c <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f34:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000f36:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f38:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000f3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000f3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000f42:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f4c:	f7ff fe28 	bl	8000ba0 <HAL_GetTick>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	4287      	cmp	r7, r0
 8000f54:	d2db      	bcs.n	8000f0e <I2C_WaitOnFlagUntilTimeout+0x12>
 8000f56:	e7ed      	b.n	8000f34 <I2C_WaitOnFlagUntilTimeout+0x38>

08000f58 <I2C_WaitOnTXEFlagUntilTimeout>:
{  
 8000f58:	b570      	push	{r4, r5, r6, lr}
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460d      	mov	r5, r1
 8000f5e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	061b      	lsls	r3, r3, #24
 8000f66:	d501      	bpl.n	8000f6c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000f68:	2000      	movs	r0, #0
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff ff70 	bl	8000e52 <I2C_IsAcknowledgeFailed>
 8000f72:	b9a8      	cbnz	r0, 8000fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000f74:	1c6a      	adds	r2, r5, #1
 8000f76:	d0f3      	beq.n	8000f60 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f78:	b965      	cbnz	r5, 8000f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000f7c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f84:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000f86:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f88:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000f8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000f8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000f92:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f94:	f7ff fe04 	bl	8000ba0 <HAL_GetTick>
 8000f98:	1b80      	subs	r0, r0, r6
 8000f9a:	4285      	cmp	r5, r0
 8000f9c:	d2e0      	bcs.n	8000f60 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000f9e:	e7ec      	b.n	8000f7a <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000fa0:	2001      	movs	r0, #1
}
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}

08000fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	460d      	mov	r5, r1
 8000faa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	6943      	ldr	r3, [r0, #20]
 8000fb0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000fb4:	d001      	beq.n	8000fba <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000fb6:	2000      	movs	r0, #0
}
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000fba:	6942      	ldr	r2, [r0, #20]
 8000fbc:	06d2      	lsls	r2, r2, #27
 8000fbe:	d50b      	bpl.n	8000fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fc0:	f06f 0210 	mvn.w	r2, #16
 8000fc4:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000fc6:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc8:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000fca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8000fce:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000fd2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000fd8:	b95d      	cbnz	r5, 8000ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000fdc:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fde:	f043 0320 	orr.w	r3, r3, #32
 8000fe2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000fea:	2300      	movs	r3, #0
 8000fec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000ff0:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ff2:	f7ff fdd5 	bl	8000ba0 <HAL_GetTick>
 8000ff6:	1b80      	subs	r0, r0, r6
 8000ff8:	4285      	cmp	r5, r0
 8000ffa:	d2d7      	bcs.n	8000fac <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000ffc:	e7ed      	b.n	8000fda <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08000ffe <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000ffe:	b570      	push	{r4, r5, r6, lr}
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	075b      	lsls	r3, r3, #29
 800100c:	d501      	bpl.n	8001012 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800100e:	2000      	movs	r0, #0
 8001010:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff ff1d 	bl	8000e52 <I2C_IsAcknowledgeFailed>
 8001018:	b9a8      	cbnz	r0, 8001046 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800101a:	1c6a      	adds	r2, r5, #1
 800101c:	d0f3      	beq.n	8001006 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800101e:	b965      	cbnz	r5, 800103a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001020:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001022:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800102a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800102c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800102e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001030:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001034:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001038:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800103a:	f7ff fdb1 	bl	8000ba0 <HAL_GetTick>
 800103e:	1b80      	subs	r0, r0, r6
 8001040:	4285      	cmp	r5, r0
 8001042:	d2e0      	bcs.n	8001006 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001044:	e7ec      	b.n	8001020 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001046:	2001      	movs	r0, #1
}
 8001048:	bd70      	pop	{r4, r5, r6, pc}
	...

0800104c <HAL_I2C_Init>:
{
 800104c:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800104e:	4604      	mov	r4, r0
 8001050:	b908      	cbnz	r0, 8001056 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001052:	2001      	movs	r0, #1
 8001054:	bd70      	pop	{r4, r5, r6, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001056:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800105a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800105e:	b91b      	cbnz	r3, 8001068 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001060:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001064:	f001 fb6a 	bl	800273c <HAL_I2C_MspInit>
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001068:	f000 ff8a 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
  if(pclk1 < I2C_MIN_PCLK_FREQ)
 800106c:	4b3b      	ldr	r3, [pc, #236]	; (800115c <HAL_I2C_Init+0x110>)
 800106e:	4298      	cmp	r0, r3
 8001070:	d9ef      	bls.n	8001052 <HAL_I2C_Init+0x6>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001072:	2324      	movs	r3, #36	; 0x24
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001074:	4d3a      	ldr	r5, [pc, #232]	; (8001160 <HAL_I2C_Init+0x114>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001076:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  freqrange = I2C_FREQ_RANGE(pclk1);
 800107a:	fbb0 f5f5 	udiv	r5, r0, r5
  __HAL_I2C_DISABLE(hi2c);
 800107e:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001080:	4938      	ldr	r1, [pc, #224]	; (8001164 <HAL_I2C_Init+0x118>)
  __HAL_I2C_DISABLE(hi2c);
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001090:	432a      	orrs	r2, r5
 8001092:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001094:	6862      	ldr	r2, [r4, #4]
 8001096:	6a1e      	ldr	r6, [r3, #32]
 8001098:	428a      	cmp	r2, r1
 800109a:	bf81      	itttt	hi
 800109c:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80010a0:	4369      	mulhi	r1, r5
 80010a2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80010a6:	fbb1 f1f5 	udivhi	r1, r1, r5
 80010aa:	bf94      	ite	ls
 80010ac:	1c69      	addls	r1, r5, #1
 80010ae:	3101      	addhi	r1, #1
 80010b0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80010b4:	4331      	orrs	r1, r6
 80010b6:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010b8:	69dd      	ldr	r5, [r3, #28]
 80010ba:	492a      	ldr	r1, [pc, #168]	; (8001164 <HAL_I2C_Init+0x118>)
 80010bc:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80010c0:	428a      	cmp	r2, r1
 80010c2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80010c6:	d830      	bhi.n	800112a <HAL_I2C_Init+0xde>
 80010c8:	0052      	lsls	r2, r2, #1
 80010ca:	fbb0 f0f2 	udiv	r0, r0, r2
 80010ce:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80010d2:	2a03      	cmp	r2, #3
 80010d4:	bf98      	it	ls
 80010d6:	2004      	movls	r0, #4
 80010d8:	4328      	orrs	r0, r5
 80010da:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010dc:	6819      	ldr	r1, [r3, #0]
 80010de:	6a20      	ldr	r0, [r4, #32]
 80010e0:	69e2      	ldr	r2, [r4, #28]
 80010e2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80010e6:	4302      	orrs	r2, r0
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010ec:	6899      	ldr	r1, [r3, #8]
 80010ee:	68e0      	ldr	r0, [r4, #12]
 80010f0:	6922      	ldr	r2, [r4, #16]
 80010f2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80010f6:	4302      	orrs	r2, r0
 80010f8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80010fc:	430a      	orrs	r2, r1
 80010fe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001100:	68d9      	ldr	r1, [r3, #12]
 8001102:	69a0      	ldr	r0, [r4, #24]
 8001104:	6962      	ldr	r2, [r4, #20]
 8001106:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800110a:	4302      	orrs	r2, r0
 800110c:	430a      	orrs	r2, r1
 800110e:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001110:	681a      	ldr	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001112:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001114:	f042 0201 	orr.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800111a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800111e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001122:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001124:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001128:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800112a:	68a1      	ldr	r1, [r4, #8]
 800112c:	b949      	cbnz	r1, 8001142 <HAL_I2C_Init+0xf6>
 800112e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001132:	fbb0 f0f2 	udiv	r0, r0, r2
 8001136:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800113a:	b162      	cbz	r2, 8001156 <HAL_I2C_Init+0x10a>
 800113c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001140:	e7ca      	b.n	80010d8 <HAL_I2C_Init+0x8c>
 8001142:	2119      	movs	r1, #25
 8001144:	434a      	muls	r2, r1
 8001146:	fbb0 f0f2 	udiv	r0, r0, r2
 800114a:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800114e:	b112      	cbz	r2, 8001156 <HAL_I2C_Init+0x10a>
 8001150:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001154:	e7c0      	b.n	80010d8 <HAL_I2C_Init+0x8c>
 8001156:	2001      	movs	r0, #1
 8001158:	e7be      	b.n	80010d8 <HAL_I2C_Init+0x8c>
 800115a:	bf00      	nop
 800115c:	001e847f 	.word	0x001e847f
 8001160:	000f4240 	.word	0x000f4240
 8001164:	000186a0 	.word	0x000186a0

08001168 <HAL_I2C_Master_Transmit>:
{
 8001168:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800116c:	4604      	mov	r4, r0
 800116e:	461f      	mov	r7, r3
 8001170:	460d      	mov	r5, r1
 8001172:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001174:	f7ff fd14 	bl	8000ba0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001178:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800117c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800117e:	2b20      	cmp	r3, #32
 8001180:	d004      	beq.n	800118c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY; 
 8001182:	2502      	movs	r5, #2
}
 8001184:	4628      	mov	r0, r5
 8001186:	b004      	add	sp, #16
 8001188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800118c:	9000      	str	r0, [sp, #0]
 800118e:	2319      	movs	r3, #25
 8001190:	2201      	movs	r2, #1
 8001192:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 8001196:	4620      	mov	r0, r4
 8001198:	f7ff feb0 	bl	8000efc <I2C_WaitOnFlagUntilTimeout>
 800119c:	2800      	cmp	r0, #0
 800119e:	d1f0      	bne.n	8001182 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80011a0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d0ec      	beq.n	8001182 <HAL_I2C_Master_Transmit+0x1a>
 80011a8:	2301      	movs	r3, #1
 80011aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80011b4:	bf5e      	ittt	pl
 80011b6:	681a      	ldrpl	r2, [r3, #0]
 80011b8:	f042 0201 	orrpl.w	r2, r2, #1
 80011bc:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011c4:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011c6:	2221      	movs	r2, #33	; 0x21
 80011c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011cc:	2210      	movs	r2, #16
 80011ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011d2:	2200      	movs	r2, #0
 80011d4:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011d6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80011da:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011dc:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80011de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80011e0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80011e4:	8522      	strh	r2, [r4, #40]	; 0x28
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME) || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 80011e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011e8:	2a04      	cmp	r2, #4
 80011ea:	d006      	beq.n	80011fa <HAL_I2C_Master_Transmit+0x92>
 80011ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011ee:	2a01      	cmp	r2, #1
 80011f0:	d003      	beq.n	80011fa <HAL_I2C_Master_Transmit+0x92>
 80011f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011f4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80011f8:	d104      	bne.n	8001204 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e002      	b.n	800120a <HAL_I2C_Master_Transmit+0xa2>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001204:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001206:	2a12      	cmp	r2, #18
 8001208:	d0f7      	beq.n	80011fa <HAL_I2C_Master_Transmit+0x92>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800120a:	9600      	str	r6, [sp, #0]
 800120c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800120e:	2200      	movs	r2, #0
 8001210:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff fe71 	bl	8000efc <I2C_WaitOnFlagUntilTimeout>
 800121a:	bb28      	cbnz	r0, 8001268 <HAL_I2C_Master_Transmit+0x100>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800121c:	6923      	ldr	r3, [r4, #16]
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001224:	d112      	bne.n	800124c <HAL_I2C_Master_Transmit+0xe4>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001226:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800122a:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800122c:	4633      	mov	r3, r6
 800122e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001230:	4936      	ldr	r1, [pc, #216]	; (800130c <HAL_I2C_Master_Transmit+0x1a4>)
 8001232:	4620      	mov	r0, r4
 8001234:	f7ff fe22 	bl	8000e7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001238:	4605      	mov	r5, r0
 800123a:	b9a0      	cbnz	r0, 8001266 <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	9003      	str	r0, [sp, #12]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	9203      	str	r2, [sp, #12]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	9303      	str	r3, [sp, #12]
 8001248:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 800124a:	e04f      	b.n	80012ec <HAL_I2C_Master_Transmit+0x184>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800124c:	11eb      	asrs	r3, r5, #7
 800124e:	f003 0306 	and.w	r3, r3, #6
 8001252:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001256:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001258:	492d      	ldr	r1, [pc, #180]	; (8001310 <HAL_I2C_Master_Transmit+0x1a8>)
 800125a:	4633      	mov	r3, r6
 800125c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800125e:	4620      	mov	r0, r4
 8001260:	f7ff fe0c 	bl	8000e7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001264:	b148      	cbz	r0, 800127a <HAL_I2C_Master_Transmit+0x112>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001266:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800126a:	2b04      	cmp	r3, #4
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	d107      	bne.n	8001282 <HAL_I2C_Master_Transmit+0x11a>
        __HAL_UNLOCK(hi2c);
 8001272:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001276:	2501      	movs	r5, #1
 8001278:	e784      	b.n	8001184 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	b2ed      	uxtb	r5, r5
 800127e:	611d      	str	r5, [r3, #16]
 8001280:	e7d4      	b.n	800122c <HAL_I2C_Master_Transmit+0xc4>
        __HAL_UNLOCK(hi2c);
 8001282:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001286:	2503      	movs	r5, #3
 8001288:	e77c      	b.n	8001184 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800128a:	4632      	mov	r2, r6
 800128c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff fe62 	bl	8000f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001294:	b140      	cbz	r0, 80012a8 <HAL_I2C_Master_Transmit+0x140>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001298:	2b04      	cmp	r3, #4
 800129a:	d1f4      	bne.n	8001286 <HAL_I2C_Master_Transmit+0x11e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800129c:	6822      	ldr	r2, [r4, #0]
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e7e6      	b.n	8001276 <HAL_I2C_Master_Transmit+0x10e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80012a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012aa:	6820      	ldr	r0, [r4, #0]
 80012ac:	1c4b      	adds	r3, r1, #1
 80012ae:	6263      	str	r3, [r4, #36]	; 0x24
 80012b0:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80012b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80012b4:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80012b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80012be:	1e53      	subs	r3, r2, #1
 80012c0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 80012c2:	6943      	ldr	r3, [r0, #20]
 80012c4:	075b      	lsls	r3, r3, #29
 80012c6:	d50a      	bpl.n	80012de <HAL_I2C_Master_Transmit+0x176>
 80012c8:	b14f      	cbz	r7, 80012de <HAL_I2C_Master_Transmit+0x176>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80012ca:	1c8b      	adds	r3, r1, #2
 80012cc:	6263      	str	r3, [r4, #36]	; 0x24
 80012ce:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80012d0:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80012d2:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80012d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80012d6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80012d8:	3b01      	subs	r3, #1
 80012da:	b29b      	uxth	r3, r3
 80012dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012de:	4632      	mov	r2, r6
 80012e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff fe8b 	bl	8000ffe <I2C_WaitOnBTFFlagUntilTimeout>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d1d4      	bne.n	8001296 <HAL_I2C_Master_Transmit+0x12e>
    while(hi2c->XferSize > 0U)
 80012ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1cb      	bne.n	800128a <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f2:	6821      	ldr	r1, [r4, #0]
 80012f4:	680a      	ldr	r2, [r1, #0]
 80012f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012fa:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80012fc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80012fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001302:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001306:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800130a:	e73b      	b.n	8001184 <HAL_I2C_Master_Transmit+0x1c>
 800130c:	00010002 	.word	0x00010002
 8001310:	00010008 	.word	0x00010008

08001314 <HAL_I2C_Master_Receive>:
{
 8001314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001318:	4604      	mov	r4, r0
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	4698      	mov	r8, r3
 800131e:	460d      	mov	r5, r1
 8001320:	4691      	mov	r9, r2
 8001322:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001324:	f7ff fc3c 	bl	8000ba0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001328:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800132c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800132e:	2b20      	cmp	r3, #32
 8001330:	d004      	beq.n	800133c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY; 
 8001332:	2502      	movs	r5, #2
}
 8001334:	4628      	mov	r0, r5
 8001336:	b009      	add	sp, #36	; 0x24
 8001338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800133c:	9000      	str	r0, [sp, #0]
 800133e:	2319      	movs	r3, #25
 8001340:	2201      	movs	r2, #1
 8001342:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff fdd8 	bl	8000efc <I2C_WaitOnFlagUntilTimeout>
 800134c:	2800      	cmp	r0, #0
 800134e:	d1f0      	bne.n	8001332 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001350:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001354:	2b01      	cmp	r3, #1
 8001356:	d0ec      	beq.n	8001332 <HAL_I2C_Master_Receive+0x1e>
 8001358:	2301      	movs	r3, #1
 800135a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001364:	bf5e      	ittt	pl
 8001366:	681a      	ldrpl	r2, [r3, #0]
 8001368:	f042 0201 	orrpl.w	r2, r2, #1
 800136c:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001374:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001376:	2222      	movs	r2, #34	; 0x22
 8001378:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800137c:	2210      	movs	r2, #16
 800137e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001382:	2200      	movs	r2, #0
 8001384:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001386:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 800138a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800138e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001390:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001392:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001396:	8522      	strh	r2, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800139e:	601a      	str	r2, [r3, #0]
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME)  || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 80013a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013a2:	2a04      	cmp	r2, #4
 80013a4:	d006      	beq.n	80013b4 <HAL_I2C_Master_Receive+0xa0>
 80013a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013a8:	2a01      	cmp	r2, #1
 80013aa:	d003      	beq.n	80013b4 <HAL_I2C_Master_Receive+0xa0>
 80013ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013ae:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80013b2:	d104      	bne.n	80013be <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e002      	b.n	80013c4 <HAL_I2C_Master_Receive+0xb0>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80013be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013c0:	2a11      	cmp	r2, #17
 80013c2:	d0f7      	beq.n	80013b4 <HAL_I2C_Master_Receive+0xa0>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013c4:	9600      	str	r6, [sp, #0]
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fd94 	bl	8000efc <I2C_WaitOnFlagUntilTimeout>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d14a      	bne.n	800146e <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013d8:	6923      	ldr	r3, [r4, #16]
 80013da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	d136      	bne.n	8001450 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80013e2:	f045 0501 	orr.w	r5, r5, #1
 80013e6:	b2ed      	uxtb	r5, r5
 80013e8:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013ea:	4633      	mov	r3, r6
 80013ec:	463a      	mov	r2, r7
 80013ee:	4982      	ldr	r1, [pc, #520]	; (80015f8 <HAL_I2C_Master_Receive+0x2e4>)
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff fd43 	bl	8000e7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013f6:	4605      	mov	r5, r0
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d137      	bne.n	800146c <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80013fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	2a00      	cmp	r2, #0
 8001402:	d066      	beq.n	80014d2 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8001404:	2a01      	cmp	r2, #1
 8001406:	d177      	bne.n	80014f8 <HAL_I2C_Master_Receive+0x1e4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800140e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001410:	9504      	str	r5, [sp, #16]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	9204      	str	r2, [sp, #16]
 8001416:	699a      	ldr	r2, [r3, #24]
 8001418:	9204      	str	r2, [sp, #16]
 800141a:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001422:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001424:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8001600 <HAL_I2C_Master_Receive+0x2ec>
    while(hi2c->XferSize > 0U)
 8001428:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800142a:	2b00      	cmp	r3, #0
 800142c:	d05b      	beq.n	80014e6 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 800142e:	2b03      	cmp	r3, #3
 8001430:	f200 80c3 	bhi.w	80015ba <HAL_I2C_Master_Receive+0x2a6>
        if(hi2c->XferSize == 1U)
 8001434:	2b01      	cmp	r3, #1
 8001436:	d17a      	bne.n	800152e <HAL_I2C_Master_Receive+0x21a>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001438:	4632      	mov	r2, r6
 800143a:	4639      	mov	r1, r7
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff fdb1 	bl	8000fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001442:	2800      	cmp	r0, #0
 8001444:	f000 8090 	beq.w	8001568 <HAL_I2C_Master_Receive+0x254>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001448:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800144a:	2b20      	cmp	r3, #32
 800144c:	d116      	bne.n	800147c <HAL_I2C_Master_Receive+0x168>
 800144e:	e03e      	b.n	80014ce <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001450:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001454:	f008 0806 	and.w	r8, r8, #6
 8001458:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800145c:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800145e:	4967      	ldr	r1, [pc, #412]	; (80015fc <HAL_I2C_Master_Receive+0x2e8>)
 8001460:	4633      	mov	r3, r6
 8001462:	463a      	mov	r2, r7
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff fd09 	bl	8000e7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800146a:	b148      	cbz	r0, 8001480 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800146c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800146e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001470:	2b04      	cmp	r3, #4
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	d128      	bne.n	80014ca <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001478:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800147c:	2501      	movs	r5, #1
 800147e:	e759      	b.n	8001334 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	b2ed      	uxtb	r5, r5
 8001484:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001486:	463a      	mov	r2, r7
 8001488:	4633      	mov	r3, r6
 800148a:	495b      	ldr	r1, [pc, #364]	; (80015f8 <HAL_I2C_Master_Receive+0x2e4>)
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff fcf5 	bl	8000e7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001492:	4602      	mov	r2, r0
 8001494:	2800      	cmp	r0, #0
 8001496:	d1e9      	bne.n	800146c <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	9007      	str	r0, [sp, #28]
 800149c:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800149e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a0:	9107      	str	r1, [sp, #28]
 80014a2:	6999      	ldr	r1, [r3, #24]
 80014a4:	9107      	str	r1, [sp, #28]
 80014a6:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80014ae:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014b0:	9600      	str	r6, [sp, #0]
 80014b2:	463b      	mov	r3, r7
 80014b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014b8:	f7ff fd20 	bl	8000efc <I2C_WaitOnFlagUntilTimeout>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d1d6      	bne.n	800146e <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80014c0:	6822      	ldr	r2, [r4, #0]
 80014c2:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80014c6:	6113      	str	r3, [r2, #16]
 80014c8:	e78f      	b.n	80013ea <HAL_I2C_Master_Receive+0xd6>
        __HAL_UNLOCK(hi2c);
 80014ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80014ce:	2503      	movs	r5, #3
 80014d0:	e730      	b.n	8001334 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d2:	9503      	str	r5, [sp, #12]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	9203      	str	r2, [sp, #12]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	9203      	str	r2, [sp, #12]
 80014dc:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	2320      	movs	r3, #32
 80014e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80014f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80014f6:	e71d      	b.n	8001334 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80014f8:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014fa:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80014fc:	d10d      	bne.n	800151a <HAL_I2C_Master_Receive+0x206>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001502:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800150a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800150c:	9505      	str	r5, [sp, #20]
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	9205      	str	r2, [sp, #20]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	9305      	str	r3, [sp, #20]
 8001516:	9b05      	ldr	r3, [sp, #20]
 8001518:	e784      	b.n	8001424 <HAL_I2C_Master_Receive+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800151a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800151e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001520:	9506      	str	r5, [sp, #24]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	9206      	str	r2, [sp, #24]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	9306      	str	r3, [sp, #24]
 800152a:	9b06      	ldr	r3, [sp, #24]
 800152c:	e77a      	b.n	8001424 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 800152e:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001530:	9600      	str	r6, [sp, #0]
 8001532:	463b      	mov	r3, r7
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4641      	mov	r1, r8
 800153a:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800153c:	d122      	bne.n	8001584 <HAL_I2C_Master_Receive+0x270>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800153e:	f7ff fcdd 	bl	8000efc <I2C_WaitOnFlagUntilTimeout>
 8001542:	2800      	cmp	r0, #0
 8001544:	d1c3      	bne.n	80014ce <HAL_I2C_Master_Receive+0x1ba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800154e:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001550:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	1c51      	adds	r1, r2, #1
 8001556:	6261      	str	r1, [r4, #36]	; 0x24
 8001558:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800155a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800155c:	3b01      	subs	r3, #1
 800155e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001562:	3b01      	subs	r3, #1
 8001564:	b29b      	uxth	r3, r3
 8001566:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	6262      	str	r2, [r4, #36]	; 0x24
 800156e:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001570:	6912      	ldr	r2, [r2, #16]
 8001572:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001574:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001576:	3b01      	subs	r3, #1
 8001578:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800157a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800157c:	3b01      	subs	r3, #1
 800157e:	b29b      	uxth	r3, r3
 8001580:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001582:	e751      	b.n	8001428 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001584:	f7ff fcba 	bl	8000efc <I2C_WaitOnFlagUntilTimeout>
 8001588:	4602      	mov	r2, r0
 800158a:	2800      	cmp	r0, #0
 800158c:	d19f      	bne.n	80014ce <HAL_I2C_Master_Receive+0x1ba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	6819      	ldr	r1, [r3, #0]
 8001592:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001596:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001598:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	1c48      	adds	r0, r1, #1
 800159e:	6260      	str	r0, [r4, #36]	; 0x24
 80015a0:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 80015a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015a4:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80015a6:	3b01      	subs	r3, #1
 80015a8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015ac:	4641      	mov	r1, r8
          hi2c->XferCount--;
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015b4:	4620      	mov	r0, r4
 80015b6:	463b      	mov	r3, r7
 80015b8:	e7c1      	b.n	800153e <HAL_I2C_Master_Receive+0x22a>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80015ba:	4632      	mov	r2, r6
 80015bc:	4639      	mov	r1, r7
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fcf0 	bl	8000fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	f47f af3f 	bne.w	8001448 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	6262      	str	r2, [r4, #36]	; 0x24
 80015d0:	6822      	ldr	r2, [r4, #0]
 80015d2:	6912      	ldr	r2, [r2, #16]
 80015d4:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80015d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80015d8:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80015da:	3b01      	subs	r3, #1
 80015dc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80015de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80015e6:	6953      	ldr	r3, [r2, #20]
 80015e8:	075b      	lsls	r3, r3, #29
 80015ea:	f57f af1d 	bpl.w	8001428 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f0:	1c59      	adds	r1, r3, #1
 80015f2:	6261      	str	r1, [r4, #36]	; 0x24
 80015f4:	e7bc      	b.n	8001570 <HAL_I2C_Master_Receive+0x25c>
 80015f6:	bf00      	nop
 80015f8:	00010002 	.word	0x00010002
 80015fc:	00010008 	.word	0x00010008
 8001600:	00010004 	.word	0x00010004

08001604 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001606:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800160e:	d00c      	beq.n	800162a <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8001610:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8001612:	491a      	ldr	r1, [pc, #104]	; (800167c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001614:	680b      	ldr	r3, [r1, #0]
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800161e:	6808      	ldr	r0, [r1, #0]
 8001620:	f000 0001 	and.w	r0, r0, #1
 8001624:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001626:	b002      	add	sp, #8
 8001628:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800162a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162c:	4914      	ldr	r1, [pc, #80]	; (8001680 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800162e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001632:	d00f      	beq.n	8001654 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001634:	680a      	ldr	r2, [r1, #0]
 8001636:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800163a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800163e:	d1e7      	bne.n	8001610 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8001640:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001644:	d1e4      	bne.n	8001610 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001648:	6813      	ldr	r3, [r2, #0]
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8001650:	2201      	movs	r2, #1
 8001652:	e7de      	b.n	8001612 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001656:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
 800165c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001662:	9201      	str	r2, [sp, #4]
 8001664:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001666:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001668:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800166a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001672:	6259      	str	r1, [r3, #36]	; 0x24
 8001674:	e7e1      	b.n	800163a <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40023c00 	.word	0x40023c00
 8001680:	40007000 	.word	0x40007000

08001684 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001684:	6803      	ldr	r3, [r0, #0]
{
 8001686:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	07d9      	lsls	r1, r3, #31
{
 800168c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168e:	d46a      	bmi.n	8001766 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	079a      	lsls	r2, r3, #30
 8001694:	f100 80e6 	bmi.w	8001864 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	06de      	lsls	r6, r3, #27
 800169c:	d555      	bpl.n	800174a <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800169e:	4dc1      	ldr	r5, [pc, #772]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 80016a0:	68ab      	ldr	r3, [r5, #8]
 80016a2:	f013 0f0c 	tst.w	r3, #12
 80016a6:	f040 8183 	bne.w	80019b0 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ae:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b2:	6829      	ldr	r1, [r5, #0]
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	2201      	movs	r2, #1
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	420b      	tst	r3, r1
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4c>
 80016ca:	69a3      	ldr	r3, [r4, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d06e      	beq.n	80017ae <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016d0:	4db4      	ldr	r5, [pc, #720]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 80016d2:	6a20      	ldr	r0, [r4, #32]
 80016d4:	686b      	ldr	r3, [r5, #4]
 80016d6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80016da:	4298      	cmp	r0, r3
 80016dc:	f240 814a 	bls.w	8001974 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e0:	f7ff ff90 	bl	8001604 <RCC_SetFlashLatencyFromMSIRange>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d162      	bne.n	80017ae <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e8:	686b      	ldr	r3, [r5, #4]
 80016ea:	6a22      	ldr	r2, [r4, #32]
 80016ec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016f0:	4313      	orrs	r3, r2
 80016f2:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f4:	6869      	ldr	r1, [r5, #4]
 80016f6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	fab3 f283 	clz	r2, r3
 8001702:	69e3      	ldr	r3, [r4, #28]
 8001704:	4093      	lsls	r3, r2
 8001706:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800170a:	4313      	orrs	r3, r2
 800170c:	606b      	str	r3, [r5, #4]
 800170e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001712:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001716:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800171a:	4ba2      	ldr	r3, [pc, #648]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 800171c:	21f0      	movs	r1, #240	; 0xf0
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	fa91 f1a1 	rbit	r1, r1
 8001724:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001728:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800172a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800172e:	40c3      	lsrs	r3, r0
 8001730:	1c58      	adds	r0, r3, #1
 8001732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001736:	40ca      	lsrs	r2, r1
 8001738:	499b      	ldr	r1, [pc, #620]	; (80019a8 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800173a:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800173c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800173e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001740:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001742:	4a9a      	ldr	r2, [pc, #616]	; (80019ac <HAL_RCC_OscConfig+0x328>)
 8001744:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001746:	f7ff fa03 	bl	8000b50 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	071d      	lsls	r5, r3, #28
 800174e:	f100 8191 	bmi.w	8001a74 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	0758      	lsls	r0, r3, #29
 8001756:	f100 81d3 	bmi.w	8001b00 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800175c:	2a00      	cmp	r2, #0
 800175e:	f040 8257 	bne.w	8001c10 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8001762:	2000      	movs	r0, #0
 8001764:	e024      	b.n	80017b0 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001766:	4b8f      	ldr	r3, [pc, #572]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	f002 020c 	and.w	r2, r2, #12
 800176e:	2a08      	cmp	r2, #8
 8001770:	d007      	beq.n	8001782 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	f002 020c 	and.w	r2, r2, #12
 8001778:	2a0c      	cmp	r2, #12
 800177a:	d11c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x132>
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	03db      	lsls	r3, r3, #15
 8001780:	d519      	bpl.n	80017b6 <HAL_RCC_OscConfig+0x132>
 8001782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001786:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4a86      	ldr	r2, [pc, #536]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 800178c:	6811      	ldr	r1, [r2, #0]
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	2201      	movs	r2, #1
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	420b      	tst	r3, r1
 80017a2:	f43f af75 	beq.w	8001690 <HAL_RCC_OscConfig+0xc>
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f af71 	bne.w	8001690 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
}
 80017b0:	b003      	add	sp, #12
 80017b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b6:	6863      	ldr	r3, [r4, #4]
 80017b8:	4d7a      	ldr	r5, [pc, #488]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d120      	bne.n	8001800 <HAL_RCC_OscConfig+0x17c>
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017c6:	f7ff f9eb 	bl	8000ba0 <HAL_GetTick>
 80017ca:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80017ce:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d0:	2601      	movs	r6, #1
 80017d2:	4f74      	ldr	r7, [pc, #464]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 80017d4:	fa95 f3a5 	rbit	r3, r5
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	fa95 f3a5 	rbit	r3, r5
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	fa06 f303 	lsl.w	r3, r6, r3
 80017ea:	4213      	tst	r3, r2
 80017ec:	f47f af50 	bne.w	8001690 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff f9d6 	bl	8000ba0 <HAL_GetTick>
 80017f4:	eba0 0008 	sub.w	r0, r0, r8
 80017f8:	2864      	cmp	r0, #100	; 0x64
 80017fa:	d9eb      	bls.n	80017d4 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80017fc:	2003      	movs	r0, #3
 80017fe:	e7d7      	b.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001800:	bb13      	cbnz	r3, 8001848 <HAL_RCC_OscConfig+0x1c4>
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180c:	602b      	str	r3, [r5, #0]
 800180e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001810:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001818:	f7ff f9c2 	bl	8000ba0 <HAL_GetTick>
 800181c:	4680      	mov	r8, r0
 800181e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	682a      	ldr	r2, [r5, #0]
 8001824:	fa96 f3a6 	rbit	r3, r6
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	fa07 f303 	lsl.w	r3, r7, r3
 8001834:	4213      	tst	r3, r2
 8001836:	f43f af2b 	beq.w	8001690 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183a:	f7ff f9b1 	bl	8000ba0 <HAL_GetTick>
 800183e:	eba0 0008 	sub.w	r0, r0, r8
 8001842:	2864      	cmp	r0, #100	; 0x64
 8001844:	d9eb      	bls.n	800181e <HAL_RCC_OscConfig+0x19a>
 8001846:	e7d9      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	2b05      	cmp	r3, #5
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	d103      	bne.n	8001856 <HAL_RCC_OscConfig+0x1d2>
 800184e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001852:	602b      	str	r3, [r5, #0]
 8001854:	e7b3      	b.n	80017be <HAL_RCC_OscConfig+0x13a>
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	602b      	str	r3, [r5, #0]
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001862:	e7af      	b.n	80017c4 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001864:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	f002 020c 	and.w	r2, r2, #12
 800186c:	2a04      	cmp	r2, #4
 800186e:	d007      	beq.n	8001880 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	f002 020c 	and.w	r2, r2, #12
 8001876:	2a0c      	cmp	r2, #12
 8001878:	d124      	bne.n	80018c4 <HAL_RCC_OscConfig+0x240>
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	03df      	lsls	r7, r3, #15
 800187e:	d421      	bmi.n	80018c4 <HAL_RCC_OscConfig+0x240>
 8001880:	2302      	movs	r3, #2
 8001882:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 8001888:	6810      	ldr	r0, [r2, #0]
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	2101      	movs	r1, #1
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	4203      	tst	r3, r0
 800189e:	4613      	mov	r3, r2
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
 80018a2:	68e2      	ldr	r2, [r4, #12]
 80018a4:	428a      	cmp	r2, r1
 80018a6:	d182      	bne.n	80017ae <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	6858      	ldr	r0, [r3, #4]
 80018aa:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 80018ae:	fa92 f2a2 	rbit	r2, r2
 80018b2:	fab2 f182 	clz	r1, r2
 80018b6:	6922      	ldr	r2, [r4, #16]
 80018b8:	408a      	lsls	r2, r1
 80018ba:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	e6e9      	b.n	8001698 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c4:	68e2      	ldr	r2, [r4, #12]
 80018c6:	2501      	movs	r5, #1
 80018c8:	b382      	cbz	r2, 800192c <HAL_RCC_OscConfig+0x2a8>
 80018ca:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80018de:	f7ff f95f 	bl	8000ba0 <HAL_GetTick>
 80018e2:	2702      	movs	r7, #2
 80018e4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	4e2f      	ldr	r6, [pc, #188]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 80018e8:	fa97 f3a7 	rbit	r3, r7
 80018ec:	6832      	ldr	r2, [r6, #0]
 80018ee:	fa97 f3a7 	rbit	r3, r7
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	fa05 f303 	lsl.w	r3, r5, r3
 80018fe:	4213      	tst	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	6871      	ldr	r1, [r6, #4]
 8001904:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	fab3 f283 	clz	r2, r3
 8001910:	6923      	ldr	r3, [r4, #16]
 8001912:	4093      	lsls	r3, r2
 8001914:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8001918:	4313      	orrs	r3, r2
 800191a:	6073      	str	r3, [r6, #4]
 800191c:	e6bc      	b.n	8001698 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff f93f 	bl	8000ba0 <HAL_GetTick>
 8001922:	eba0 0008 	sub.w	r0, r0, r8
 8001926:	2802      	cmp	r0, #2
 8001928:	d9de      	bls.n	80018e8 <HAL_RCC_OscConfig+0x264>
 800192a:	e767      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
 800192c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001938:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001940:	f7ff f92e 	bl	8000ba0 <HAL_GetTick>
 8001944:	2602      	movs	r6, #2
 8001946:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001948:	4f16      	ldr	r7, [pc, #88]	; (80019a4 <HAL_RCC_OscConfig+0x320>)
 800194a:	fa96 f3a6 	rbit	r3, r6
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	fa96 f3a6 	rbit	r3, r6
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	fa05 f303 	lsl.w	r3, r5, r3
 8001960:	4213      	tst	r3, r2
 8001962:	f43f ae99 	beq.w	8001698 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff f91b 	bl	8000ba0 <HAL_GetTick>
 800196a:	eba0 0008 	sub.w	r0, r0, r8
 800196e:	2802      	cmp	r0, #2
 8001970:	d9eb      	bls.n	800194a <HAL_RCC_OscConfig+0x2c6>
 8001972:	e743      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001974:	686b      	ldr	r3, [r5, #4]
 8001976:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800197a:	4303      	orrs	r3, r0
 800197c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800197e:	6869      	ldr	r1, [r5, #4]
 8001980:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	fab3 f283 	clz	r2, r3
 800198c:	69e3      	ldr	r3, [r4, #28]
 800198e:	4093      	lsls	r3, r2
 8001990:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001994:	4313      	orrs	r3, r2
 8001996:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001998:	f7ff fe34 	bl	8001604 <RCC_SetFlashLatencyFromMSIRange>
 800199c:	2800      	cmp	r0, #0
 800199e:	f43f aeb6 	beq.w	800170e <HAL_RCC_OscConfig+0x8a>
 80019a2:	e704      	b.n	80017ae <HAL_RCC_OscConfig+0x12a>
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08004c81 	.word	0x08004c81
 80019ac:	20000010 	.word	0x20000010
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019b0:	69a2      	ldr	r2, [r4, #24]
 80019b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d037      	beq.n	8001a2a <HAL_RCC_OscConfig+0x3a6>
 80019ba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	2601      	movs	r6, #1
 80019c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019c8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80019d0:	f7ff f8e6 	bl	8000ba0 <HAL_GetTick>
 80019d4:	f44f 7700 	mov.w	r7, #512	; 0x200
 80019d8:	4680      	mov	r8, r0
 80019da:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80019de:	682a      	ldr	r2, [r5, #0]
 80019e0:	fa97 f3a7 	rbit	r3, r7
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	fa06 f303 	lsl.w	r3, r6, r3
 80019f0:	4213      	tst	r3, r2
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	686b      	ldr	r3, [r5, #4]
 80019f6:	6a22      	ldr	r2, [r4, #32]
 80019f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019fc:	4313      	orrs	r3, r2
 80019fe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a00:	6869      	ldr	r1, [r5, #4]
 8001a02:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	fab3 f283 	clz	r2, r3
 8001a0e:	69e3      	ldr	r3, [r4, #28]
 8001a10:	4093      	lsls	r3, r2
 8001a12:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001a16:	4313      	orrs	r3, r2
 8001a18:	606b      	str	r3, [r5, #4]
 8001a1a:	e696      	b.n	800174a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a1c:	f7ff f8c0 	bl	8000ba0 <HAL_GetTick>
 8001a20:	eba0 0008 	sub.w	r0, r0, r8
 8001a24:	2802      	cmp	r0, #2
 8001a26:	d9d8      	bls.n	80019da <HAL_RCC_OscConfig+0x356>
 8001a28:	e6e8      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
 8001a2a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a36:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f8af 	bl	8000ba0 <HAL_GetTick>
 8001a42:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001a46:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001a48:	2701      	movs	r7, #1
 8001a4a:	fa96 f3a6 	rbit	r3, r6
 8001a4e:	682a      	ldr	r2, [r5, #0]
 8001a50:	fa96 f3a6 	rbit	r3, r6
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa07 f303 	lsl.w	r3, r7, r3
 8001a60:	4213      	tst	r3, r2
 8001a62:	f43f ae72 	beq.w	800174a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a66:	f7ff f89b 	bl	8000ba0 <HAL_GetTick>
 8001a6a:	eba0 0008 	sub.w	r0, r0, r8
 8001a6e:	2802      	cmp	r0, #2
 8001a70:	d9eb      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3c6>
 8001a72:	e6c3      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a74:	6962      	ldr	r2, [r4, #20]
 8001a76:	2501      	movs	r5, #1
 8001a78:	49a9      	ldr	r1, [pc, #676]	; (8001d20 <HAL_RCC_OscConfig+0x69c>)
 8001a7a:	b302      	cbz	r2, 8001abe <HAL_RCC_OscConfig+0x43a>
 8001a7c:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	440b      	add	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f889 	bl	8000ba0 <HAL_GetTick>
 8001a8e:	2602      	movs	r6, #2
 8001a90:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	4fa4      	ldr	r7, [pc, #656]	; (8001d24 <HAL_RCC_OscConfig+0x6a0>)
 8001a94:	fa96 f3a6 	rbit	r3, r6
 8001a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a9a:	fa96 f3a6 	rbit	r3, r6
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	fa05 f303 	lsl.w	r3, r5, r3
 8001aaa:	4213      	tst	r3, r2
 8001aac:	f47f ae51 	bne.w	8001752 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f876 	bl	8000ba0 <HAL_GetTick>
 8001ab4:	eba0 0008 	sub.w	r0, r0, r8
 8001ab8:	2802      	cmp	r0, #2
 8001aba:	d9eb      	bls.n	8001a94 <HAL_RCC_OscConfig+0x410>
 8001abc:	e69e      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
 8001abe:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001acc:	f7ff f868 	bl	8000ba0 <HAL_GetTick>
 8001ad0:	2602      	movs	r6, #2
 8001ad2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4f93      	ldr	r7, [pc, #588]	; (8001d24 <HAL_RCC_OscConfig+0x6a0>)
 8001ad6:	fa96 f3a6 	rbit	r3, r6
 8001ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001adc:	fa96 f3a6 	rbit	r3, r6
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa05 f303 	lsl.w	r3, r5, r3
 8001aec:	4213      	tst	r3, r2
 8001aee:	f43f ae30 	beq.w	8001752 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af2:	f7ff f855 	bl	8000ba0 <HAL_GetTick>
 8001af6:	eba0 0008 	sub.w	r0, r0, r8
 8001afa:	2802      	cmp	r0, #2
 8001afc:	d9eb      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x452>
 8001afe:	e67d      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b00:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x6a0>)
 8001b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b04:	00d1      	lsls	r1, r2, #3
 8001b06:	d434      	bmi.n	8001b72 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001b08:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	4d82      	ldr	r5, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x6a4>)
 8001b1e:	682b      	ldr	r3, [r5, #0]
 8001b20:	05da      	lsls	r2, r3, #23
 8001b22:	d528      	bpl.n	8001b76 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	68a3      	ldr	r3, [r4, #8]
 8001b26:	4d7f      	ldr	r5, [pc, #508]	; (8001d24 <HAL_RCC_OscConfig+0x6a0>)
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d134      	bne.n	8001b96 <HAL_RCC_OscConfig+0x512>
 8001b2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b32:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001b34:	f7ff f834 	bl	8000ba0 <HAL_GetTick>
 8001b38:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001b3c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	2701      	movs	r7, #1
 8001b40:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001d24 <HAL_RCC_OscConfig+0x6a0>
 8001b44:	fa95 f3a5 	rbit	r3, r5
 8001b48:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8001b4c:	fa95 f3a5 	rbit	r3, r5
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	fa07 f303 	lsl.w	r3, r7, r3
 8001b5c:	4213      	tst	r3, r2
 8001b5e:	d04e      	beq.n	8001bfe <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8001b60:	2e00      	cmp	r6, #0
 8001b62:	f43f adfa 	beq.w	800175a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b66:	4a6f      	ldr	r2, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x6a0>)
 8001b68:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	6253      	str	r3, [r2, #36]	; 0x24
 8001b70:	e5f3      	b.n	800175a <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8001b72:	2600      	movs	r6, #0
 8001b74:	e7d2      	b.n	8001b1c <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b76:	682b      	ldr	r3, [r5, #0]
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f80f 	bl	8000ba0 <HAL_GetTick>
 8001b82:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	05db      	lsls	r3, r3, #23
 8001b88:	d4cc      	bmi.n	8001b24 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8a:	f7ff f809 	bl	8000ba0 <HAL_GetTick>
 8001b8e:	1bc0      	subs	r0, r0, r7
 8001b90:	2864      	cmp	r0, #100	; 0x64
 8001b92:	d9f7      	bls.n	8001b84 <HAL_RCC_OscConfig+0x500>
 8001b94:	e632      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b96:	bb23      	cbnz	r3, 8001be2 <HAL_RCC_OscConfig+0x55e>
 8001b98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b9a:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba2:	636b      	str	r3, [r5, #52]	; 0x34
 8001ba4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba6:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bae:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001bb0:	f7fe fff6 	bl	8000ba0 <HAL_GetTick>
 8001bb4:	4681      	mov	r9, r0
 8001bb6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001bbc:	fa97 f3a7 	rbit	r3, r7
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa08 f303 	lsl.w	r3, r8, r3
 8001bcc:	4213      	tst	r3, r2
 8001bce:	d0c7      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7fe ffe6 	bl	8000ba0 <HAL_GetTick>
 8001bd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bd8:	eba0 0009 	sub.w	r0, r0, r9
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d9ea      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x532>
 8001be0:	e60c      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001be6:	d103      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x56c>
 8001be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bec:	636b      	str	r3, [r5, #52]	; 0x34
 8001bee:	e79d      	b.n	8001b2c <HAL_RCC_OscConfig+0x4a8>
 8001bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf4:	636b      	str	r3, [r5, #52]	; 0x34
 8001bf6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bfc:	e799      	b.n	8001b32 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7fe ffcf 	bl	8000ba0 <HAL_GetTick>
 8001c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c06:	eba0 0009 	sub.w	r0, r0, r9
 8001c0a:	4298      	cmp	r0, r3
 8001c0c:	d99a      	bls.n	8001b44 <HAL_RCC_OscConfig+0x4c0>
 8001c0e:	e5f5      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4d44      	ldr	r5, [pc, #272]	; (8001d24 <HAL_RCC_OscConfig+0x6a0>)
 8001c12:	68ab      	ldr	r3, [r5, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	f43f adc8 	beq.w	80017ae <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1e:	2a02      	cmp	r2, #2
 8001c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c24:	d156      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x650>
 8001c26:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c34:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ffb0 	bl	8000ba0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c40:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8001c42:	4680      	mov	r8, r0
 8001c44:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	2501      	movs	r5, #1
 8001c4a:	fa97 f3a7 	rbit	r3, r7
 8001c4e:	6832      	ldr	r2, [r6, #0]
 8001c50:	fa97 f3a7 	rbit	r3, r7
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	fa05 f303 	lsl.w	r3, r5, r3
 8001c60:	4213      	tst	r3, r2
 8001c62:	d130      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	68b2      	ldr	r2, [r6, #8]
 8001c66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c6a:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	4313      	orrs	r3, r2
 8001c72:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60b3      	str	r3, [r6, #8]
 8001c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c7c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c88:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001c90:	f7fe ff86 	bl	8000ba0 <HAL_GetTick>
 8001c94:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001c98:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9a:	2501      	movs	r5, #1
 8001c9c:	4e21      	ldr	r6, [pc, #132]	; (8001d24 <HAL_RCC_OscConfig+0x6a0>)
 8001c9e:	fa94 f3a4 	rbit	r3, r4
 8001ca2:	6832      	ldr	r2, [r6, #0]
 8001ca4:	fa94 f3a4 	rbit	r3, r4
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa05 f303 	lsl.w	r3, r5, r3
 8001cb4:	4213      	tst	r3, r2
 8001cb6:	f47f ad54 	bne.w	8001762 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cba:	f7fe ff71 	bl	8000ba0 <HAL_GetTick>
 8001cbe:	1bc0      	subs	r0, r0, r7
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	d9ec      	bls.n	8001c9e <HAL_RCC_OscConfig+0x61a>
 8001cc4:	e59a      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7fe ff6b 	bl	8000ba0 <HAL_GetTick>
 8001cca:	eba0 0008 	sub.w	r0, r0, r8
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9bb      	bls.n	8001c4a <HAL_RCC_OscConfig+0x5c6>
 8001cd2:	e593      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
 8001cd4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cea:	f7fe ff59 	bl	8000ba0 <HAL_GetTick>
 8001cee:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001cf2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	2601      	movs	r6, #1
 8001cf6:	fa94 f3a4 	rbit	r3, r4
 8001cfa:	682a      	ldr	r2, [r5, #0]
 8001cfc:	fa94 f3a4 	rbit	r3, r4
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa06 f303 	lsl.w	r3, r6, r3
 8001d0c:	4213      	tst	r3, r2
 8001d0e:	f43f ad28 	beq.w	8001762 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d12:	f7fe ff45 	bl	8000ba0 <HAL_GetTick>
 8001d16:	1bc0      	subs	r0, r0, r7
 8001d18:	2802      	cmp	r0, #2
 8001d1a:	d9ec      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x672>
 8001d1c:	e56e      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
 8001d1e:	bf00      	nop
 8001d20:	1091c1a0 	.word	0x1091c1a0
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40007000 	.word	0x40007000

08001d2c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001d2c:	491e      	ldr	r1, [pc, #120]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001d2e:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001d30:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d32:	f003 020c 	and.w	r2, r3, #12
 8001d36:	2a08      	cmp	r2, #8
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d3a:	2a0c      	cmp	r2, #12
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x1e>
 8001d3e:	2a04      	cmp	r2, #4
 8001d40:	d122      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8001d42:	481a      	ldr	r0, [pc, #104]	; (8001dac <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001d44:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001d46:	481a      	ldr	r0, [pc, #104]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x84>)
 8001d48:	bd10      	pop	{r4, pc}
 8001d4a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d4e:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8001d5e:	4815      	ldr	r0, [pc, #84]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x88>)
 8001d60:	5c84      	ldrb	r4, [r0, r2]
 8001d62:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001d66:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001d6a:	fab0 f280 	clz	r2, r0
 8001d6e:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d72:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001d74:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d76:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001d78:	bf4c      	ite	mi
 8001d7a:	4b0d      	ldrmi	r3, [pc, #52]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001d7c:	4b0b      	ldrpl	r3, [pc, #44]	; (8001dac <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001d7e:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8001d80:	4363      	muls	r3, r4
 8001d82:	fbb3 f0f0 	udiv	r0, r3, r0
 8001d86:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001d88:	6848      	ldr	r0, [r1, #4]
 8001d8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001d9a:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001d9c:	1c43      	adds	r3, r0, #1
 8001d9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001da2:	4098      	lsls	r0, r3
 8001da4:	bd10      	pop	{r4, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	007a1200 	.word	0x007a1200
 8001db4:	08004c99 	.word	0x08004c99

08001db8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001db8:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dbe:	681a      	ldr	r2, [r3, #0]
{
 8001dc0:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dc2:	f002 0201 	and.w	r2, r2, #1
 8001dc6:	428a      	cmp	r2, r1
{
 8001dc8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dca:	d330      	bcc.n	8001e2e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	6832      	ldr	r2, [r6, #0]
 8001dce:	0794      	lsls	r4, r2, #30
 8001dd0:	d440      	bmi.n	8001e54 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	07d0      	lsls	r0, r2, #31
 8001dd4:	d446      	bmi.n	8001e64 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <HAL_RCC_ClockConfig+0x1ac>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f002 0201 	and.w	r2, r2, #1
 8001dde:	4295      	cmp	r5, r2
 8001de0:	f0c0 80ae 	bcc.w	8001f40 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	6832      	ldr	r2, [r6, #0]
 8001de6:	0751      	lsls	r1, r2, #29
 8001de8:	f100 80b3 	bmi.w	8001f52 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	0713      	lsls	r3, r2, #28
 8001dee:	d507      	bpl.n	8001e00 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df0:	4a5d      	ldr	r2, [pc, #372]	; (8001f68 <HAL_RCC_ClockConfig+0x1b0>)
 8001df2:	6931      	ldr	r1, [r6, #16]
 8001df4:	6893      	ldr	r3, [r2, #8]
 8001df6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dfa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dfe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e00:	f7ff ff94 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001e04:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <HAL_RCC_ClockConfig+0x1b0>)
 8001e06:	22f0      	movs	r2, #240	; 0xf0
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	fa92 f2a2 	rbit	r2, r2
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e16:	40d3      	lsrs	r3, r2
 8001e18:	4a54      	ldr	r2, [pc, #336]	; (8001f6c <HAL_RCC_ClockConfig+0x1b4>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	40d8      	lsrs	r0, r3
 8001e1e:	4b54      	ldr	r3, [pc, #336]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7fe fe94 	bl	8000b50 <HAL_InitTick>
  return HAL_OK;
 8001e28:	2000      	movs	r0, #0
}
 8001e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	2901      	cmp	r1, #1
 8001e30:	bf02      	ittt	eq
 8001e32:	681a      	ldreq	r2, [r3, #0]
 8001e34:	f042 0204 	orreq.w	r2, r2, #4
 8001e38:	601a      	streq	r2, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	4299      	cmp	r1, r3
 8001e4c:	d0be      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001e4e:	2001      	movs	r0, #1
 8001e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4944      	ldr	r1, [pc, #272]	; (8001f68 <HAL_RCC_ClockConfig+0x1b0>)
 8001e56:	68b0      	ldr	r0, [r6, #8]
 8001e58:	688b      	ldr	r3, [r1, #8]
 8001e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	608b      	str	r3, [r1, #8]
 8001e62:	e7b6      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e64:	6872      	ldr	r2, [r6, #4]
 8001e66:	4940      	ldr	r1, [pc, #256]	; (8001f68 <HAL_RCC_ClockConfig+0x1b0>)
 8001e68:	2a02      	cmp	r2, #2
 8001e6a:	d10f      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xd4>
 8001e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e70:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001e74:	6808      	ldr	r0, [r1, #0]
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	2101      	movs	r1, #1
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4203      	tst	r3, r0
 8001e8a:	e013      	b.n	8001eb4 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8c:	2a03      	cmp	r2, #3
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
 8001e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e94:	e7ec      	b.n	8001e70 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e96:	2a01      	cmp	r2, #1
 8001e98:	d129      	bne.n	8001eee <HAL_RCC_ClockConfig+0x136>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	6809      	ldr	r1, [r1, #0]
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001eb4:	d0cb      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb6:	4c2c      	ldr	r4, [pc, #176]	; (8001f68 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebc:	68a3      	ldr	r3, [r4, #8]
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001ec6:	f7fe fe6b 	bl	8000ba0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001ecc:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d110      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed2:	68a3      	ldr	r3, [r4, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	f43f af7c 	beq.w	8001dd6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ede:	f7fe fe5f 	bl	8000ba0 <HAL_GetTick>
 8001ee2:	1bc0      	subs	r0, r0, r7
 8001ee4:	4540      	cmp	r0, r8
 8001ee6:	d9f4      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001ee8:	2003      	movs	r0, #3
 8001eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef2:	e7bd      	b.n	8001e70 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef8:	68a3      	ldr	r3, [r4, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	f43f af69 	beq.w	8001dd6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7fe fe4c 	bl	8000ba0 <HAL_GetTick>
 8001f08:	1bc0      	subs	r0, r0, r7
 8001f0a:	4540      	cmp	r0, r8
 8001f0c:	d9f4      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x140>
 8001f0e:	e7eb      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d110      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f14:	68a3      	ldr	r3, [r4, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	f43f af5b 	beq.w	8001dd6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe fe3e 	bl	8000ba0 <HAL_GetTick>
 8001f24:	1bc0      	subs	r0, r0, r7
 8001f26:	4540      	cmp	r0, r8
 8001f28:	d9f4      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x15c>
 8001f2a:	e7dd      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7fe fe38 	bl	8000ba0 <HAL_GetTick>
 8001f30:	1bc0      	subs	r0, r0, r7
 8001f32:	4540      	cmp	r0, r8
 8001f34:	d8d8      	bhi.n	8001ee8 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f36:	68a3      	ldr	r3, [r4, #8]
 8001f38:	f013 0f0c 	tst.w	r3, #12
 8001f3c:	d1f6      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x174>
 8001f3e:	e74a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	07da      	lsls	r2, r3, #31
 8001f4c:	f53f af7f 	bmi.w	8001e4e <HAL_RCC_ClockConfig+0x96>
 8001f50:	e748      	b.n	8001de4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f52:	4905      	ldr	r1, [pc, #20]	; (8001f68 <HAL_RCC_ClockConfig+0x1b0>)
 8001f54:	68f0      	ldr	r0, [r6, #12]
 8001f56:	688b      	ldr	r3, [r1, #8]
 8001f58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f5c:	4303      	orrs	r3, r0
 8001f5e:	608b      	str	r3, [r1, #8]
 8001f60:	e744      	b.n	8001dec <HAL_RCC_ClockConfig+0x34>
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08004c81 	.word	0x08004c81
 8001f70:	20000010 	.word	0x20000010

08001f74 <HAL_RCC_GetHCLKFreq>:
}
 8001f74:	4b01      	ldr	r3, [pc, #4]	; (8001f7c <HAL_RCC_GetHCLKFreq+0x8>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000010 	.word	0x20000010

08001f80 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	fa92 f2a2 	rbit	r2, r2
 8001f8c:	fab2 f282 	clz	r2, r2
 8001f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f94:	40d3      	lsrs	r3, r2
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001f9c:	6810      	ldr	r0, [r2, #0]
}    
 8001f9e:	40d8      	lsrs	r0, r3
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08004c91 	.word	0x08004c91
 8001fac:	20000010 	.word	0x20000010

08001fb0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	fa92 f2a2 	rbit	r2, r2
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001fc4:	40d3      	lsrs	r3, r2
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001fcc:	6810      	ldr	r0, [r2, #0]
} 
 8001fce:	40d8      	lsrs	r0, r3
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08004c91 	.word	0x08004c91
 8001fdc:	20000010 	.word	0x20000010

08001fe0 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fe4:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fe6:	6805      	ldr	r5, [r0, #0]
 8001fe8:	68c2      	ldr	r2, [r0, #12]
 8001fea:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fec:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ff6:	6883      	ldr	r3, [r0, #8]
 8001ff8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001ffa:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ffc:	4303      	orrs	r3, r0
 8001ffe:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002002:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002006:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8002008:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800200c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800200e:	4313      	orrs	r3, r2
 8002010:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002012:	696b      	ldr	r3, [r5, #20]
 8002014:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8002018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201c:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800201e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002022:	616b      	str	r3, [r5, #20]
 8002024:	4b7e      	ldr	r3, [pc, #504]	; (8002220 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002026:	d17f      	bne.n	8002128 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002028:	429d      	cmp	r5, r3
 800202a:	f04f 0419 	mov.w	r4, #25
 800202e:	d147      	bne.n	80020c0 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002030:	f7ff ffbe 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002034:	fb04 f300 	mul.w	r3, r4, r0
 8002038:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800203c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002040:	007f      	lsls	r7, r7, #1
 8002042:	fbb3 f3f7 	udiv	r3, r3, r7
 8002046:	fbb3 f3f8 	udiv	r3, r3, r8
 800204a:	011f      	lsls	r7, r3, #4
 800204c:	f7ff ffb0 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002050:	4360      	muls	r0, r4
 8002052:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fbb0 f6f3 	udiv	r6, r0, r3
 800205c:	f7ff ffa8 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002060:	4360      	muls	r0, r4
 8002062:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fbb0 f3f3 	udiv	r3, r0, r3
 800206c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002070:	fb08 6313 	mls	r3, r8, r3, r6
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	3332      	adds	r3, #50	; 0x32
 8002078:	fbb3 f3f8 	udiv	r3, r3, r8
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8002082:	f7ff ff95 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002086:	4360      	muls	r0, r4
 8002088:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800208c:	0052      	lsls	r2, r2, #1
 800208e:	fbb0 faf2 	udiv	sl, r0, r2
 8002092:	f7ff ff8d 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002096:	4360      	muls	r0, r4
 8002098:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a2:	fbb3 f3f8 	udiv	r3, r3, r8
 80020a6:	fb08 a313 	mls	r3, r8, r3, sl
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	3332      	adds	r3, #50	; 0x32
 80020ae:	fbb3 f3f8 	udiv	r3, r3, r8
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020b8:	4433      	add	r3, r6
 80020ba:	60ab      	str	r3, [r5, #8]
 80020bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020c0:	f7ff ff5e 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80020c4:	fb04 f300 	mul.w	r3, r4, r0
 80020c8:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80020cc:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020d0:	007f      	lsls	r7, r7, #1
 80020d2:	fbb3 f3f7 	udiv	r3, r3, r7
 80020d6:	fbb3 f3f8 	udiv	r3, r3, r8
 80020da:	011f      	lsls	r7, r3, #4
 80020dc:	f7ff ff50 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80020e0:	4360      	muls	r0, r4
 80020e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fbb0 f6f3 	udiv	r6, r0, r3
 80020ec:	f7ff ff48 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80020f0:	4360      	muls	r0, r4
 80020f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fc:	fbb3 f3f8 	udiv	r3, r3, r8
 8002100:	fb08 6313 	mls	r3, r8, r3, r6
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	3332      	adds	r3, #50	; 0x32
 8002108:	fbb3 f3f8 	udiv	r3, r3, r8
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8002112:	f7ff ff35 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8002116:	4360      	muls	r0, r4
 8002118:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800211c:	0052      	lsls	r2, r2, #1
 800211e:	fbb0 faf2 	udiv	sl, r0, r2
 8002122:	f7ff ff2d 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8002126:	e7b6      	b.n	8002096 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8002128:	429d      	cmp	r5, r3
 800212a:	f04f 0419 	mov.w	r4, #25
 800212e:	d143      	bne.n	80021b8 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002130:	f7ff ff3e 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002134:	fb04 f300 	mul.w	r3, r4, r0
 8002138:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800213c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002140:	00b6      	lsls	r6, r6, #2
 8002142:	fbb3 f3f6 	udiv	r3, r3, r6
 8002146:	fbb3 f3f8 	udiv	r3, r3, r8
 800214a:	011e      	lsls	r6, r3, #4
 800214c:	f7ff ff30 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002150:	4360      	muls	r0, r4
 8002152:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fbb0 f7f3 	udiv	r7, r0, r3
 800215c:	f7ff ff28 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002160:	4360      	muls	r0, r4
 8002162:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fbb0 f3f3 	udiv	r3, r0, r3
 800216c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002170:	fb08 7313 	mls	r3, r8, r3, r7
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	3332      	adds	r3, #50	; 0x32
 8002178:	fbb3 f3f8 	udiv	r3, r3, r8
 800217c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002180:	f7ff ff16 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002184:	4360      	muls	r0, r4
 8002186:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800218a:	0092      	lsls	r2, r2, #2
 800218c:	fbb0 faf2 	udiv	sl, r0, r2
 8002190:	f7ff ff0e 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002194:	4360      	muls	r0, r4
 8002196:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a0:	fbb3 f3f8 	udiv	r3, r3, r8
 80021a4:	fb08 a313 	mls	r3, r8, r3, sl
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	3332      	adds	r3, #50	; 0x32
 80021ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	433b      	orrs	r3, r7
 80021b6:	e77f      	b.n	80020b8 <UART_SetConfig+0xd8>
 80021b8:	f7ff fee2 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80021bc:	fb04 f300 	mul.w	r3, r4, r0
 80021c0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80021c4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80021c8:	00b6      	lsls	r6, r6, #2
 80021ca:	fbb3 f3f6 	udiv	r3, r3, r6
 80021ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80021d2:	011e      	lsls	r6, r3, #4
 80021d4:	f7ff fed4 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80021d8:	4360      	muls	r0, r4
 80021da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fbb0 f7f3 	udiv	r7, r0, r3
 80021e4:	f7ff fecc 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 80021e8:	4360      	muls	r0, r4
 80021ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80021f8:	fb08 7313 	mls	r3, r8, r3, r7
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	3332      	adds	r3, #50	; 0x32
 8002200:	fbb3 f3f8 	udiv	r3, r3, r8
 8002204:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002208:	f7ff feba 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 800220c:	4360      	muls	r0, r4
 800220e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	fbb0 faf2 	udiv	sl, r0, r2
 8002218:	f7ff feb2 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 800221c:	e7ba      	b.n	8002194 <UART_SetConfig+0x1b4>
 800221e:	bf00      	nop
 8002220:	40013800 	.word	0x40013800

08002224 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	4604      	mov	r4, r0
 8002228:	460e      	mov	r6, r1
 800222a:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 800222c:	f7fe fcb8 	bl	8000ba0 <HAL_GetTick>
 8002230:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	6813      	ldr	r3, [r2, #0]
 8002236:	ea36 0303 	bics.w	r3, r6, r3
 800223a:	d101      	bne.n	8002240 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 800223c:	2000      	movs	r0, #0
}
 800223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8002240:	1c6b      	adds	r3, r5, #1
 8002242:	d0f7      	beq.n	8002234 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002244:	b9c5      	cbnz	r5, 8002278 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002246:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8002248:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002250:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	f022 0220 	bic.w	r2, r2, #32
 8002258:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002260:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 800226a:	2301      	movs	r3, #1
 800226c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002270:	2300      	movs	r3, #0
 8002272:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002278:	f7fe fc92 	bl	8000ba0 <HAL_GetTick>
 800227c:	1bc0      	subs	r0, r0, r7
 800227e:	4285      	cmp	r5, r0
 8002280:	d2d7      	bcs.n	8002232 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8002282:	e7e0      	b.n	8002246 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08002284 <HAL_UART_Init>:
{
 8002284:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002286:	4604      	mov	r4, r0
 8002288:	b330      	cbz	r0, 80022d8 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 800228a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800228e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002292:	b91b      	cbnz	r3, 800229c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002294:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002298:	f000 fa78 	bl	800278c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 800229c:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 800229e:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 80022a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80022a4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80022a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80022a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022ac:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022ae:	f7ff fe97 	bl	8001fe0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022cc:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 80022ce:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80022d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
}
 80022da:	bd10      	pop	{r4, pc}

080022dc <HAL_UART_Transmit>:
{
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	460d      	mov	r5, r1
  tmp_state = huart->State;
 80022e0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 80022e4:	4604      	mov	r4, r0
  tmp_state = huart->State;
 80022e6:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80022e8:	2901      	cmp	r1, #1
{
 80022ea:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80022ec:	d001      	beq.n	80022f2 <HAL_UART_Transmit+0x16>
 80022ee:	2922      	cmp	r1, #34	; 0x22
 80022f0:	d14d      	bne.n	800238e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 80022f2:	2d00      	cmp	r5, #0
 80022f4:	d049      	beq.n	800238a <HAL_UART_Transmit+0xae>
 80022f6:	2a00      	cmp	r2, #0
 80022f8:	d047      	beq.n	800238a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80022fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d045      	beq.n	800238e <HAL_UART_Transmit+0xb2>
 8002302:	2301      	movs	r3, #1
 8002304:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800230c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8002310:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002312:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002314:	bf0c      	ite	eq
 8002316:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002318:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 800231a:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 800231c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8002320:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002322:	b98a      	cbnz	r2, 8002348 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8002324:	4632      	mov	r2, r6
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff ff7b 	bl	8002224 <UART_WaitOnFlagUntilTimeout.constprop.1>
 800232e:	b9c0      	cbnz	r0, 8002362 <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002330:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002334:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002336:	bf0c      	ite	eq
 8002338:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 800233a:	2301      	movne	r3, #1
 800233c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002340:	2300      	movs	r3, #0
 8002342:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8002346:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002348:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 800234a:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800234c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8002350:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002352:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002356:	4632      	mov	r2, r6
 8002358:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800235a:	d10d      	bne.n	8002378 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800235c:	f7ff ff62 	bl	8002224 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8002360:	b108      	cbz	r0, 8002366 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002362:	2003      	movs	r0, #3
 8002364:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002366:	882b      	ldrh	r3, [r5, #0]
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002370:	6923      	ldr	r3, [r4, #16]
 8002372:	b943      	cbnz	r3, 8002386 <HAL_UART_Transmit+0xaa>
          pData +=2;
 8002374:	3502      	adds	r5, #2
 8002376:	e7d3      	b.n	8002320 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002378:	f7ff ff54 	bl	8002224 <UART_WaitOnFlagUntilTimeout.constprop.1>
 800237c:	2800      	cmp	r0, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	782a      	ldrb	r2, [r5, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	3501      	adds	r5, #1
 8002388:	e7ca      	b.n	8002320 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 800238a:	2001      	movs	r0, #1
 800238c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800238e:	2002      	movs	r0, #2
}
 8002390:	bd70      	pop	{r4, r5, r6, pc}
	...

08002394 <send_to_uart>:
	/* USER CODE END 3 */

}

void send_to_uart(int temp, int desi) {
	uint8_t msg3[3] = { 0 };
 8002394:	2300      	movs	r3, #0
void send_to_uart(int temp, int desi) {
 8002396:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t msg3[3] = { 0 };
 8002398:	f8ad 3000 	strh.w	r3, [sp]
 800239c:	f88d 3002 	strb.w	r3, [sp, #2]
	uint8_t msg4[4] = { 0 };
 80023a0:	9301      	str	r3, [sp, #4]

	if (temp < 255 && temp >= 200) {
 80023a2:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
 80023a6:	2b36      	cmp	r3, #54	; 0x36
void send_to_uart(int temp, int desi) {
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
	if (temp < 255 && temp >= 200) {
 80023ac:	d81d      	bhi.n	80023ea <send_to_uart+0x56>
		temp = temp - 255;
 80023ae:	f1a0 04ff 	sub.w	r4, r0, #255	; 0xff
		temp = 0;
	} else if (temp == 255 && desi == 5) {
		temp = 0;
	}

	sprintf(msg3, "%d", temp);
 80023b2:	4622      	mov	r2, r4
 80023b4:	4915      	ldr	r1, [pc, #84]	; (800240c <send_to_uart+0x78>)
 80023b6:	4668      	mov	r0, sp
 80023b8:	f001 f844 	bl	8003444 <siprintf>
	if (temp < 10 && temp >= 0) {
 80023bc:	2c09      	cmp	r4, #9
		HAL_UART_Transmit(&huart2, msg3, 1, 100);
 80023be:	f04f 0364 	mov.w	r3, #100	; 0x64
	if (temp < 10 && temp >= 0) {
 80023c2:	d81b      	bhi.n	80023fc <send_to_uart+0x68>
		HAL_UART_Transmit(&huart2, msg3, 1, 100);
 80023c4:	2201      	movs	r2, #1
		HAL_UART_Transmit(&huart2, msg3, 2, 100);
	} else if (temp < 0 && temp > -10) {
		HAL_UART_Transmit(&huart2, msg3, 2, 100);
	} else	// (temp<=-10)
	{
		HAL_UART_Transmit(&huart2, msg3, 3, 100);
 80023c6:	4669      	mov	r1, sp
 80023c8:	4811      	ldr	r0, [pc, #68]	; (8002410 <send_to_uart+0x7c>)
 80023ca:	f7ff ff87 	bl	80022dc <HAL_UART_Transmit>
	}
	sprintf(msg4, ".%d\n\r", desi);
 80023ce:	462a      	mov	r2, r5
 80023d0:	4910      	ldr	r1, [pc, #64]	; (8002414 <send_to_uart+0x80>)
 80023d2:	a801      	add	r0, sp, #4
 80023d4:	f001 f836 	bl	8003444 <siprintf>
	HAL_UART_Transmit(&huart2, msg4, 4, 100);
 80023d8:	2204      	movs	r2, #4
 80023da:	2364      	movs	r3, #100	; 0x64
 80023dc:	eb0d 0102 	add.w	r1, sp, r2
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <send_to_uart+0x7c>)
 80023e2:	f7ff ff7b 	bl	80022dc <HAL_UART_Transmit>
}
 80023e6:	b003      	add	sp, #12
 80023e8:	bd30      	pop	{r4, r5, pc}
	} else if (temp == 255 && desi == 0) {
 80023ea:	28ff      	cmp	r0, #255	; 0xff
 80023ec:	d1e1      	bne.n	80023b2 <send_to_uart+0x1e>
 80023ee:	b119      	cbz	r1, 80023f8 <send_to_uart+0x64>
		temp = 0;
 80023f0:	2905      	cmp	r1, #5
 80023f2:	bf08      	it	eq
 80023f4:	2400      	moveq	r4, #0
 80023f6:	e7dc      	b.n	80023b2 <send_to_uart+0x1e>
 80023f8:	460c      	mov	r4, r1
 80023fa:	e7da      	b.n	80023b2 <send_to_uart+0x1e>
	} else if (temp >= 10) {
 80023fc:	dd01      	ble.n	8002402 <send_to_uart+0x6e>
		HAL_UART_Transmit(&huart2, msg3, 2, 100);
 80023fe:	2202      	movs	r2, #2
 8002400:	e7e1      	b.n	80023c6 <send_to_uart+0x32>
	} else if (temp < 0 && temp > -10) {
 8002402:	3409      	adds	r4, #9
 8002404:	2c08      	cmp	r4, #8
 8002406:	d9fa      	bls.n	80023fe <send_to_uart+0x6a>
		HAL_UART_Transmit(&huart2, msg3, 3, 100);
 8002408:	2203      	movs	r2, #3
 800240a:	e7dc      	b.n	80023c6 <send_to_uart+0x32>
 800240c:	08004c78 	.word	0x08004c78
 8002410:	20000264 	.word	0x20000264
 8002414:	08004c7b 	.word	0x08004c7b

08002418 <SystemClock_Config>:
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002418:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <SystemClock_Config+0x7c>)
void SystemClock_Config(void) {
 800241a:	b510      	push	{r4, lr}
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800241c:	6813      	ldr	r3, [r2, #0]
void SystemClock_Config(void) {
 800241e:	b092      	sub	sp, #72	; 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002420:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002424:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002428:	6013      	str	r3, [r2, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800242a:	2302      	movs	r3, #2
 800242c:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800242e:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002430:	2300      	movs	r3, #0
 8002432:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002434:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002438:	2401      	movs	r4, #1
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800243a:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800243c:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800243e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002442:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002444:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8002446:	9209      	str	r2, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002448:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800244a:	f7ff f91b 	bl	8001684 <HAL_RCC_OscConfig>
 800244e:	b100      	cbz	r0, 8002452 <SystemClock_Config+0x3a>
 8002450:	e7fe      	b.n	8002450 <SystemClock_Config+0x38>

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002452:	220f      	movs	r2, #15
 8002454:	2303      	movs	r3, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002456:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002458:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800245a:	9004      	str	r0, [sp, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800245c:	4621      	mov	r1, r4
 800245e:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002460:	e88d 000c 	stmia.w	sp, {r2, r3}
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002464:	f7ff fca8 	bl	8001db8 <HAL_RCC_ClockConfig>
 8002468:	4604      	mov	r4, r0
 800246a:	b100      	cbz	r0, 800246e <SystemClock_Config+0x56>
 800246c:	e7fe      	b.n	800246c <SystemClock_Config+0x54>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800246e:	f7ff fd81 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8002472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002476:	fbb0 f0f3 	udiv	r0, r0, r3
 800247a:	f7fe fbeb 	bl	8000c54 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800247e:	2004      	movs	r0, #4
 8002480:	f7fe fbfe 	bl	8000c80 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002484:	4622      	mov	r2, r4
 8002486:	4621      	mov	r1, r4
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f7fe fbae 	bl	8000bec <HAL_NVIC_SetPriority>
}
 8002490:	b012      	add	sp, #72	; 0x48
 8002492:	bd10      	pop	{r4, pc}
 8002494:	40007000 	.word	0x40007000

08002498 <main>:
int main(void) {
 8002498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_I2C_MspInit(&hi2c1);
 800249c:	4d74      	ldr	r5, [pc, #464]	; (8002670 <main+0x1d8>)
int main(void) {
 800249e:	b0a0      	sub	sp, #128	; 0x80
	HAL_Init();
 80024a0:	f7fe fb6a 	bl	8000b78 <HAL_Init>
	SystemClock_Config();
 80024a4:	f7ff ffb8 	bl	8002418 <SystemClock_Config>
	HAL_I2C_MspInit(&hi2c1);
 80024a8:	4628      	mov	r0, r5
 80024aa:	f000 f947 	bl	800273c <HAL_I2C_MspInit>
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80024ae:	4b71      	ldr	r3, [pc, #452]	; (8002674 <main+0x1dc>)
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024b0:	2120      	movs	r1, #32
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80024b2:	69da      	ldr	r2, [r3, #28]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024b4:	4870      	ldr	r0, [pc, #448]	; (8002678 <main+0x1e0>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80024b6:	f042 0204 	orr.w	r2, r2, #4
 80024ba:	61da      	str	r2, [r3, #28]
 80024bc:	69da      	ldr	r2, [r3, #28]

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80024c0:	f002 0204 	and.w	r2, r2, #4
 80024c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80024c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80024c8:	69da      	ldr	r2, [r3, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ca:	2601      	movs	r6, #1
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80024cc:	f042 0220 	orr.w	r2, r2, #32
 80024d0:	61da      	str	r2, [r3, #28]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	f002 0220 	and.w	r2, r2, #32
 80024d8:	9218      	str	r2, [sp, #96]	; 0x60
 80024da:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	61da      	str	r2, [r3, #28]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	f002 0201 	and.w	r2, r2, #1
 80024ea:	9219      	str	r2, [sp, #100]	; 0x64
 80024ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	f042 0202 	orr.w	r2, r2, #2
 80024f4:	61da      	str	r2, [r3, #28]
 80024f6:	69db      	ldr	r3, [r3, #28]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	931a      	str	r3, [sp, #104]	; 0x68
 8002500:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002502:	f7fe fca1 	bl	8000e48 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 8002506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250a:	931b      	str	r3, [sp, #108]	; 0x6c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800250c:	4b5b      	ldr	r3, [pc, #364]	; (800267c <main+0x1e4>)
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800250e:	a91b      	add	r1, sp, #108	; 0x6c
 8002510:	485b      	ldr	r0, [pc, #364]	; (8002680 <main+0x1e8>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002512:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	941d      	str	r4, [sp, #116]	; 0x74
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002516:	f7fe fbc5 	bl	8000ca4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 800251a:	2320      	movs	r3, #32
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800251c:	a91b      	add	r1, sp, #108	; 0x6c
 800251e:	4856      	ldr	r0, [pc, #344]	; (8002678 <main+0x1e0>)
	GPIO_InitStruct.Pin = LD2_Pin;
 8002520:	931b      	str	r3, [sp, #108]	; 0x6c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	941d      	str	r4, [sp, #116]	; 0x74
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	941e      	str	r4, [sp, #120]	; 0x78
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	961c      	str	r6, [sp, #112]	; 0x70
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002528:	f7fe fbbc 	bl	8000ca4 <HAL_GPIO_Init>
	huart2.Init.BaudRate = 115200;
 800252c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart2.Instance = USART2;
 8002530:	4854      	ldr	r0, [pc, #336]	; (8002684 <main+0x1ec>)
	huart2.Init.BaudRate = 115200;
 8002532:	4955      	ldr	r1, [pc, #340]	; (8002688 <main+0x1f0>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002534:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 8002536:	e880 000a 	stmia.w	r0, {r1, r3}
	huart2.Init.Mode = UART_MODE_TX_RX;
 800253a:	230c      	movs	r3, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 800253c:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800253e:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002540:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002542:	61c4      	str	r4, [r0, #28]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002544:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002546:	f7ff fe9d 	bl	8002284 <HAL_UART_Init>
 800254a:	462c      	mov	r4, r5
 800254c:	b100      	cbz	r0, 8002550 <main+0xb8>
 800254e:	e7fe      	b.n	800254e <main+0xb6>
	hi2c1.Init.ClockSpeed = 10000;
 8002550:	f242 7310 	movw	r3, #10000	; 0x2710
 8002554:	4a4d      	ldr	r2, [pc, #308]	; (800268c <main+0x1f4>)
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002556:	60a8      	str	r0, [r5, #8]
	hi2c1.Init.ClockSpeed = 10000;
 8002558:	e885 000c 	stmia.w	r5, {r2, r3}
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800255c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 8002560:	60e8      	str	r0, [r5, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002562:	6168      	str	r0, [r5, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002564:	61a8      	str	r0, [r5, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002566:	61e8      	str	r0, [r5, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002568:	6228      	str	r0, [r5, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800256a:	4628      	mov	r0, r5
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800256c:	612b      	str	r3, [r5, #16]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800256e:	f7fe fd6d 	bl	800104c <HAL_I2C_Init>
 8002572:	4605      	mov	r5, r0
 8002574:	b100      	cbz	r0, 8002578 <main+0xe0>
 8002576:	e7fe      	b.n	8002576 <main+0xde>
	LCD_Init(hi2c1);
 8002578:	2244      	movs	r2, #68	; 0x44
		DisplayOnLCD(received_data[0]+received_data[1]*0.1, hi2c1, str1, str2);
 800257a:	f20f 09ec 	addw	r9, pc, #236	; 0xec
 800257e:	e9d9 8900 	ldrd	r8, r9, [r9]
	LCD_Init(hi2c1);
 8002582:	f104 0110 	add.w	r1, r4, #16
 8002586:	4668      	mov	r0, sp
 8002588:	f000 fae8 	bl	8002b5c <memcpy>
 800258c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002590:	f000 f99a 	bl	80028c8 <LCD_Init>
	LCD_ClearAll(hi2c1);
 8002594:	2244      	movs	r2, #68	; 0x44
 8002596:	f104 0110 	add.w	r1, r4, #16
 800259a:	4668      	mov	r0, sp
 800259c:	f000 fade 	bl	8002b5c <memcpy>
 80025a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025a4:	f000 f9fc 	bl	80029a0 <LCD_ClearAll>
	uint8_t msg[1] = { start_conversion };
 80025a8:	23ee      	movs	r3, #238	; 0xee
 80025aa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	uint8_t msg2[1] = { read_last_result };
 80025ae:	23aa      	movs	r3, #170	; 0xaa
 80025b0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	HAL_I2C_Master_Transmit(&hi2c1, address_for_write, msg, 1, 100); //start conversion
 80025b4:	2364      	movs	r3, #100	; 0x64
 80025b6:	aa15      	add	r2, sp, #84	; 0x54
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2190      	movs	r1, #144	; 0x90
 80025bc:	4633      	mov	r3, r6
 80025be:	4620      	mov	r0, r4
	uint8_t received_data[2] = { 0 };
 80025c0:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
	HAL_I2C_Master_Transmit(&hi2c1, address_for_write, msg, 1, 100); //start conversion
 80025c4:	f7fe fdd0 	bl	8001168 <HAL_I2C_Master_Transmit>
	HAL_Delay(2000);  // wait for 2 sec
 80025c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025cc:	f7fe faee 	bl	8000bac <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, address_for_write, msg2, 1, 100); //read last result command
 80025d0:	4625      	mov	r5, r4
		DisplayOnLCD(received_data[0]+received_data[1]*0.1, hi2c1, str1, str2);
 80025d2:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002698 <main+0x200>
		HAL_I2C_Master_Transmit(&hi2c1, address_for_write, msg2, 1, 100); //read last result command
 80025d6:	2664      	movs	r6, #100	; 0x64
 80025d8:	aa16      	add	r2, sp, #88	; 0x58
 80025da:	9600      	str	r6, [sp, #0]
 80025dc:	2301      	movs	r3, #1
 80025de:	2190      	movs	r1, #144	; 0x90
 80025e0:	4628      	mov	r0, r5
 80025e2:	f7fe fdc1 	bl	8001168 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, address_for_read, received_data, 2, 100);//read last result and decimal
 80025e6:	aa1b      	add	r2, sp, #108	; 0x6c
 80025e8:	9600      	str	r6, [sp, #0]
 80025ea:	2302      	movs	r3, #2
 80025ec:	2191      	movs	r1, #145	; 0x91
 80025ee:	4628      	mov	r0, r5
 80025f0:	f7fe fe90 	bl	8001314 <HAL_I2C_Master_Receive>
		if (received_data[1] == 128) {
 80025f4:	f89d 306d 	ldrb.w	r3, [sp, #109]	; 0x6d
		send_to_uart(received_data[0], received_data[1]);
 80025f8:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
		if (received_data[1] == 128) {
 80025fc:	2b80      	cmp	r3, #128	; 0x80
			received_data[1] = 5;
 80025fe:	bf0c      	ite	eq
 8002600:	2305      	moveq	r3, #5
			received_data[1] = 0;
 8002602:	2300      	movne	r3, #0
 8002604:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
		send_to_uart(received_data[0], received_data[1]);
 8002608:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 800260c:	f7ff fec2 	bl	8002394 <send_to_uart>
		HAL_Delay(1000);
 8002610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002614:	f7fe faca 	bl	8000bac <HAL_Delay>
		DisplayOnLCD(received_data[0]+received_data[1]*0.1, hi2c1, str1, str2);
 8002618:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
 800261c:	f7fd ff0a 	bl	8000434 <__aeabi_i2d>
 8002620:	4642      	mov	r2, r8
 8002622:	464b      	mov	r3, r9
 8002624:	f7fd ff6c 	bl	8000500 <__aeabi_dmul>
 8002628:	4606      	mov	r6, r0
 800262a:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 800262e:	460f      	mov	r7, r1
 8002630:	f7fd ff00 	bl	8000434 <__aeabi_i2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4630      	mov	r0, r6
 800263a:	4639      	mov	r1, r7
 800263c:	f7fd fdae 	bl	800019c <__adddf3>
 8002640:	f7fe fa36 	bl	8000ab0 <__aeabi_d2f>
 8002644:	4606      	mov	r6, r0
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <main+0x1f8>)
 8002648:	2248      	movs	r2, #72	; 0x48
 800264a:	4912      	ldr	r1, [pc, #72]	; (8002694 <main+0x1fc>)
 800264c:	4668      	mov	r0, sp
 800264e:	9312      	str	r3, [sp, #72]	; 0x48
 8002650:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8002654:	f000 fa82 	bl	8002b5c <memcpy>
 8002658:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800265c:	4630      	mov	r0, r6
 800265e:	f000 f9dd 	bl	8002a1c <DisplayOnLCD>
		HAL_I2C_Master_Transmit(&hi2c1, address_for_write, msg2, 1, 100); //read last result command
 8002662:	e7b8      	b.n	80025d6 <main+0x13e>
 8002664:	f3af 8000 	nop.w
 8002668:	9999999a 	.word	0x9999999a
 800266c:	3fb99999 	.word	0x3fb99999
 8002670:	20000210 	.word	0x20000210
 8002674:	40023800 	.word	0x40023800
 8002678:	40020000 	.word	0x40020000
 800267c:	10110000 	.word	0x10110000
 8002680:	40020800 	.word	0x40020800
 8002684:	20000264 	.word	0x20000264
 8002688:	40004400 	.word	0x40004400
 800268c:	40005400 	.word	0x40005400
 8002690:	20000000 	.word	0x20000000
 8002694:	2000021c 	.word	0x2000021c
 8002698:	200002a4 	.word	0x200002a4

0800269c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026a0:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 80026a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
 80026aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026b0:	9201      	str	r2, [sp, #4]
 80026b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	621a      	str	r2, [r3, #32]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	f002 0201 	and.w	r2, r2, #1
 80026c2:	9202      	str	r2, [sp, #8]
 80026c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	9303      	str	r3, [sp, #12]
 80026d6:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026d8:	f7fe fa76 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	f06f 000b 	mvn.w	r0, #11
 80026e2:	4611      	mov	r1, r2
 80026e4:	f7fe fa82 	bl	8000bec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	f06f 000a 	mvn.w	r0, #10
 80026ee:	4611      	mov	r1, r2
 80026f0:	f7fe fa7c 	bl	8000bec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	f06f 0009 	mvn.w	r0, #9
 80026fa:	4611      	mov	r1, r2
 80026fc:	f7fe fa76 	bl	8000bec <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	f06f 0004 	mvn.w	r0, #4
 8002706:	4611      	mov	r1, r2
 8002708:	f7fe fa70 	bl	8000bec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	f06f 0003 	mvn.w	r0, #3
 8002712:	4611      	mov	r1, r2
 8002714:	f7fe fa6a 	bl	8000bec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	f06f 0001 	mvn.w	r0, #1
 800271e:	4611      	mov	r1, r2
 8002720:	f7fe fa64 	bl	8000bec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	f04f 30ff 	mov.w	r0, #4294967295
 800272a:	4611      	mov	r1, r2
 800272c:	f7fe fa5e 	bl	8000bec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002730:	b005      	add	sp, #20
 8002732:	f85d fb04 	ldr.w	pc, [sp], #4
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800273c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800273e:	6802      	ldr	r2, [r0, #0]
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_I2C_MspInit+0x44>)
 8002742:	429a      	cmp	r2, r3
 8002744:	d119      	bne.n	800277a <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002746:	f44f 7340 	mov.w	r3, #768	; 0x300
 800274a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800274c:	2312      	movs	r3, #18
 800274e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	2303      	movs	r3, #3
 8002756:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002758:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	480a      	ldr	r0, [pc, #40]	; (8002784 <HAL_I2C_MspInit+0x48>)
 800275c:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002760:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	f7fe fa9f 	bl	8000ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_I2C_MspInit+0x4c>)
 8002768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800276a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800277a:	b007      	add	sp, #28
 800277c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002780:	40005400 	.word	0x40005400
 8002784:	40020400 	.word	0x40020400
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800278c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800278e:	6802      	ldr	r2, [r0, #0]
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_UART_MspInit+0x44>)
 8002792:	429a      	cmp	r2, r3
 8002794:	d118      	bne.n	80027c8 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002796:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800279a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800279e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	480b      	ldr	r0, [pc, #44]	; (80027d4 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027b0:	230c      	movs	r3, #12
 80027b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b8:	2301      	movs	r3, #1
 80027ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027c0:	2307      	movs	r3, #7
 80027c2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c4:	f7fe fa6e 	bl	8000ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027c8:	b007      	add	sp, #28
 80027ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ce:	bf00      	nop
 80027d0:	40004400 	.word	0x40004400
 80027d4:	40020000 	.word	0x40020000

080027d8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80027d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027da:	f7fe f9d9 	bl	8000b90 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80027e2:	f7fe ba5a 	b.w	8000c9a <HAL_SYSTICK_IRQHandler>
	...

080027e8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <SystemInit+0x3c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80027f2:	6899      	ldr	r1, [r3, #8]
 80027f4:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <SystemInit+0x40>)
 80027f6:	400a      	ands	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002800:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8002804:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800280c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8002814:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800281a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800281e:	4b03      	ldr	r3, [pc, #12]	; (800282c <SystemInit+0x44>)
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	4770      	bx	lr
 8002824:	40023800 	.word	0x40023800
 8002828:	88ffc00c 	.word	0x88ffc00c
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <LCD_SendChar>:
	LCD_SendCommand(0x0C, i2c_handler);	// Display ON, cursor off
	LCD_SendCommand(0x80, i2c_handler);	// Force the cursor to position (0,0)
}

void LCD_SendChar(uint8_t c, I2C_HandleTypeDef i2c_handler)
{
 8002830:	b084      	sub	sp, #16
 8002832:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002834:	ac07      	add	r4, sp, #28
 8002836:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	uint8_t nibble_r, nibble_l;
	uint8_t data[4];
	nibble_l = c & 0xf0;
 800283a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
	nibble_r = (c << 4) & 0xf0;
 800283e:	0103      	lsls	r3, r0, #4
	data[0] = nibble_l | 0x0D;
 8002840:	f042 010d 	orr.w	r1, r2, #13
	nibble_r = (c << 4) & 0xf0;
 8002844:	b2db      	uxtb	r3, r3
	data[1] = nibble_l | 0x09;
 8002846:	f042 0209 	orr.w	r2, r2, #9
 800284a:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = nibble_r | 0x0D;
 800284e:	f043 020d 	orr.w	r2, r3, #13
	data[3] = nibble_r | 0x09;
 8002852:	f043 0309 	orr.w	r3, r3, #9
 8002856:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_I2C_Master_Transmit(&i2c_handler, LCD_ADDR, (uint8_t *)data, 4, 100);
 800285a:	2364      	movs	r3, #100	; 0x64
	data[0] = nibble_l | 0x0D;
 800285c:	f88d 100c 	strb.w	r1, [sp, #12]
	data[2] = nibble_r | 0x0D;
 8002860:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_I2C_Master_Transmit(&i2c_handler, LCD_ADDR, (uint8_t *)data, 4, 100);
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	aa03      	add	r2, sp, #12
 8002868:	2304      	movs	r3, #4
 800286a:	214e      	movs	r1, #78	; 0x4e
 800286c:	4620      	mov	r0, r4
 800286e:	f7fe fc7b 	bl	8001168 <HAL_I2C_Master_Transmit>
}
 8002872:	b004      	add	sp, #16
 8002874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002878:	b004      	add	sp, #16
 800287a:	4770      	bx	lr

0800287c <LCD_SendCommand>:
void LCD_SendCommand(uint8_t cmd, I2C_HandleTypeDef i2c_handler)
{
 800287c:	b084      	sub	sp, #16
 800287e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002880:	ac07      	add	r4, sp, #28
 8002882:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	uint8_t nibble_r, nibble_l;
	uint8_t data[4];
	nibble_l = cmd & 0xf0;
 8002886:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
	nibble_r = (cmd << 4) & 0xf0;
 800288a:	0103      	lsls	r3, r0, #4
	data[0] = nibble_l | 0x0C;
 800288c:	f042 010c 	orr.w	r1, r2, #12
	nibble_r = (cmd << 4) & 0xf0;
 8002890:	b2db      	uxtb	r3, r3
	data[1] = nibble_l | 0x08;
 8002892:	f042 0208 	orr.w	r2, r2, #8
 8002896:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = nibble_r | 0x0C;
 800289a:	f043 020c 	orr.w	r2, r3, #12
	data[3] = nibble_r | 0x08;
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_I2C_Master_Transmit(&i2c_handler, LCD_ADDR, (uint8_t *)data, 4, 100);
 80028a6:	2364      	movs	r3, #100	; 0x64
	data[0] = nibble_l | 0x0C;
 80028a8:	f88d 100c 	strb.w	r1, [sp, #12]
	data[2] = nibble_r | 0x0C;
 80028ac:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_I2C_Master_Transmit(&i2c_handler, LCD_ADDR, (uint8_t *)data, 4, 100);
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	aa03      	add	r2, sp, #12
 80028b4:	2304      	movs	r3, #4
 80028b6:	214e      	movs	r1, #78	; 0x4e
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7fe fc55 	bl	8001168 <HAL_I2C_Master_Transmit>
}
 80028be:	b004      	add	sp, #16
 80028c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028c4:	b004      	add	sp, #16
 80028c6:	4770      	bx	lr

080028c8 <LCD_Init>:
{
 80028c8:	b084      	sub	sp, #16
 80028ca:	b510      	push	{r4, lr}
 80028cc:	b092      	sub	sp, #72	; 0x48
 80028ce:	ac14      	add	r4, sp, #80	; 0x50
 80028d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCD_SendCommand(0x02, i2c_handler);	// set the LCD in 4-bit mode (D4-D7)
 80028d4:	2448      	movs	r4, #72	; 0x48
 80028d6:	a917      	add	r1, sp, #92	; 0x5c
 80028d8:	4622      	mov	r2, r4
 80028da:	4668      	mov	r0, sp
 80028dc:	f000 f93e 	bl	8002b5c <memcpy>
 80028e0:	ab14      	add	r3, sp, #80	; 0x50
 80028e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e4:	2002      	movs	r0, #2
 80028e6:	f7ff ffc9 	bl	800287c <LCD_SendCommand>
	LCD_SendCommand(0x28, i2c_handler);	// 2 lines, 5x8 matrix, 4-bit mode
 80028ea:	4622      	mov	r2, r4
 80028ec:	a917      	add	r1, sp, #92	; 0x5c
 80028ee:	4668      	mov	r0, sp
 80028f0:	f000 f934 	bl	8002b5c <memcpy>
 80028f4:	ab14      	add	r3, sp, #80	; 0x50
 80028f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f8:	2028      	movs	r0, #40	; 0x28
 80028fa:	f7ff ffbf 	bl	800287c <LCD_SendCommand>
	LCD_SendCommand(0x0C, i2c_handler);	// Display ON, cursor off
 80028fe:	4622      	mov	r2, r4
 8002900:	a917      	add	r1, sp, #92	; 0x5c
 8002902:	4668      	mov	r0, sp
 8002904:	f000 f92a 	bl	8002b5c <memcpy>
 8002908:	ab14      	add	r3, sp, #80	; 0x50
 800290a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800290c:	200c      	movs	r0, #12
 800290e:	f7ff ffb5 	bl	800287c <LCD_SendCommand>
	LCD_SendCommand(0x80, i2c_handler);	// Force the cursor to position (0,0)
 8002912:	4622      	mov	r2, r4
 8002914:	a917      	add	r1, sp, #92	; 0x5c
 8002916:	4668      	mov	r0, sp
 8002918:	f000 f920 	bl	8002b5c <memcpy>
 800291c:	ab14      	add	r3, sp, #80	; 0x50
 800291e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002920:	2080      	movs	r0, #128	; 0x80
 8002922:	f7ff ffab 	bl	800287c <LCD_SendCommand>
}
 8002926:	b012      	add	sp, #72	; 0x48
 8002928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292c:	b004      	add	sp, #16
 800292e:	4770      	bx	lr

08002930 <LCD_SendString>:

void LCD_SendString(uint8_t *str, I2C_HandleTypeDef i2c_handler)
{
 8002930:	b084      	sub	sp, #16
 8002932:	b570      	push	{r4, r5, r6, lr}
 8002934:	b092      	sub	sp, #72	; 0x48
 8002936:	ac17      	add	r4, sp, #92	; 0x5c
 8002938:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800293c:	1e46      	subs	r6, r0, #1
	while (*str)
 800293e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8002942:	b925      	cbnz	r5, 800294e <LCD_SendString+0x1e>
		LCD_SendChar(*str++, i2c_handler);
}
 8002944:	b012      	add	sp, #72	; 0x48
 8002946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800294a:	b004      	add	sp, #16
 800294c:	4770      	bx	lr
		LCD_SendChar(*str++, i2c_handler);
 800294e:	a91a      	add	r1, sp, #104	; 0x68
 8002950:	2248      	movs	r2, #72	; 0x48
 8002952:	4668      	mov	r0, sp
 8002954:	f000 f902 	bl	8002b5c <memcpy>
 8002958:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800295c:	4628      	mov	r0, r5
 800295e:	f7ff ff67 	bl	8002830 <LCD_SendChar>
 8002962:	e7ec      	b.n	800293e <LCD_SendString+0xe>

08002964 <LCD_GoToXY>:
	LCD_GoToXY(0, LCD_LINE_2, i2c_handler);
	LCD_SendString(data_line2, i2c_handler);
}

void LCD_GoToXY(uint8_t x, uint8_t y, I2C_HandleTypeDef i2c_handler)
{
 8002964:	b082      	sub	sp, #8
 8002966:	b510      	push	{r4, lr}
 8002968:	b092      	sub	sp, #72	; 0x48
 800296a:	ac14      	add	r4, sp, #80	; 0x50
 800296c:	e884 000c 	stmia.w	r4, {r2, r3}
	uint8_t LCD_DDRAM_ADDR = 0x80;

	if (y == 0)
 8002970:	b981      	cbnz	r1, 8002994 <LCD_GoToXY+0x30>
		LCD_SendCommand(LCD_DDRAM_ADDR | (LCD_LINE_1 + x), i2c_handler);
 8002972:	f040 0480 	orr.w	r4, r0, #128	; 0x80
	else
		LCD_SendCommand(LCD_DDRAM_ADDR | (LCD_LINE_2 + x), i2c_handler);
 8002976:	a917      	add	r1, sp, #92	; 0x5c
 8002978:	2248      	movs	r2, #72	; 0x48
 800297a:	4668      	mov	r0, sp
 800297c:	f000 f8ee 	bl	8002b5c <memcpy>
 8002980:	ab14      	add	r3, sp, #80	; 0x50
 8002982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff ff79 	bl	800287c <LCD_SendCommand>
}
 800298a:	b012      	add	sp, #72	; 0x48
 800298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002990:	b002      	add	sp, #8
 8002992:	4770      	bx	lr
		LCD_SendCommand(LCD_DDRAM_ADDR | (LCD_LINE_2 + x), i2c_handler);
 8002994:	f100 0440 	add.w	r4, r0, #64	; 0x40
 8002998:	f064 047f 	orn	r4, r4, #127	; 0x7f
 800299c:	b2e4      	uxtb	r4, r4
 800299e:	e7ea      	b.n	8002976 <LCD_GoToXY+0x12>

080029a0 <LCD_ClearAll>:

void LCD_ClearAll(I2C_HandleTypeDef i2c_handler)
{
 80029a0:	b084      	sub	sp, #16
 80029a2:	b500      	push	{lr}
 80029a4:	b093      	sub	sp, #76	; 0x4c
 80029a6:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 80029aa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	LCD_SendCommand(0x01, i2c_handler); // 0x01 is the command to clear the LCD display
 80029ae:	a917      	add	r1, sp, #92	; 0x5c
 80029b0:	2248      	movs	r2, #72	; 0x48
 80029b2:	4668      	mov	r0, sp
 80029b4:	f000 f8d2 	bl	8002b5c <memcpy>
 80029b8:	ab14      	add	r3, sp, #80	; 0x50
 80029ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029bc:	2001      	movs	r0, #1
 80029be:	f7ff ff5d 	bl	800287c <LCD_SendCommand>
}
 80029c2:	b013      	add	sp, #76	; 0x4c
 80029c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029c8:	b004      	add	sp, #16
 80029ca:	4770      	bx	lr

080029cc <LCD_ClearFromPos>:
void LCD_ClearFromPos(uint8_t x, uint8_t y, I2C_HandleTypeDef i2c_handler)
{
 80029cc:	b082      	sub	sp, #8
 80029ce:	b530      	push	{r4, r5, lr}
 80029d0:	b09d      	sub	sp, #116	; 0x74
 80029d2:	460d      	mov	r5, r1
 80029d4:	a920      	add	r1, sp, #128	; 0x80
 80029d6:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t str[32] = "";
 80029da:	2100      	movs	r1, #0
{
 80029dc:	4604      	mov	r4, r0
	uint8_t str[32] = "";
 80029de:	221c      	movs	r2, #28
 80029e0:	a815      	add	r0, sp, #84	; 0x54
 80029e2:	9114      	str	r1, [sp, #80]	; 0x50
 80029e4:	f000 f8c5 	bl	8002b72 <memset>
	LCD_GoToXY(x, y, i2c_handler);
 80029e8:	a922      	add	r1, sp, #136	; 0x88
 80029ea:	224c      	movs	r2, #76	; 0x4c
 80029ec:	4668      	mov	r0, sp
 80029ee:	f000 f8b5 	bl	8002b5c <memcpy>
 80029f2:	ab20      	add	r3, sp, #128	; 0x80
 80029f4:	cb0c      	ldmia	r3, {r2, r3}
 80029f6:	4629      	mov	r1, r5
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7ff ffb3 	bl	8002964 <LCD_GoToXY>
	LCD_SendString(str, i2c_handler);
 80029fe:	a923      	add	r1, sp, #140	; 0x8c
 8002a00:	2248      	movs	r2, #72	; 0x48
 8002a02:	4668      	mov	r0, sp
 8002a04:	f000 f8aa 	bl	8002b5c <memcpy>
 8002a08:	ab20      	add	r3, sp, #128	; 0x80
 8002a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a0c:	a814      	add	r0, sp, #80	; 0x50
 8002a0e:	f7ff ff8f 	bl	8002930 <LCD_SendString>
}
 8002a12:	b01d      	add	sp, #116	; 0x74
 8002a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a18:	b002      	add	sp, #8
 8002a1a:	4770      	bx	lr

08002a1c <DisplayOnLCD>:
{
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a20:	b0bf      	sub	sp, #252	; 0xfc
 8002a22:	ac45      	add	r4, sp, #276	; 0x114
 8002a24:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	sprintf((char *)data_line2, "%.1f C", temp);
 8002a28:	f7fd fd16 	bl	8000458 <__aeabi_f2d>
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4924      	ldr	r1, [pc, #144]	; (8002ac4 <DisplayOnLCD+0xa8>)
 8002a32:	985b      	ldr	r0, [sp, #364]	; 0x16c
 8002a34:	f000 fd06 	bl	8003444 <siprintf>
	LCD_ClearFromPos(0,0, i2c_handler);
 8002a38:	a947      	add	r1, sp, #284	; 0x11c
 8002a3a:	224c      	movs	r2, #76	; 0x4c
 8002a3c:	4668      	mov	r0, sp
 8002a3e:	f000 f88d 	bl	8002b5c <memcpy>
 8002a42:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a46:	2100      	movs	r1, #0
 8002a48:	2754      	movs	r7, #84	; 0x54
		LCD_SendCommand(LCD_DDRAM_ADDR | (LCD_LINE_1 + x), i2c_handler);
 8002a4a:	2548      	movs	r5, #72	; 0x48
 8002a4c:	ae29      	add	r6, sp, #164	; 0xa4
	LCD_ClearFromPos(0,0, i2c_handler);
 8002a4e:	4608      	mov	r0, r1
 8002a50:	f7ff ffbc 	bl	80029cc <LCD_ClearFromPos>
 8002a54:	463a      	mov	r2, r7
 8002a56:	4621      	mov	r1, r4
 8002a58:	4630      	mov	r0, r6
 8002a5a:	f000 f87f 	bl	8002b5c <memcpy>
		LCD_SendCommand(LCD_DDRAM_ADDR | (LCD_LINE_1 + x), i2c_handler);
 8002a5e:	462a      	mov	r2, r5
 8002a60:	a92c      	add	r1, sp, #176	; 0xb0
 8002a62:	4668      	mov	r0, sp
 8002a64:	f000 f87a 	bl	8002b5c <memcpy>
 8002a68:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002a6c:	2080      	movs	r0, #128	; 0x80
 8002a6e:	f7ff ff05 	bl	800287c <LCD_SendCommand>
	LCD_SendString(data_line1, i2c_handler);
 8002a72:	462a      	mov	r2, r5
 8002a74:	a948      	add	r1, sp, #288	; 0x120
 8002a76:	4668      	mov	r0, sp
 8002a78:	f000 f870 	bl	8002b5c <memcpy>
 8002a7c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002a80:	985a      	ldr	r0, [sp, #360]	; 0x168
 8002a82:	ae14      	add	r6, sp, #80	; 0x50
 8002a84:	f7ff ff54 	bl	8002930 <LCD_SendString>
 8002a88:	463a      	mov	r2, r7
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	f000 f865 	bl	8002b5c <memcpy>
		LCD_SendCommand(LCD_DDRAM_ADDR | (LCD_LINE_2 + x), i2c_handler);
 8002a92:	462a      	mov	r2, r5
 8002a94:	a917      	add	r1, sp, #92	; 0x5c
 8002a96:	4668      	mov	r0, sp
 8002a98:	f000 f860 	bl	8002b5c <memcpy>
 8002a9c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002aa0:	20c0      	movs	r0, #192	; 0xc0
 8002aa2:	f7ff feeb 	bl	800287c <LCD_SendCommand>
	LCD_SendString(data_line2, i2c_handler);
 8002aa6:	462a      	mov	r2, r5
 8002aa8:	a948      	add	r1, sp, #288	; 0x120
 8002aaa:	4668      	mov	r0, sp
 8002aac:	f000 f856 	bl	8002b5c <memcpy>
 8002ab0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002ab4:	985b      	ldr	r0, [sp, #364]	; 0x16c
 8002ab6:	f7ff ff3b 	bl	8002930 <LCD_SendString>
}
 8002aba:	b03f      	add	sp, #252	; 0xfc
 8002abc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002ac0:	b004      	add	sp, #16
 8002ac2:	4770      	bx	lr
 8002ac4:	08004ca2 	.word	0x08004ca2

08002ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ac8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002aca:	e003      	b.n	8002ad4 <LoopCopyDataInit>

08002acc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ace:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ad0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ad2:	3104      	adds	r1, #4

08002ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ad4:	480a      	ldr	r0, [pc, #40]	; (8002b00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ad8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ada:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002adc:	d3f6      	bcc.n	8002acc <CopyDataInit>
  ldr r2, =_sbss
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ae0:	e002      	b.n	8002ae8 <LoopFillZerobss>

08002ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ae4:	f842 3b04 	str.w	r3, [r2], #4

08002ae8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002aea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002aec:	d3f9      	bcc.n	8002ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002aee:	f7ff fe7b 	bl	80027e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af2:	f000 f80f 	bl	8002b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002af6:	f7ff fccf 	bl	8002498 <main>
  bx lr
 8002afa:	4770      	bx	lr
  ldr r3, =_sidata
 8002afc:	08004f10 	.word	0x08004f10
  ldr r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b04:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8002b08:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8002b0c:	200002b8 	.word	0x200002b8

08002b10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b10:	e7fe      	b.n	8002b10 <ADC1_IRQHandler>
	...

08002b14 <__libc_init_array>:
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	2500      	movs	r5, #0
 8002b18:	4e0c      	ldr	r6, [pc, #48]	; (8002b4c <__libc_init_array+0x38>)
 8002b1a:	4c0d      	ldr	r4, [pc, #52]	; (8002b50 <__libc_init_array+0x3c>)
 8002b1c:	1ba4      	subs	r4, r4, r6
 8002b1e:	10a4      	asrs	r4, r4, #2
 8002b20:	42a5      	cmp	r5, r4
 8002b22:	d109      	bne.n	8002b38 <__libc_init_array+0x24>
 8002b24:	f002 f89a 	bl	8004c5c <_init>
 8002b28:	2500      	movs	r5, #0
 8002b2a:	4e0a      	ldr	r6, [pc, #40]	; (8002b54 <__libc_init_array+0x40>)
 8002b2c:	4c0a      	ldr	r4, [pc, #40]	; (8002b58 <__libc_init_array+0x44>)
 8002b2e:	1ba4      	subs	r4, r4, r6
 8002b30:	10a4      	asrs	r4, r4, #2
 8002b32:	42a5      	cmp	r5, r4
 8002b34:	d105      	bne.n	8002b42 <__libc_init_array+0x2e>
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b3c:	4798      	blx	r3
 8002b3e:	3501      	adds	r5, #1
 8002b40:	e7ee      	b.n	8002b20 <__libc_init_array+0xc>
 8002b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b46:	4798      	blx	r3
 8002b48:	3501      	adds	r5, #1
 8002b4a:	e7f2      	b.n	8002b32 <__libc_init_array+0x1e>
 8002b4c:	08004f08 	.word	0x08004f08
 8002b50:	08004f08 	.word	0x08004f08
 8002b54:	08004f08 	.word	0x08004f08
 8002b58:	08004f0c 	.word	0x08004f0c

08002b5c <memcpy>:
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	1e43      	subs	r3, r0, #1
 8002b60:	440a      	add	r2, r1
 8002b62:	4291      	cmp	r1, r2
 8002b64:	d100      	bne.n	8002b68 <memcpy+0xc>
 8002b66:	bd10      	pop	{r4, pc}
 8002b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b70:	e7f7      	b.n	8002b62 <memcpy+0x6>

08002b72 <memset>:
 8002b72:	4603      	mov	r3, r0
 8002b74:	4402      	add	r2, r0
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d100      	bne.n	8002b7c <memset+0xa>
 8002b7a:	4770      	bx	lr
 8002b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8002b80:	e7f9      	b.n	8002b76 <memset+0x4>

08002b82 <__cvt>:
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b88:	461e      	mov	r6, r3
 8002b8a:	bfbb      	ittet	lt
 8002b8c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002b90:	461e      	movlt	r6, r3
 8002b92:	2300      	movge	r3, #0
 8002b94:	232d      	movlt	r3, #45	; 0x2d
 8002b96:	b088      	sub	sp, #32
 8002b98:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002b9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002b9c:	f027 0720 	bic.w	r7, r7, #32
 8002ba0:	2f46      	cmp	r7, #70	; 0x46
 8002ba2:	4614      	mov	r4, r2
 8002ba4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002ba6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002baa:	700b      	strb	r3, [r1, #0]
 8002bac:	d004      	beq.n	8002bb8 <__cvt+0x36>
 8002bae:	2f45      	cmp	r7, #69	; 0x45
 8002bb0:	d100      	bne.n	8002bb4 <__cvt+0x32>
 8002bb2:	3501      	adds	r5, #1
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e000      	b.n	8002bba <__cvt+0x38>
 8002bb8:	2303      	movs	r3, #3
 8002bba:	aa07      	add	r2, sp, #28
 8002bbc:	9204      	str	r2, [sp, #16]
 8002bbe:	aa06      	add	r2, sp, #24
 8002bc0:	9203      	str	r2, [sp, #12]
 8002bc2:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	4633      	mov	r3, r6
 8002bca:	f000 fced 	bl	80035a8 <_dtoa_r>
 8002bce:	2f47      	cmp	r7, #71	; 0x47
 8002bd0:	4680      	mov	r8, r0
 8002bd2:	d102      	bne.n	8002bda <__cvt+0x58>
 8002bd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002bd6:	07db      	lsls	r3, r3, #31
 8002bd8:	d526      	bpl.n	8002c28 <__cvt+0xa6>
 8002bda:	2f46      	cmp	r7, #70	; 0x46
 8002bdc:	eb08 0905 	add.w	r9, r8, r5
 8002be0:	d111      	bne.n	8002c06 <__cvt+0x84>
 8002be2:	f898 3000 	ldrb.w	r3, [r8]
 8002be6:	2b30      	cmp	r3, #48	; 0x30
 8002be8:	d10a      	bne.n	8002c00 <__cvt+0x7e>
 8002bea:	2200      	movs	r2, #0
 8002bec:	2300      	movs	r3, #0
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4631      	mov	r1, r6
 8002bf2:	f7fd feed 	bl	80009d0 <__aeabi_dcmpeq>
 8002bf6:	b918      	cbnz	r0, 8002c00 <__cvt+0x7e>
 8002bf8:	f1c5 0501 	rsb	r5, r5, #1
 8002bfc:	f8ca 5000 	str.w	r5, [sl]
 8002c00:	f8da 3000 	ldr.w	r3, [sl]
 8002c04:	4499      	add	r9, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	4631      	mov	r1, r6
 8002c0e:	f7fd fedf 	bl	80009d0 <__aeabi_dcmpeq>
 8002c12:	b938      	cbnz	r0, 8002c24 <__cvt+0xa2>
 8002c14:	2230      	movs	r2, #48	; 0x30
 8002c16:	9b07      	ldr	r3, [sp, #28]
 8002c18:	4599      	cmp	r9, r3
 8002c1a:	d905      	bls.n	8002c28 <__cvt+0xa6>
 8002c1c:	1c59      	adds	r1, r3, #1
 8002c1e:	9107      	str	r1, [sp, #28]
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e7f8      	b.n	8002c16 <__cvt+0x94>
 8002c24:	f8cd 901c 	str.w	r9, [sp, #28]
 8002c28:	4640      	mov	r0, r8
 8002c2a:	9b07      	ldr	r3, [sp, #28]
 8002c2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002c2e:	eba3 0308 	sub.w	r3, r3, r8
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	b008      	add	sp, #32
 8002c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002c3a <__exponent>:
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	f803 2b02 	strb.w	r2, [r3], #2
 8002c44:	bfb6      	itet	lt
 8002c46:	222d      	movlt	r2, #45	; 0x2d
 8002c48:	222b      	movge	r2, #43	; 0x2b
 8002c4a:	4249      	neglt	r1, r1
 8002c4c:	2909      	cmp	r1, #9
 8002c4e:	7042      	strb	r2, [r0, #1]
 8002c50:	dd21      	ble.n	8002c96 <__exponent+0x5c>
 8002c52:	f10d 0207 	add.w	r2, sp, #7
 8002c56:	4617      	mov	r7, r2
 8002c58:	260a      	movs	r6, #10
 8002c5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8002c5e:	fb06 1115 	mls	r1, r6, r5, r1
 8002c62:	2d09      	cmp	r5, #9
 8002c64:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002c68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002c6c:	f102 34ff 	add.w	r4, r2, #4294967295
 8002c70:	4629      	mov	r1, r5
 8002c72:	dc09      	bgt.n	8002c88 <__exponent+0x4e>
 8002c74:	3130      	adds	r1, #48	; 0x30
 8002c76:	3a02      	subs	r2, #2
 8002c78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c7c:	42ba      	cmp	r2, r7
 8002c7e:	461c      	mov	r4, r3
 8002c80:	d304      	bcc.n	8002c8c <__exponent+0x52>
 8002c82:	1a20      	subs	r0, r4, r0
 8002c84:	b003      	add	sp, #12
 8002c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c88:	4622      	mov	r2, r4
 8002c8a:	e7e6      	b.n	8002c5a <__exponent+0x20>
 8002c8c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002c90:	f803 1b01 	strb.w	r1, [r3], #1
 8002c94:	e7f2      	b.n	8002c7c <__exponent+0x42>
 8002c96:	2230      	movs	r2, #48	; 0x30
 8002c98:	461c      	mov	r4, r3
 8002c9a:	4411      	add	r1, r2
 8002c9c:	f804 2b02 	strb.w	r2, [r4], #2
 8002ca0:	7059      	strb	r1, [r3, #1]
 8002ca2:	e7ee      	b.n	8002c82 <__exponent+0x48>

08002ca4 <_printf_float>:
 8002ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca8:	b091      	sub	sp, #68	; 0x44
 8002caa:	460c      	mov	r4, r1
 8002cac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002cae:	4693      	mov	fp, r2
 8002cb0:	461e      	mov	r6, r3
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	f001 fa4c 	bl	8004150 <_localeconv_r>
 8002cb8:	6803      	ldr	r3, [r0, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cbe:	f7fd fa5f 	bl	8000180 <strlen>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	900a      	str	r0, [sp, #40]	; 0x28
 8002cca:	3307      	adds	r3, #7
 8002ccc:	f023 0307 	bic.w	r3, r3, #7
 8002cd0:	f103 0208 	add.w	r2, r3, #8
 8002cd4:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002cd8:	f8d4 a000 	ldr.w	sl, [r4]
 8002cdc:	603a      	str	r2, [r7, #0]
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ce6:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8002cea:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002cec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf6:	4ba6      	ldr	r3, [pc, #664]	; (8002f90 <_printf_float+0x2ec>)
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cfc:	f7fd fe9a 	bl	8000a34 <__aeabi_dcmpun>
 8002d00:	2800      	cmp	r0, #0
 8002d02:	f040 81f7 	bne.w	80030f4 <_printf_float+0x450>
 8002d06:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0a:	4ba1      	ldr	r3, [pc, #644]	; (8002f90 <_printf_float+0x2ec>)
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d10:	f7fd fe72 	bl	80009f8 <__aeabi_dcmple>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	f040 81ed 	bne.w	80030f4 <_printf_float+0x450>
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	4638      	mov	r0, r7
 8002d20:	4649      	mov	r1, r9
 8002d22:	f7fd fe5f 	bl	80009e4 <__aeabi_dcmplt>
 8002d26:	b110      	cbz	r0, 8002d2e <_printf_float+0x8a>
 8002d28:	232d      	movs	r3, #45	; 0x2d
 8002d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d2e:	4b99      	ldr	r3, [pc, #612]	; (8002f94 <_printf_float+0x2f0>)
 8002d30:	4f99      	ldr	r7, [pc, #612]	; (8002f98 <_printf_float+0x2f4>)
 8002d32:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d36:	bf98      	it	ls
 8002d38:	461f      	movls	r7, r3
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	f04f 0900 	mov.w	r9, #0
 8002d40:	6123      	str	r3, [r4, #16]
 8002d42:	f02a 0304 	bic.w	r3, sl, #4
 8002d46:	6023      	str	r3, [r4, #0]
 8002d48:	9600      	str	r6, [sp, #0]
 8002d4a:	465b      	mov	r3, fp
 8002d4c:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d4e:	4621      	mov	r1, r4
 8002d50:	4628      	mov	r0, r5
 8002d52:	f000 f9df 	bl	8003114 <_printf_common>
 8002d56:	3001      	adds	r0, #1
 8002d58:	f040 809a 	bne.w	8002e90 <_printf_float+0x1ec>
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	b011      	add	sp, #68	; 0x44
 8002d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d66:	6862      	ldr	r2, [r4, #4]
 8002d68:	a80e      	add	r0, sp, #56	; 0x38
 8002d6a:	1c53      	adds	r3, r2, #1
 8002d6c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8002d70:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8002d74:	d141      	bne.n	8002dfa <_printf_float+0x156>
 8002d76:	2206      	movs	r2, #6
 8002d78:	6062      	str	r2, [r4, #4]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	6863      	ldr	r3, [r4, #4]
 8002d82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002d86:	9005      	str	r0, [sp, #20]
 8002d88:	9202      	str	r2, [sp, #8]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	463a      	mov	r2, r7
 8002d8e:	464b      	mov	r3, r9
 8002d90:	9106      	str	r1, [sp, #24]
 8002d92:	f8cd 8010 	str.w	r8, [sp, #16]
 8002d96:	f8cd e00c 	str.w	lr, [sp, #12]
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f7ff fef1 	bl	8002b82 <__cvt>
 8002da0:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002da4:	2b47      	cmp	r3, #71	; 0x47
 8002da6:	4607      	mov	r7, r0
 8002da8:	d109      	bne.n	8002dbe <_printf_float+0x11a>
 8002daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dac:	1cd8      	adds	r0, r3, #3
 8002dae:	db02      	blt.n	8002db6 <_printf_float+0x112>
 8002db0:	6862      	ldr	r2, [r4, #4]
 8002db2:	4293      	cmp	r3, r2
 8002db4:	dd59      	ble.n	8002e6a <_printf_float+0x1c6>
 8002db6:	f1a8 0802 	sub.w	r8, r8, #2
 8002dba:	fa5f f888 	uxtb.w	r8, r8
 8002dbe:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002dc2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002dc4:	d836      	bhi.n	8002e34 <_printf_float+0x190>
 8002dc6:	3901      	subs	r1, #1
 8002dc8:	4642      	mov	r2, r8
 8002dca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002dce:	910d      	str	r1, [sp, #52]	; 0x34
 8002dd0:	f7ff ff33 	bl	8002c3a <__exponent>
 8002dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dd6:	4681      	mov	r9, r0
 8002dd8:	1883      	adds	r3, r0, r2
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	dc02      	bgt.n	8002de6 <_printf_float+0x142>
 8002de0:	6822      	ldr	r2, [r4, #0]
 8002de2:	07d1      	lsls	r1, r2, #31
 8002de4:	d501      	bpl.n	8002dea <_printf_float+0x146>
 8002de6:	3301      	adds	r3, #1
 8002de8:	6123      	str	r3, [r4, #16]
 8002dea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0aa      	beq.n	8002d48 <_printf_float+0xa4>
 8002df2:	232d      	movs	r3, #45	; 0x2d
 8002df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002df8:	e7a6      	b.n	8002d48 <_printf_float+0xa4>
 8002dfa:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002dfe:	d002      	beq.n	8002e06 <_printf_float+0x162>
 8002e00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002e04:	d1b9      	bne.n	8002d7a <_printf_float+0xd6>
 8002e06:	b19a      	cbz	r2, 8002e30 <_printf_float+0x18c>
 8002e08:	2100      	movs	r1, #0
 8002e0a:	9106      	str	r1, [sp, #24]
 8002e0c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002e10:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002e14:	6023      	str	r3, [r4, #0]
 8002e16:	9005      	str	r0, [sp, #20]
 8002e18:	463a      	mov	r2, r7
 8002e1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8002e1e:	f8cd e00c 	str.w	lr, [sp, #12]
 8002e22:	9102      	str	r1, [sp, #8]
 8002e24:	464b      	mov	r3, r9
 8002e26:	4628      	mov	r0, r5
 8002e28:	f7ff feab 	bl	8002b82 <__cvt>
 8002e2c:	4607      	mov	r7, r0
 8002e2e:	e7bc      	b.n	8002daa <_printf_float+0x106>
 8002e30:	2201      	movs	r2, #1
 8002e32:	e7a1      	b.n	8002d78 <_printf_float+0xd4>
 8002e34:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002e38:	d119      	bne.n	8002e6e <_printf_float+0x1ca>
 8002e3a:	2900      	cmp	r1, #0
 8002e3c:	6863      	ldr	r3, [r4, #4]
 8002e3e:	dd0c      	ble.n	8002e5a <_printf_float+0x1b6>
 8002e40:	6121      	str	r1, [r4, #16]
 8002e42:	b913      	cbnz	r3, 8002e4a <_printf_float+0x1a6>
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	07d2      	lsls	r2, r2, #31
 8002e48:	d502      	bpl.n	8002e50 <_printf_float+0x1ac>
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	440b      	add	r3, r1
 8002e4e:	6123      	str	r3, [r4, #16]
 8002e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e52:	f04f 0900 	mov.w	r9, #0
 8002e56:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e58:	e7c7      	b.n	8002dea <_printf_float+0x146>
 8002e5a:	b913      	cbnz	r3, 8002e62 <_printf_float+0x1be>
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	07d0      	lsls	r0, r2, #31
 8002e60:	d501      	bpl.n	8002e66 <_printf_float+0x1c2>
 8002e62:	3302      	adds	r3, #2
 8002e64:	e7f3      	b.n	8002e4e <_printf_float+0x1aa>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e7f1      	b.n	8002e4e <_printf_float+0x1aa>
 8002e6a:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e72:	4293      	cmp	r3, r2
 8002e74:	db05      	blt.n	8002e82 <_printf_float+0x1de>
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	6123      	str	r3, [r4, #16]
 8002e7a:	07d1      	lsls	r1, r2, #31
 8002e7c:	d5e8      	bpl.n	8002e50 <_printf_float+0x1ac>
 8002e7e:	3301      	adds	r3, #1
 8002e80:	e7e5      	b.n	8002e4e <_printf_float+0x1aa>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfcc      	ite	gt
 8002e86:	2301      	movgt	r3, #1
 8002e88:	f1c3 0302 	rsble	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	e7de      	b.n	8002e4e <_printf_float+0x1aa>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	055a      	lsls	r2, r3, #21
 8002e94:	d407      	bmi.n	8002ea6 <_printf_float+0x202>
 8002e96:	6923      	ldr	r3, [r4, #16]
 8002e98:	463a      	mov	r2, r7
 8002e9a:	4659      	mov	r1, fp
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	47b0      	blx	r6
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	d12a      	bne.n	8002efa <_printf_float+0x256>
 8002ea4:	e75a      	b.n	8002d5c <_printf_float+0xb8>
 8002ea6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002eaa:	f240 80dc 	bls.w	8003066 <_printf_float+0x3c2>
 8002eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f7fd fd8b 	bl	80009d0 <__aeabi_dcmpeq>
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	d039      	beq.n	8002f32 <_printf_float+0x28e>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4a36      	ldr	r2, [pc, #216]	; (8002f9c <_printf_float+0x2f8>)
 8002ec2:	4659      	mov	r1, fp
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	47b0      	blx	r6
 8002ec8:	3001      	adds	r0, #1
 8002eca:	f43f af47 	beq.w	8002d5c <_printf_float+0xb8>
 8002ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	db02      	blt.n	8002edc <_printf_float+0x238>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	07d8      	lsls	r0, r3, #31
 8002eda:	d50e      	bpl.n	8002efa <_printf_float+0x256>
 8002edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	47b0      	blx	r6
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	f43f af38 	beq.w	8002d5c <_printf_float+0xb8>
 8002eec:	2700      	movs	r7, #0
 8002eee:	f104 081a 	add.w	r8, r4, #26
 8002ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	429f      	cmp	r7, r3
 8002ef8:	db11      	blt.n	8002f1e <_printf_float+0x27a>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	079f      	lsls	r7, r3, #30
 8002efe:	d508      	bpl.n	8002f12 <_printf_float+0x26e>
 8002f00:	2700      	movs	r7, #0
 8002f02:	f104 0819 	add.w	r8, r4, #25
 8002f06:	68e3      	ldr	r3, [r4, #12]
 8002f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	429f      	cmp	r7, r3
 8002f0e:	f2c0 80e7 	blt.w	80030e0 <_printf_float+0x43c>
 8002f12:	68e0      	ldr	r0, [r4, #12]
 8002f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f16:	4298      	cmp	r0, r3
 8002f18:	bfb8      	it	lt
 8002f1a:	4618      	movlt	r0, r3
 8002f1c:	e720      	b.n	8002d60 <_printf_float+0xbc>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	4642      	mov	r2, r8
 8002f22:	4659      	mov	r1, fp
 8002f24:	4628      	mov	r0, r5
 8002f26:	47b0      	blx	r6
 8002f28:	3001      	adds	r0, #1
 8002f2a:	f43f af17 	beq.w	8002d5c <_printf_float+0xb8>
 8002f2e:	3701      	adds	r7, #1
 8002f30:	e7df      	b.n	8002ef2 <_printf_float+0x24e>
 8002f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	dc33      	bgt.n	8002fa0 <_printf_float+0x2fc>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <_printf_float+0x2f8>)
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	4628      	mov	r0, r5
 8002f40:	47b0      	blx	r6
 8002f42:	3001      	adds	r0, #1
 8002f44:	f43f af0a 	beq.w	8002d5c <_printf_float+0xb8>
 8002f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f4a:	b923      	cbnz	r3, 8002f56 <_printf_float+0x2b2>
 8002f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f4e:	b913      	cbnz	r3, 8002f56 <_printf_float+0x2b2>
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	07d9      	lsls	r1, r3, #31
 8002f54:	d5d1      	bpl.n	8002efa <_printf_float+0x256>
 8002f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f5a:	4659      	mov	r1, fp
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	47b0      	blx	r6
 8002f60:	3001      	adds	r0, #1
 8002f62:	f43f aefb 	beq.w	8002d5c <_printf_float+0xb8>
 8002f66:	f04f 0800 	mov.w	r8, #0
 8002f6a:	f104 091a 	add.w	r9, r4, #26
 8002f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f70:	425b      	negs	r3, r3
 8002f72:	4598      	cmp	r8, r3
 8002f74:	db01      	blt.n	8002f7a <_printf_float+0x2d6>
 8002f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f78:	e78e      	b.n	8002e98 <_printf_float+0x1f4>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	464a      	mov	r2, r9
 8002f7e:	4659      	mov	r1, fp
 8002f80:	4628      	mov	r0, r5
 8002f82:	47b0      	blx	r6
 8002f84:	3001      	adds	r0, #1
 8002f86:	f43f aee9 	beq.w	8002d5c <_printf_float+0xb8>
 8002f8a:	f108 0801 	add.w	r8, r8, #1
 8002f8e:	e7ee      	b.n	8002f6e <_printf_float+0x2ca>
 8002f90:	7fefffff 	.word	0x7fefffff
 8002f94:	08004ca9 	.word	0x08004ca9
 8002f98:	08004cad 	.word	0x08004cad
 8002f9c:	08004cb9 	.word	0x08004cb9
 8002fa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	bfa8      	it	ge
 8002fa8:	461a      	movge	r2, r3
 8002faa:	2a00      	cmp	r2, #0
 8002fac:	4690      	mov	r8, r2
 8002fae:	dc36      	bgt.n	800301e <_printf_float+0x37a>
 8002fb0:	f04f 0a00 	mov.w	sl, #0
 8002fb4:	f104 031a 	add.w	r3, r4, #26
 8002fb8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002fbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fbe:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002fc2:	eba9 0308 	sub.w	r3, r9, r8
 8002fc6:	459a      	cmp	sl, r3
 8002fc8:	db31      	blt.n	800302e <_printf_float+0x38a>
 8002fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	db38      	blt.n	8003044 <_printf_float+0x3a0>
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	07da      	lsls	r2, r3, #31
 8002fd6:	d435      	bmi.n	8003044 <_printf_float+0x3a0>
 8002fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002fdc:	eba3 0209 	sub.w	r2, r3, r9
 8002fe0:	eba3 0801 	sub.w	r8, r3, r1
 8002fe4:	4590      	cmp	r8, r2
 8002fe6:	bfa8      	it	ge
 8002fe8:	4690      	movge	r8, r2
 8002fea:	f1b8 0f00 	cmp.w	r8, #0
 8002fee:	dc31      	bgt.n	8003054 <_printf_float+0x3b0>
 8002ff0:	2700      	movs	r7, #0
 8002ff2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002ff6:	f104 091a 	add.w	r9, r4, #26
 8002ffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	eba3 0308 	sub.w	r3, r3, r8
 8003004:	429f      	cmp	r7, r3
 8003006:	f6bf af78 	bge.w	8002efa <_printf_float+0x256>
 800300a:	2301      	movs	r3, #1
 800300c:	464a      	mov	r2, r9
 800300e:	4659      	mov	r1, fp
 8003010:	4628      	mov	r0, r5
 8003012:	47b0      	blx	r6
 8003014:	3001      	adds	r0, #1
 8003016:	f43f aea1 	beq.w	8002d5c <_printf_float+0xb8>
 800301a:	3701      	adds	r7, #1
 800301c:	e7ed      	b.n	8002ffa <_printf_float+0x356>
 800301e:	4613      	mov	r3, r2
 8003020:	4659      	mov	r1, fp
 8003022:	463a      	mov	r2, r7
 8003024:	4628      	mov	r0, r5
 8003026:	47b0      	blx	r6
 8003028:	3001      	adds	r0, #1
 800302a:	d1c1      	bne.n	8002fb0 <_printf_float+0x30c>
 800302c:	e696      	b.n	8002d5c <_printf_float+0xb8>
 800302e:	2301      	movs	r3, #1
 8003030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003032:	4659      	mov	r1, fp
 8003034:	4628      	mov	r0, r5
 8003036:	47b0      	blx	r6
 8003038:	3001      	adds	r0, #1
 800303a:	f43f ae8f 	beq.w	8002d5c <_printf_float+0xb8>
 800303e:	f10a 0a01 	add.w	sl, sl, #1
 8003042:	e7bc      	b.n	8002fbe <_printf_float+0x31a>
 8003044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003048:	4659      	mov	r1, fp
 800304a:	4628      	mov	r0, r5
 800304c:	47b0      	blx	r6
 800304e:	3001      	adds	r0, #1
 8003050:	d1c2      	bne.n	8002fd8 <_printf_float+0x334>
 8003052:	e683      	b.n	8002d5c <_printf_float+0xb8>
 8003054:	4643      	mov	r3, r8
 8003056:	eb07 0209 	add.w	r2, r7, r9
 800305a:	4659      	mov	r1, fp
 800305c:	4628      	mov	r0, r5
 800305e:	47b0      	blx	r6
 8003060:	3001      	adds	r0, #1
 8003062:	d1c5      	bne.n	8002ff0 <_printf_float+0x34c>
 8003064:	e67a      	b.n	8002d5c <_printf_float+0xb8>
 8003066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003068:	2a01      	cmp	r2, #1
 800306a:	dc01      	bgt.n	8003070 <_printf_float+0x3cc>
 800306c:	07db      	lsls	r3, r3, #31
 800306e:	d534      	bpl.n	80030da <_printf_float+0x436>
 8003070:	2301      	movs	r3, #1
 8003072:	463a      	mov	r2, r7
 8003074:	4659      	mov	r1, fp
 8003076:	4628      	mov	r0, r5
 8003078:	47b0      	blx	r6
 800307a:	3001      	adds	r0, #1
 800307c:	f43f ae6e 	beq.w	8002d5c <_printf_float+0xb8>
 8003080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003084:	4659      	mov	r1, fp
 8003086:	4628      	mov	r0, r5
 8003088:	47b0      	blx	r6
 800308a:	3001      	adds	r0, #1
 800308c:	f43f ae66 	beq.w	8002d5c <_printf_float+0xb8>
 8003090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003094:	2200      	movs	r2, #0
 8003096:	2300      	movs	r3, #0
 8003098:	f7fd fc9a 	bl	80009d0 <__aeabi_dcmpeq>
 800309c:	b150      	cbz	r0, 80030b4 <_printf_float+0x410>
 800309e:	2700      	movs	r7, #0
 80030a0:	f104 081a 	add.w	r8, r4, #26
 80030a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030a6:	3b01      	subs	r3, #1
 80030a8:	429f      	cmp	r7, r3
 80030aa:	db0c      	blt.n	80030c6 <_printf_float+0x422>
 80030ac:	464b      	mov	r3, r9
 80030ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80030b2:	e6f2      	b.n	8002e9a <_printf_float+0x1f6>
 80030b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030b6:	1c7a      	adds	r2, r7, #1
 80030b8:	3b01      	subs	r3, #1
 80030ba:	4659      	mov	r1, fp
 80030bc:	4628      	mov	r0, r5
 80030be:	47b0      	blx	r6
 80030c0:	3001      	adds	r0, #1
 80030c2:	d1f3      	bne.n	80030ac <_printf_float+0x408>
 80030c4:	e64a      	b.n	8002d5c <_printf_float+0xb8>
 80030c6:	2301      	movs	r3, #1
 80030c8:	4642      	mov	r2, r8
 80030ca:	4659      	mov	r1, fp
 80030cc:	4628      	mov	r0, r5
 80030ce:	47b0      	blx	r6
 80030d0:	3001      	adds	r0, #1
 80030d2:	f43f ae43 	beq.w	8002d5c <_printf_float+0xb8>
 80030d6:	3701      	adds	r7, #1
 80030d8:	e7e4      	b.n	80030a4 <_printf_float+0x400>
 80030da:	2301      	movs	r3, #1
 80030dc:	463a      	mov	r2, r7
 80030de:	e7ec      	b.n	80030ba <_printf_float+0x416>
 80030e0:	2301      	movs	r3, #1
 80030e2:	4642      	mov	r2, r8
 80030e4:	4659      	mov	r1, fp
 80030e6:	4628      	mov	r0, r5
 80030e8:	47b0      	blx	r6
 80030ea:	3001      	adds	r0, #1
 80030ec:	f43f ae36 	beq.w	8002d5c <_printf_float+0xb8>
 80030f0:	3701      	adds	r7, #1
 80030f2:	e708      	b.n	8002f06 <_printf_float+0x262>
 80030f4:	463a      	mov	r2, r7
 80030f6:	464b      	mov	r3, r9
 80030f8:	4638      	mov	r0, r7
 80030fa:	4649      	mov	r1, r9
 80030fc:	f7fd fc9a 	bl	8000a34 <__aeabi_dcmpun>
 8003100:	2800      	cmp	r0, #0
 8003102:	f43f ae30 	beq.w	8002d66 <_printf_float+0xc2>
 8003106:	4b01      	ldr	r3, [pc, #4]	; (800310c <_printf_float+0x468>)
 8003108:	4f01      	ldr	r7, [pc, #4]	; (8003110 <_printf_float+0x46c>)
 800310a:	e612      	b.n	8002d32 <_printf_float+0x8e>
 800310c:	08004cb1 	.word	0x08004cb1
 8003110:	08004cb5 	.word	0x08004cb5

08003114 <_printf_common>:
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	4691      	mov	r9, r2
 800311a:	461f      	mov	r7, r3
 800311c:	688a      	ldr	r2, [r1, #8]
 800311e:	690b      	ldr	r3, [r1, #16]
 8003120:	4606      	mov	r6, r0
 8003122:	4293      	cmp	r3, r2
 8003124:	bfb8      	it	lt
 8003126:	4613      	movlt	r3, r2
 8003128:	f8c9 3000 	str.w	r3, [r9]
 800312c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003130:	460c      	mov	r4, r1
 8003132:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003136:	b112      	cbz	r2, 800313e <_printf_common+0x2a>
 8003138:	3301      	adds	r3, #1
 800313a:	f8c9 3000 	str.w	r3, [r9]
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	0699      	lsls	r1, r3, #26
 8003142:	bf42      	ittt	mi
 8003144:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003148:	3302      	addmi	r3, #2
 800314a:	f8c9 3000 	strmi.w	r3, [r9]
 800314e:	6825      	ldr	r5, [r4, #0]
 8003150:	f015 0506 	ands.w	r5, r5, #6
 8003154:	d107      	bne.n	8003166 <_printf_common+0x52>
 8003156:	f104 0a19 	add.w	sl, r4, #25
 800315a:	68e3      	ldr	r3, [r4, #12]
 800315c:	f8d9 2000 	ldr.w	r2, [r9]
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	429d      	cmp	r5, r3
 8003164:	db2a      	blt.n	80031bc <_printf_common+0xa8>
 8003166:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800316a:	6822      	ldr	r2, [r4, #0]
 800316c:	3300      	adds	r3, #0
 800316e:	bf18      	it	ne
 8003170:	2301      	movne	r3, #1
 8003172:	0692      	lsls	r2, r2, #26
 8003174:	d42f      	bmi.n	80031d6 <_printf_common+0xc2>
 8003176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800317a:	4639      	mov	r1, r7
 800317c:	4630      	mov	r0, r6
 800317e:	47c0      	blx	r8
 8003180:	3001      	adds	r0, #1
 8003182:	d022      	beq.n	80031ca <_printf_common+0xb6>
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	68e5      	ldr	r5, [r4, #12]
 8003188:	f003 0306 	and.w	r3, r3, #6
 800318c:	2b04      	cmp	r3, #4
 800318e:	bf18      	it	ne
 8003190:	2500      	movne	r5, #0
 8003192:	f8d9 2000 	ldr.w	r2, [r9]
 8003196:	f04f 0900 	mov.w	r9, #0
 800319a:	bf08      	it	eq
 800319c:	1aad      	subeq	r5, r5, r2
 800319e:	68a3      	ldr	r3, [r4, #8]
 80031a0:	6922      	ldr	r2, [r4, #16]
 80031a2:	bf08      	it	eq
 80031a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bfc4      	itt	gt
 80031ac:	1a9b      	subgt	r3, r3, r2
 80031ae:	18ed      	addgt	r5, r5, r3
 80031b0:	341a      	adds	r4, #26
 80031b2:	454d      	cmp	r5, r9
 80031b4:	d11b      	bne.n	80031ee <_printf_common+0xda>
 80031b6:	2000      	movs	r0, #0
 80031b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031bc:	2301      	movs	r3, #1
 80031be:	4652      	mov	r2, sl
 80031c0:	4639      	mov	r1, r7
 80031c2:	4630      	mov	r0, r6
 80031c4:	47c0      	blx	r8
 80031c6:	3001      	adds	r0, #1
 80031c8:	d103      	bne.n	80031d2 <_printf_common+0xbe>
 80031ca:	f04f 30ff 	mov.w	r0, #4294967295
 80031ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d2:	3501      	adds	r5, #1
 80031d4:	e7c1      	b.n	800315a <_printf_common+0x46>
 80031d6:	2030      	movs	r0, #48	; 0x30
 80031d8:	18e1      	adds	r1, r4, r3
 80031da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031e4:	4422      	add	r2, r4
 80031e6:	3302      	adds	r3, #2
 80031e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031ec:	e7c3      	b.n	8003176 <_printf_common+0x62>
 80031ee:	2301      	movs	r3, #1
 80031f0:	4622      	mov	r2, r4
 80031f2:	4639      	mov	r1, r7
 80031f4:	4630      	mov	r0, r6
 80031f6:	47c0      	blx	r8
 80031f8:	3001      	adds	r0, #1
 80031fa:	d0e6      	beq.n	80031ca <_printf_common+0xb6>
 80031fc:	f109 0901 	add.w	r9, r9, #1
 8003200:	e7d7      	b.n	80031b2 <_printf_common+0x9e>
	...

08003204 <_printf_i>:
 8003204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003208:	4617      	mov	r7, r2
 800320a:	7e0a      	ldrb	r2, [r1, #24]
 800320c:	b085      	sub	sp, #20
 800320e:	2a6e      	cmp	r2, #110	; 0x6e
 8003210:	4698      	mov	r8, r3
 8003212:	4606      	mov	r6, r0
 8003214:	460c      	mov	r4, r1
 8003216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003218:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800321c:	f000 80bc 	beq.w	8003398 <_printf_i+0x194>
 8003220:	d81a      	bhi.n	8003258 <_printf_i+0x54>
 8003222:	2a63      	cmp	r2, #99	; 0x63
 8003224:	d02e      	beq.n	8003284 <_printf_i+0x80>
 8003226:	d80a      	bhi.n	800323e <_printf_i+0x3a>
 8003228:	2a00      	cmp	r2, #0
 800322a:	f000 80c8 	beq.w	80033be <_printf_i+0x1ba>
 800322e:	2a58      	cmp	r2, #88	; 0x58
 8003230:	f000 808a 	beq.w	8003348 <_printf_i+0x144>
 8003234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003238:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800323c:	e02a      	b.n	8003294 <_printf_i+0x90>
 800323e:	2a64      	cmp	r2, #100	; 0x64
 8003240:	d001      	beq.n	8003246 <_printf_i+0x42>
 8003242:	2a69      	cmp	r2, #105	; 0x69
 8003244:	d1f6      	bne.n	8003234 <_printf_i+0x30>
 8003246:	6821      	ldr	r1, [r4, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800324e:	d023      	beq.n	8003298 <_printf_i+0x94>
 8003250:	1d11      	adds	r1, r2, #4
 8003252:	6019      	str	r1, [r3, #0]
 8003254:	6813      	ldr	r3, [r2, #0]
 8003256:	e027      	b.n	80032a8 <_printf_i+0xa4>
 8003258:	2a73      	cmp	r2, #115	; 0x73
 800325a:	f000 80b4 	beq.w	80033c6 <_printf_i+0x1c2>
 800325e:	d808      	bhi.n	8003272 <_printf_i+0x6e>
 8003260:	2a6f      	cmp	r2, #111	; 0x6f
 8003262:	d02a      	beq.n	80032ba <_printf_i+0xb6>
 8003264:	2a70      	cmp	r2, #112	; 0x70
 8003266:	d1e5      	bne.n	8003234 <_printf_i+0x30>
 8003268:	680a      	ldr	r2, [r1, #0]
 800326a:	f042 0220 	orr.w	r2, r2, #32
 800326e:	600a      	str	r2, [r1, #0]
 8003270:	e003      	b.n	800327a <_printf_i+0x76>
 8003272:	2a75      	cmp	r2, #117	; 0x75
 8003274:	d021      	beq.n	80032ba <_printf_i+0xb6>
 8003276:	2a78      	cmp	r2, #120	; 0x78
 8003278:	d1dc      	bne.n	8003234 <_printf_i+0x30>
 800327a:	2278      	movs	r2, #120	; 0x78
 800327c:	496f      	ldr	r1, [pc, #444]	; (800343c <_printf_i+0x238>)
 800327e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003282:	e064      	b.n	800334e <_printf_i+0x14a>
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800328a:	1d11      	adds	r1, r2, #4
 800328c:	6019      	str	r1, [r3, #0]
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003294:	2301      	movs	r3, #1
 8003296:	e0a3      	b.n	80033e0 <_printf_i+0x1dc>
 8003298:	f011 0f40 	tst.w	r1, #64	; 0x40
 800329c:	f102 0104 	add.w	r1, r2, #4
 80032a0:	6019      	str	r1, [r3, #0]
 80032a2:	d0d7      	beq.n	8003254 <_printf_i+0x50>
 80032a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da03      	bge.n	80032b4 <_printf_i+0xb0>
 80032ac:	222d      	movs	r2, #45	; 0x2d
 80032ae:	425b      	negs	r3, r3
 80032b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80032b4:	4962      	ldr	r1, [pc, #392]	; (8003440 <_printf_i+0x23c>)
 80032b6:	220a      	movs	r2, #10
 80032b8:	e017      	b.n	80032ea <_printf_i+0xe6>
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80032c2:	d003      	beq.n	80032cc <_printf_i+0xc8>
 80032c4:	1d08      	adds	r0, r1, #4
 80032c6:	6018      	str	r0, [r3, #0]
 80032c8:	680b      	ldr	r3, [r1, #0]
 80032ca:	e006      	b.n	80032da <_printf_i+0xd6>
 80032cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032d0:	f101 0004 	add.w	r0, r1, #4
 80032d4:	6018      	str	r0, [r3, #0]
 80032d6:	d0f7      	beq.n	80032c8 <_printf_i+0xc4>
 80032d8:	880b      	ldrh	r3, [r1, #0]
 80032da:	2a6f      	cmp	r2, #111	; 0x6f
 80032dc:	bf14      	ite	ne
 80032de:	220a      	movne	r2, #10
 80032e0:	2208      	moveq	r2, #8
 80032e2:	4957      	ldr	r1, [pc, #348]	; (8003440 <_printf_i+0x23c>)
 80032e4:	2000      	movs	r0, #0
 80032e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80032ea:	6865      	ldr	r5, [r4, #4]
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	60a5      	str	r5, [r4, #8]
 80032f0:	f2c0 809c 	blt.w	800342c <_printf_i+0x228>
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	f020 0004 	bic.w	r0, r0, #4
 80032fa:	6020      	str	r0, [r4, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d13f      	bne.n	8003380 <_printf_i+0x17c>
 8003300:	2d00      	cmp	r5, #0
 8003302:	f040 8095 	bne.w	8003430 <_printf_i+0x22c>
 8003306:	4675      	mov	r5, lr
 8003308:	2a08      	cmp	r2, #8
 800330a:	d10b      	bne.n	8003324 <_printf_i+0x120>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	07da      	lsls	r2, r3, #31
 8003310:	d508      	bpl.n	8003324 <_printf_i+0x120>
 8003312:	6923      	ldr	r3, [r4, #16]
 8003314:	6862      	ldr	r2, [r4, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	bfde      	ittt	le
 800331a:	2330      	movle	r3, #48	; 0x30
 800331c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003324:	ebae 0305 	sub.w	r3, lr, r5
 8003328:	6123      	str	r3, [r4, #16]
 800332a:	f8cd 8000 	str.w	r8, [sp]
 800332e:	463b      	mov	r3, r7
 8003330:	aa03      	add	r2, sp, #12
 8003332:	4621      	mov	r1, r4
 8003334:	4630      	mov	r0, r6
 8003336:	f7ff feed 	bl	8003114 <_printf_common>
 800333a:	3001      	adds	r0, #1
 800333c:	d155      	bne.n	80033ea <_printf_i+0x1e6>
 800333e:	f04f 30ff 	mov.w	r0, #4294967295
 8003342:	b005      	add	sp, #20
 8003344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003348:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800334c:	493c      	ldr	r1, [pc, #240]	; (8003440 <_printf_i+0x23c>)
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003356:	f100 0504 	add.w	r5, r0, #4
 800335a:	601d      	str	r5, [r3, #0]
 800335c:	d001      	beq.n	8003362 <_printf_i+0x15e>
 800335e:	6803      	ldr	r3, [r0, #0]
 8003360:	e002      	b.n	8003368 <_printf_i+0x164>
 8003362:	0655      	lsls	r5, r2, #25
 8003364:	d5fb      	bpl.n	800335e <_printf_i+0x15a>
 8003366:	8803      	ldrh	r3, [r0, #0]
 8003368:	07d0      	lsls	r0, r2, #31
 800336a:	bf44      	itt	mi
 800336c:	f042 0220 	orrmi.w	r2, r2, #32
 8003370:	6022      	strmi	r2, [r4, #0]
 8003372:	b91b      	cbnz	r3, 800337c <_printf_i+0x178>
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	f022 0220 	bic.w	r2, r2, #32
 800337a:	6022      	str	r2, [r4, #0]
 800337c:	2210      	movs	r2, #16
 800337e:	e7b1      	b.n	80032e4 <_printf_i+0xe0>
 8003380:	4675      	mov	r5, lr
 8003382:	fbb3 f0f2 	udiv	r0, r3, r2
 8003386:	fb02 3310 	mls	r3, r2, r0, r3
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003390:	4603      	mov	r3, r0
 8003392:	2800      	cmp	r0, #0
 8003394:	d1f5      	bne.n	8003382 <_printf_i+0x17e>
 8003396:	e7b7      	b.n	8003308 <_printf_i+0x104>
 8003398:	6808      	ldr	r0, [r1, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f010 0f80 	tst.w	r0, #128	; 0x80
 80033a0:	6949      	ldr	r1, [r1, #20]
 80033a2:	d004      	beq.n	80033ae <_printf_i+0x1aa>
 80033a4:	1d10      	adds	r0, r2, #4
 80033a6:	6018      	str	r0, [r3, #0]
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	6019      	str	r1, [r3, #0]
 80033ac:	e007      	b.n	80033be <_printf_i+0x1ba>
 80033ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033b2:	f102 0004 	add.w	r0, r2, #4
 80033b6:	6018      	str	r0, [r3, #0]
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	d0f6      	beq.n	80033aa <_printf_i+0x1a6>
 80033bc:	8019      	strh	r1, [r3, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	4675      	mov	r5, lr
 80033c2:	6123      	str	r3, [r4, #16]
 80033c4:	e7b1      	b.n	800332a <_printf_i+0x126>
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	1d11      	adds	r1, r2, #4
 80033ca:	6019      	str	r1, [r3, #0]
 80033cc:	6815      	ldr	r5, [r2, #0]
 80033ce:	2100      	movs	r1, #0
 80033d0:	6862      	ldr	r2, [r4, #4]
 80033d2:	4628      	mov	r0, r5
 80033d4:	f000 fed2 	bl	800417c <memchr>
 80033d8:	b108      	cbz	r0, 80033de <_printf_i+0x1da>
 80033da:	1b40      	subs	r0, r0, r5
 80033dc:	6060      	str	r0, [r4, #4]
 80033de:	6863      	ldr	r3, [r4, #4]
 80033e0:	6123      	str	r3, [r4, #16]
 80033e2:	2300      	movs	r3, #0
 80033e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033e8:	e79f      	b.n	800332a <_printf_i+0x126>
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	462a      	mov	r2, r5
 80033ee:	4639      	mov	r1, r7
 80033f0:	4630      	mov	r0, r6
 80033f2:	47c0      	blx	r8
 80033f4:	3001      	adds	r0, #1
 80033f6:	d0a2      	beq.n	800333e <_printf_i+0x13a>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	079b      	lsls	r3, r3, #30
 80033fc:	d507      	bpl.n	800340e <_printf_i+0x20a>
 80033fe:	2500      	movs	r5, #0
 8003400:	f104 0919 	add.w	r9, r4, #25
 8003404:	68e3      	ldr	r3, [r4, #12]
 8003406:	9a03      	ldr	r2, [sp, #12]
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	429d      	cmp	r5, r3
 800340c:	db05      	blt.n	800341a <_printf_i+0x216>
 800340e:	68e0      	ldr	r0, [r4, #12]
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	4298      	cmp	r0, r3
 8003414:	bfb8      	it	lt
 8003416:	4618      	movlt	r0, r3
 8003418:	e793      	b.n	8003342 <_printf_i+0x13e>
 800341a:	2301      	movs	r3, #1
 800341c:	464a      	mov	r2, r9
 800341e:	4639      	mov	r1, r7
 8003420:	4630      	mov	r0, r6
 8003422:	47c0      	blx	r8
 8003424:	3001      	adds	r0, #1
 8003426:	d08a      	beq.n	800333e <_printf_i+0x13a>
 8003428:	3501      	adds	r5, #1
 800342a:	e7eb      	b.n	8003404 <_printf_i+0x200>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1a7      	bne.n	8003380 <_printf_i+0x17c>
 8003430:	780b      	ldrb	r3, [r1, #0]
 8003432:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003436:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800343a:	e765      	b.n	8003308 <_printf_i+0x104>
 800343c:	08004ccc 	.word	0x08004ccc
 8003440:	08004cbb 	.word	0x08004cbb

08003444 <siprintf>:
 8003444:	b40e      	push	{r1, r2, r3}
 8003446:	f44f 7102 	mov.w	r1, #520	; 0x208
 800344a:	b500      	push	{lr}
 800344c:	b09c      	sub	sp, #112	; 0x70
 800344e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003452:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003456:	9104      	str	r1, [sp, #16]
 8003458:	9107      	str	r1, [sp, #28]
 800345a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800345e:	ab1d      	add	r3, sp, #116	; 0x74
 8003460:	9002      	str	r0, [sp, #8]
 8003462:	9006      	str	r0, [sp, #24]
 8003464:	4808      	ldr	r0, [pc, #32]	; (8003488 <siprintf+0x44>)
 8003466:	f853 2b04 	ldr.w	r2, [r3], #4
 800346a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800346e:	6800      	ldr	r0, [r0, #0]
 8003470:	a902      	add	r1, sp, #8
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	f001 fa76 	bl	8004964 <_svfiprintf_r>
 8003478:	2200      	movs	r2, #0
 800347a:	9b02      	ldr	r3, [sp, #8]
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	b01c      	add	sp, #112	; 0x70
 8003480:	f85d eb04 	ldr.w	lr, [sp], #4
 8003484:	b003      	add	sp, #12
 8003486:	4770      	bx	lr
 8003488:	20000014 	.word	0x20000014

0800348c <quorem>:
 800348c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003490:	6903      	ldr	r3, [r0, #16]
 8003492:	690c      	ldr	r4, [r1, #16]
 8003494:	4680      	mov	r8, r0
 8003496:	429c      	cmp	r4, r3
 8003498:	f300 8082 	bgt.w	80035a0 <quorem+0x114>
 800349c:	3c01      	subs	r4, #1
 800349e:	f101 0714 	add.w	r7, r1, #20
 80034a2:	f100 0614 	add.w	r6, r0, #20
 80034a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80034aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80034ae:	3501      	adds	r5, #1
 80034b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80034b4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80034b8:	eb06 030e 	add.w	r3, r6, lr
 80034bc:	eb07 090e 	add.w	r9, r7, lr
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	b38d      	cbz	r5, 8003528 <quorem+0x9c>
 80034c4:	f04f 0a00 	mov.w	sl, #0
 80034c8:	4638      	mov	r0, r7
 80034ca:	46b4      	mov	ip, r6
 80034cc:	46d3      	mov	fp, sl
 80034ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80034d2:	b293      	uxth	r3, r2
 80034d4:	fb05 a303 	mla	r3, r5, r3, sl
 80034d8:	0c12      	lsrs	r2, r2, #16
 80034da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80034de:	fb05 a202 	mla	r2, r5, r2, sl
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	ebab 0303 	sub.w	r3, fp, r3
 80034e8:	f8bc b000 	ldrh.w	fp, [ip]
 80034ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80034f0:	445b      	add	r3, fp
 80034f2:	fa1f fb82 	uxth.w	fp, r2
 80034f6:	f8dc 2000 	ldr.w	r2, [ip]
 80034fa:	4581      	cmp	r9, r0
 80034fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003504:	b29b      	uxth	r3, r3
 8003506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800350a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800350e:	f84c 3b04 	str.w	r3, [ip], #4
 8003512:	d2dc      	bcs.n	80034ce <quorem+0x42>
 8003514:	f856 300e 	ldr.w	r3, [r6, lr]
 8003518:	b933      	cbnz	r3, 8003528 <quorem+0x9c>
 800351a:	9b01      	ldr	r3, [sp, #4]
 800351c:	3b04      	subs	r3, #4
 800351e:	429e      	cmp	r6, r3
 8003520:	461a      	mov	r2, r3
 8003522:	d331      	bcc.n	8003588 <quorem+0xfc>
 8003524:	f8c8 4010 	str.w	r4, [r8, #16]
 8003528:	4640      	mov	r0, r8
 800352a:	f001 f83e 	bl	80045aa <__mcmp>
 800352e:	2800      	cmp	r0, #0
 8003530:	db26      	blt.n	8003580 <quorem+0xf4>
 8003532:	4630      	mov	r0, r6
 8003534:	f04f 0e00 	mov.w	lr, #0
 8003538:	3501      	adds	r5, #1
 800353a:	f857 1b04 	ldr.w	r1, [r7], #4
 800353e:	f8d0 c000 	ldr.w	ip, [r0]
 8003542:	b28b      	uxth	r3, r1
 8003544:	ebae 0303 	sub.w	r3, lr, r3
 8003548:	fa1f f28c 	uxth.w	r2, ip
 800354c:	4413      	add	r3, r2
 800354e:	0c0a      	lsrs	r2, r1, #16
 8003550:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003558:	b29b      	uxth	r3, r3
 800355a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800355e:	45b9      	cmp	r9, r7
 8003560:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003564:	f840 3b04 	str.w	r3, [r0], #4
 8003568:	d2e7      	bcs.n	800353a <quorem+0xae>
 800356a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800356e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003572:	b92a      	cbnz	r2, 8003580 <quorem+0xf4>
 8003574:	3b04      	subs	r3, #4
 8003576:	429e      	cmp	r6, r3
 8003578:	461a      	mov	r2, r3
 800357a:	d30b      	bcc.n	8003594 <quorem+0x108>
 800357c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003580:	4628      	mov	r0, r5
 8003582:	b003      	add	sp, #12
 8003584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	3b04      	subs	r3, #4
 800358c:	2a00      	cmp	r2, #0
 800358e:	d1c9      	bne.n	8003524 <quorem+0x98>
 8003590:	3c01      	subs	r4, #1
 8003592:	e7c4      	b.n	800351e <quorem+0x92>
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	3b04      	subs	r3, #4
 8003598:	2a00      	cmp	r2, #0
 800359a:	d1ef      	bne.n	800357c <quorem+0xf0>
 800359c:	3c01      	subs	r4, #1
 800359e:	e7ea      	b.n	8003576 <quorem+0xea>
 80035a0:	2000      	movs	r0, #0
 80035a2:	e7ee      	b.n	8003582 <quorem+0xf6>
 80035a4:	0000      	movs	r0, r0
	...

080035a8 <_dtoa_r>:
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80035ae:	b095      	sub	sp, #84	; 0x54
 80035b0:	4604      	mov	r4, r0
 80035b2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80035b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035b8:	b93e      	cbnz	r6, 80035ca <_dtoa_r+0x22>
 80035ba:	2010      	movs	r0, #16
 80035bc:	f000 fdd6 	bl	800416c <malloc>
 80035c0:	6260      	str	r0, [r4, #36]	; 0x24
 80035c2:	6046      	str	r6, [r0, #4]
 80035c4:	6086      	str	r6, [r0, #8]
 80035c6:	6006      	str	r6, [r0, #0]
 80035c8:	60c6      	str	r6, [r0, #12]
 80035ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	b151      	cbz	r1, 80035e6 <_dtoa_r+0x3e>
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	2301      	movs	r3, #1
 80035d4:	4093      	lsls	r3, r2
 80035d6:	604a      	str	r2, [r1, #4]
 80035d8:	608b      	str	r3, [r1, #8]
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 fe10 	bl	8004200 <_Bfree>
 80035e0:	2200      	movs	r2, #0
 80035e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	9b03      	ldr	r3, [sp, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bfb7      	itett	lt
 80035ec:	2301      	movlt	r3, #1
 80035ee:	2300      	movge	r3, #0
 80035f0:	602b      	strlt	r3, [r5, #0]
 80035f2:	9b03      	ldrlt	r3, [sp, #12]
 80035f4:	bfae      	itee	ge
 80035f6:	602b      	strge	r3, [r5, #0]
 80035f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80035fc:	9303      	strlt	r3, [sp, #12]
 80035fe:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003602:	4bab      	ldr	r3, [pc, #684]	; (80038b0 <_dtoa_r+0x308>)
 8003604:	ea33 0309 	bics.w	r3, r3, r9
 8003608:	d11b      	bne.n	8003642 <_dtoa_r+0x9a>
 800360a:	f242 730f 	movw	r3, #9999	; 0x270f
 800360e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	9b02      	ldr	r3, [sp, #8]
 8003614:	b923      	cbnz	r3, 8003620 <_dtoa_r+0x78>
 8003616:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800361a:	2800      	cmp	r0, #0
 800361c:	f000 8583 	beq.w	8004126 <_dtoa_r+0xb7e>
 8003620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003622:	b953      	cbnz	r3, 800363a <_dtoa_r+0x92>
 8003624:	4ba3      	ldr	r3, [pc, #652]	; (80038b4 <_dtoa_r+0x30c>)
 8003626:	e021      	b.n	800366c <_dtoa_r+0xc4>
 8003628:	4ba3      	ldr	r3, [pc, #652]	; (80038b8 <_dtoa_r+0x310>)
 800362a:	9306      	str	r3, [sp, #24]
 800362c:	3308      	adds	r3, #8
 800362e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	9806      	ldr	r0, [sp, #24]
 8003634:	b015      	add	sp, #84	; 0x54
 8003636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363a:	4b9e      	ldr	r3, [pc, #632]	; (80038b4 <_dtoa_r+0x30c>)
 800363c:	9306      	str	r3, [sp, #24]
 800363e:	3303      	adds	r3, #3
 8003640:	e7f5      	b.n	800362e <_dtoa_r+0x86>
 8003642:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	2300      	movs	r3, #0
 800364a:	4630      	mov	r0, r6
 800364c:	4639      	mov	r1, r7
 800364e:	f7fd f9bf 	bl	80009d0 <__aeabi_dcmpeq>
 8003652:	4680      	mov	r8, r0
 8003654:	b160      	cbz	r0, 8003670 <_dtoa_r+0xc8>
 8003656:	2301      	movs	r3, #1
 8003658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 855e 	beq.w	8004120 <_dtoa_r+0xb78>
 8003664:	4b95      	ldr	r3, [pc, #596]	; (80038bc <_dtoa_r+0x314>)
 8003666:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	3b01      	subs	r3, #1
 800366c:	9306      	str	r3, [sp, #24]
 800366e:	e7e0      	b.n	8003632 <_dtoa_r+0x8a>
 8003670:	ab12      	add	r3, sp, #72	; 0x48
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	ab13      	add	r3, sp, #76	; 0x4c
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4632      	mov	r2, r6
 800367a:	463b      	mov	r3, r7
 800367c:	4620      	mov	r0, r4
 800367e:	f001 f80d 	bl	800469c <__d2b>
 8003682:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003686:	4682      	mov	sl, r0
 8003688:	2d00      	cmp	r5, #0
 800368a:	d07d      	beq.n	8003788 <_dtoa_r+0x1e0>
 800368c:	4630      	mov	r0, r6
 800368e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003692:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003696:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800369a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800369e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b86      	ldr	r3, [pc, #536]	; (80038c0 <_dtoa_r+0x318>)
 80036a6:	f7fc fd77 	bl	8000198 <__aeabi_dsub>
 80036aa:	a37b      	add	r3, pc, #492	; (adr r3, 8003898 <_dtoa_r+0x2f0>)
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f7fc ff26 	bl	8000500 <__aeabi_dmul>
 80036b4:	a37a      	add	r3, pc, #488	; (adr r3, 80038a0 <_dtoa_r+0x2f8>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f7fc fd6f 	bl	800019c <__adddf3>
 80036be:	4606      	mov	r6, r0
 80036c0:	4628      	mov	r0, r5
 80036c2:	460f      	mov	r7, r1
 80036c4:	f7fc feb6 	bl	8000434 <__aeabi_i2d>
 80036c8:	a377      	add	r3, pc, #476	; (adr r3, 80038a8 <_dtoa_r+0x300>)
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f7fc ff17 	bl	8000500 <__aeabi_dmul>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4630      	mov	r0, r6
 80036d8:	4639      	mov	r1, r7
 80036da:	f7fc fd5f 	bl	800019c <__adddf3>
 80036de:	4606      	mov	r6, r0
 80036e0:	460f      	mov	r7, r1
 80036e2:	f7fd f9bd 	bl	8000a60 <__aeabi_d2iz>
 80036e6:	2200      	movs	r2, #0
 80036e8:	4683      	mov	fp, r0
 80036ea:	2300      	movs	r3, #0
 80036ec:	4630      	mov	r0, r6
 80036ee:	4639      	mov	r1, r7
 80036f0:	f7fd f978 	bl	80009e4 <__aeabi_dcmplt>
 80036f4:	b158      	cbz	r0, 800370e <_dtoa_r+0x166>
 80036f6:	4658      	mov	r0, fp
 80036f8:	f7fc fe9c 	bl	8000434 <__aeabi_i2d>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4630      	mov	r0, r6
 8003702:	4639      	mov	r1, r7
 8003704:	f7fd f964 	bl	80009d0 <__aeabi_dcmpeq>
 8003708:	b908      	cbnz	r0, 800370e <_dtoa_r+0x166>
 800370a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800370e:	f1bb 0f16 	cmp.w	fp, #22
 8003712:	d858      	bhi.n	80037c6 <_dtoa_r+0x21e>
 8003714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003718:	496a      	ldr	r1, [pc, #424]	; (80038c4 <_dtoa_r+0x31c>)
 800371a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800371e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003722:	f7fd f97d 	bl	8000a20 <__aeabi_dcmpgt>
 8003726:	2800      	cmp	r0, #0
 8003728:	d04f      	beq.n	80037ca <_dtoa_r+0x222>
 800372a:	2300      	movs	r3, #0
 800372c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003730:	930d      	str	r3, [sp, #52]	; 0x34
 8003732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003734:	1b5d      	subs	r5, r3, r5
 8003736:	1e6b      	subs	r3, r5, #1
 8003738:	9307      	str	r3, [sp, #28]
 800373a:	bf43      	ittte	mi
 800373c:	2300      	movmi	r3, #0
 800373e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003742:	9307      	strmi	r3, [sp, #28]
 8003744:	f04f 0800 	movpl.w	r8, #0
 8003748:	f1bb 0f00 	cmp.w	fp, #0
 800374c:	db3f      	blt.n	80037ce <_dtoa_r+0x226>
 800374e:	9b07      	ldr	r3, [sp, #28]
 8003750:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003754:	445b      	add	r3, fp
 8003756:	9307      	str	r3, [sp, #28]
 8003758:	2300      	movs	r3, #0
 800375a:	9308      	str	r3, [sp, #32]
 800375c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800375e:	2b09      	cmp	r3, #9
 8003760:	f200 80b4 	bhi.w	80038cc <_dtoa_r+0x324>
 8003764:	2b05      	cmp	r3, #5
 8003766:	bfc4      	itt	gt
 8003768:	3b04      	subgt	r3, #4
 800376a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800376c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800376e:	bfc8      	it	gt
 8003770:	2600      	movgt	r6, #0
 8003772:	f1a3 0302 	sub.w	r3, r3, #2
 8003776:	bfd8      	it	le
 8003778:	2601      	movle	r6, #1
 800377a:	2b03      	cmp	r3, #3
 800377c:	f200 80b2 	bhi.w	80038e4 <_dtoa_r+0x33c>
 8003780:	e8df f003 	tbb	[pc, r3]
 8003784:	782d8684 	.word	0x782d8684
 8003788:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800378a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800378c:	441d      	add	r5, r3
 800378e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003792:	2b20      	cmp	r3, #32
 8003794:	dd11      	ble.n	80037ba <_dtoa_r+0x212>
 8003796:	9a02      	ldr	r2, [sp, #8]
 8003798:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800379c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80037a0:	fa22 f000 	lsr.w	r0, r2, r0
 80037a4:	fa09 f303 	lsl.w	r3, r9, r3
 80037a8:	4318      	orrs	r0, r3
 80037aa:	f7fc fe33 	bl	8000414 <__aeabi_ui2d>
 80037ae:	2301      	movs	r3, #1
 80037b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80037b4:	3d01      	subs	r5, #1
 80037b6:	9310      	str	r3, [sp, #64]	; 0x40
 80037b8:	e773      	b.n	80036a2 <_dtoa_r+0xfa>
 80037ba:	f1c3 0020 	rsb	r0, r3, #32
 80037be:	9b02      	ldr	r3, [sp, #8]
 80037c0:	fa03 f000 	lsl.w	r0, r3, r0
 80037c4:	e7f1      	b.n	80037aa <_dtoa_r+0x202>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e7b2      	b.n	8003730 <_dtoa_r+0x188>
 80037ca:	900d      	str	r0, [sp, #52]	; 0x34
 80037cc:	e7b1      	b.n	8003732 <_dtoa_r+0x18a>
 80037ce:	f1cb 0300 	rsb	r3, fp, #0
 80037d2:	9308      	str	r3, [sp, #32]
 80037d4:	2300      	movs	r3, #0
 80037d6:	eba8 080b 	sub.w	r8, r8, fp
 80037da:	930c      	str	r3, [sp, #48]	; 0x30
 80037dc:	e7be      	b.n	800375c <_dtoa_r+0x1b4>
 80037de:	2301      	movs	r3, #1
 80037e0:	9309      	str	r3, [sp, #36]	; 0x24
 80037e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f340 8080 	ble.w	80038ea <_dtoa_r+0x342>
 80037ea:	4699      	mov	r9, r3
 80037ec:	9304      	str	r3, [sp, #16]
 80037ee:	2200      	movs	r2, #0
 80037f0:	2104      	movs	r1, #4
 80037f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80037f4:	606a      	str	r2, [r5, #4]
 80037f6:	f101 0214 	add.w	r2, r1, #20
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d97a      	bls.n	80038f4 <_dtoa_r+0x34c>
 80037fe:	6869      	ldr	r1, [r5, #4]
 8003800:	4620      	mov	r0, r4
 8003802:	f000 fcc9 	bl	8004198 <_Balloc>
 8003806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003808:	6028      	str	r0, [r5, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1b9 0f0e 	cmp.w	r9, #14
 8003810:	9306      	str	r3, [sp, #24]
 8003812:	f200 80f0 	bhi.w	80039f6 <_dtoa_r+0x44e>
 8003816:	2e00      	cmp	r6, #0
 8003818:	f000 80ed 	beq.w	80039f6 <_dtoa_r+0x44e>
 800381c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003820:	f1bb 0f00 	cmp.w	fp, #0
 8003824:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003828:	dd79      	ble.n	800391e <_dtoa_r+0x376>
 800382a:	4a26      	ldr	r2, [pc, #152]	; (80038c4 <_dtoa_r+0x31c>)
 800382c:	f00b 030f 	and.w	r3, fp, #15
 8003830:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003834:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003838:	06f0      	lsls	r0, r6, #27
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003842:	d55c      	bpl.n	80038fe <_dtoa_r+0x356>
 8003844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <_dtoa_r+0x320>)
 800384a:	2503      	movs	r5, #3
 800384c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003850:	f7fc ff80 	bl	8000754 <__aeabi_ddiv>
 8003854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003858:	f006 060f 	and.w	r6, r6, #15
 800385c:	4f1a      	ldr	r7, [pc, #104]	; (80038c8 <_dtoa_r+0x320>)
 800385e:	2e00      	cmp	r6, #0
 8003860:	d14f      	bne.n	8003902 <_dtoa_r+0x35a>
 8003862:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800386a:	f7fc ff73 	bl	8000754 <__aeabi_ddiv>
 800386e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003872:	e06e      	b.n	8003952 <_dtoa_r+0x3aa>
 8003874:	2301      	movs	r3, #1
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
 8003878:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800387a:	445b      	add	r3, fp
 800387c:	f103 0901 	add.w	r9, r3, #1
 8003880:	9304      	str	r3, [sp, #16]
 8003882:	464b      	mov	r3, r9
 8003884:	2b01      	cmp	r3, #1
 8003886:	bfb8      	it	lt
 8003888:	2301      	movlt	r3, #1
 800388a:	e7b0      	b.n	80037ee <_dtoa_r+0x246>
 800388c:	2300      	movs	r3, #0
 800388e:	e7a7      	b.n	80037e0 <_dtoa_r+0x238>
 8003890:	2300      	movs	r3, #0
 8003892:	e7f0      	b.n	8003876 <_dtoa_r+0x2ce>
 8003894:	f3af 8000 	nop.w
 8003898:	636f4361 	.word	0x636f4361
 800389c:	3fd287a7 	.word	0x3fd287a7
 80038a0:	8b60c8b3 	.word	0x8b60c8b3
 80038a4:	3fc68a28 	.word	0x3fc68a28
 80038a8:	509f79fb 	.word	0x509f79fb
 80038ac:	3fd34413 	.word	0x3fd34413
 80038b0:	7ff00000 	.word	0x7ff00000
 80038b4:	08004ce6 	.word	0x08004ce6
 80038b8:	08004cdd 	.word	0x08004cdd
 80038bc:	08004cba 	.word	0x08004cba
 80038c0:	3ff80000 	.word	0x3ff80000
 80038c4:	08004d18 	.word	0x08004d18
 80038c8:	08004cf0 	.word	0x08004cf0
 80038cc:	2601      	movs	r6, #1
 80038ce:	2300      	movs	r3, #0
 80038d0:	9609      	str	r6, [sp, #36]	; 0x24
 80038d2:	931e      	str	r3, [sp, #120]	; 0x78
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295
 80038d8:	2200      	movs	r2, #0
 80038da:	9304      	str	r3, [sp, #16]
 80038dc:	4699      	mov	r9, r3
 80038de:	2312      	movs	r3, #18
 80038e0:	921f      	str	r2, [sp, #124]	; 0x7c
 80038e2:	e784      	b.n	80037ee <_dtoa_r+0x246>
 80038e4:	2301      	movs	r3, #1
 80038e6:	9309      	str	r3, [sp, #36]	; 0x24
 80038e8:	e7f4      	b.n	80038d4 <_dtoa_r+0x32c>
 80038ea:	2301      	movs	r3, #1
 80038ec:	9304      	str	r3, [sp, #16]
 80038ee:	4699      	mov	r9, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	e7f5      	b.n	80038e0 <_dtoa_r+0x338>
 80038f4:	686a      	ldr	r2, [r5, #4]
 80038f6:	0049      	lsls	r1, r1, #1
 80038f8:	3201      	adds	r2, #1
 80038fa:	606a      	str	r2, [r5, #4]
 80038fc:	e77b      	b.n	80037f6 <_dtoa_r+0x24e>
 80038fe:	2502      	movs	r5, #2
 8003900:	e7ac      	b.n	800385c <_dtoa_r+0x2b4>
 8003902:	07f1      	lsls	r1, r6, #31
 8003904:	d508      	bpl.n	8003918 <_dtoa_r+0x370>
 8003906:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800390a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800390e:	f7fc fdf7 	bl	8000500 <__aeabi_dmul>
 8003912:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003916:	3501      	adds	r5, #1
 8003918:	1076      	asrs	r6, r6, #1
 800391a:	3708      	adds	r7, #8
 800391c:	e79f      	b.n	800385e <_dtoa_r+0x2b6>
 800391e:	f000 80a5 	beq.w	8003a6c <_dtoa_r+0x4c4>
 8003922:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003926:	f1cb 0600 	rsb	r6, fp, #0
 800392a:	4ba2      	ldr	r3, [pc, #648]	; (8003bb4 <_dtoa_r+0x60c>)
 800392c:	f006 020f 	and.w	r2, r6, #15
 8003930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fde2 	bl	8000500 <__aeabi_dmul>
 800393c:	2502      	movs	r5, #2
 800393e:	2300      	movs	r3, #0
 8003940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003944:	4f9c      	ldr	r7, [pc, #624]	; (8003bb8 <_dtoa_r+0x610>)
 8003946:	1136      	asrs	r6, r6, #4
 8003948:	2e00      	cmp	r6, #0
 800394a:	f040 8084 	bne.w	8003a56 <_dtoa_r+0x4ae>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d18d      	bne.n	800386e <_dtoa_r+0x2c6>
 8003952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 808b 	beq.w	8003a70 <_dtoa_r+0x4c8>
 800395a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800395e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003962:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003966:	2200      	movs	r2, #0
 8003968:	4b94      	ldr	r3, [pc, #592]	; (8003bbc <_dtoa_r+0x614>)
 800396a:	f7fd f83b 	bl	80009e4 <__aeabi_dcmplt>
 800396e:	2800      	cmp	r0, #0
 8003970:	d07e      	beq.n	8003a70 <_dtoa_r+0x4c8>
 8003972:	f1b9 0f00 	cmp.w	r9, #0
 8003976:	d07b      	beq.n	8003a70 <_dtoa_r+0x4c8>
 8003978:	9b04      	ldr	r3, [sp, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	dd37      	ble.n	80039ee <_dtoa_r+0x446>
 800397e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003982:	2200      	movs	r2, #0
 8003984:	4b8e      	ldr	r3, [pc, #568]	; (8003bc0 <_dtoa_r+0x618>)
 8003986:	f7fc fdbb 	bl	8000500 <__aeabi_dmul>
 800398a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800398e:	9e04      	ldr	r6, [sp, #16]
 8003990:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003994:	3501      	adds	r5, #1
 8003996:	4628      	mov	r0, r5
 8003998:	f7fc fd4c 	bl	8000434 <__aeabi_i2d>
 800399c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039a0:	f7fc fdae 	bl	8000500 <__aeabi_dmul>
 80039a4:	4b87      	ldr	r3, [pc, #540]	; (8003bc4 <_dtoa_r+0x61c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	f7fc fbf8 	bl	800019c <__adddf3>
 80039ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039b2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80039b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80039b8:	2e00      	cmp	r6, #0
 80039ba:	d15c      	bne.n	8003a76 <_dtoa_r+0x4ce>
 80039bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039c0:	2200      	movs	r2, #0
 80039c2:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <_dtoa_r+0x620>)
 80039c4:	f7fc fbe8 	bl	8000198 <__aeabi_dsub>
 80039c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039ca:	462b      	mov	r3, r5
 80039cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039d0:	f7fd f826 	bl	8000a20 <__aeabi_dcmpgt>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	f040 82f7 	bne.w	8003fc8 <_dtoa_r+0xa20>
 80039da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80039e4:	f7fc fffe 	bl	80009e4 <__aeabi_dcmplt>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	f040 82eb 	bne.w	8003fc4 <_dtoa_r+0xa1c>
 80039ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80039f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f2c0 8150 	blt.w	8003c9e <_dtoa_r+0x6f6>
 80039fe:	f1bb 0f0e 	cmp.w	fp, #14
 8003a02:	f300 814c 	bgt.w	8003c9e <_dtoa_r+0x6f6>
 8003a06:	4b6b      	ldr	r3, [pc, #428]	; (8003bb4 <_dtoa_r+0x60c>)
 8003a08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f280 80da 	bge.w	8003bd0 <_dtoa_r+0x628>
 8003a1c:	f1b9 0f00 	cmp.w	r9, #0
 8003a20:	f300 80d6 	bgt.w	8003bd0 <_dtoa_r+0x628>
 8003a24:	f040 82cd 	bne.w	8003fc2 <_dtoa_r+0xa1a>
 8003a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <_dtoa_r+0x620>)
 8003a30:	f7fc fd66 	bl	8000500 <__aeabi_dmul>
 8003a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a38:	f7fc ffe8 	bl	8000a0c <__aeabi_dcmpge>
 8003a3c:	464e      	mov	r6, r9
 8003a3e:	464f      	mov	r7, r9
 8003a40:	2800      	cmp	r0, #0
 8003a42:	f040 82a4 	bne.w	8003f8e <_dtoa_r+0x9e6>
 8003a46:	9b06      	ldr	r3, [sp, #24]
 8003a48:	9a06      	ldr	r2, [sp, #24]
 8003a4a:	1c5d      	adds	r5, r3, #1
 8003a4c:	2331      	movs	r3, #49	; 0x31
 8003a4e:	f10b 0b01 	add.w	fp, fp, #1
 8003a52:	7013      	strb	r3, [r2, #0]
 8003a54:	e29f      	b.n	8003f96 <_dtoa_r+0x9ee>
 8003a56:	07f2      	lsls	r2, r6, #31
 8003a58:	d505      	bpl.n	8003a66 <_dtoa_r+0x4be>
 8003a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a5e:	f7fc fd4f 	bl	8000500 <__aeabi_dmul>
 8003a62:	2301      	movs	r3, #1
 8003a64:	3501      	adds	r5, #1
 8003a66:	1076      	asrs	r6, r6, #1
 8003a68:	3708      	adds	r7, #8
 8003a6a:	e76d      	b.n	8003948 <_dtoa_r+0x3a0>
 8003a6c:	2502      	movs	r5, #2
 8003a6e:	e770      	b.n	8003952 <_dtoa_r+0x3aa>
 8003a70:	465f      	mov	r7, fp
 8003a72:	464e      	mov	r6, r9
 8003a74:	e78f      	b.n	8003996 <_dtoa_r+0x3ee>
 8003a76:	9a06      	ldr	r2, [sp, #24]
 8003a78:	4b4e      	ldr	r3, [pc, #312]	; (8003bb4 <_dtoa_r+0x60c>)
 8003a7a:	4432      	add	r2, r6
 8003a7c:	9211      	str	r2, [sp, #68]	; 0x44
 8003a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a80:	1e71      	subs	r1, r6, #1
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	d048      	beq.n	8003b18 <_dtoa_r+0x570>
 8003a86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	2000      	movs	r0, #0
 8003a90:	494e      	ldr	r1, [pc, #312]	; (8003bcc <_dtoa_r+0x624>)
 8003a92:	f7fc fe5f 	bl	8000754 <__aeabi_ddiv>
 8003a96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a9a:	f7fc fb7d 	bl	8000198 <__aeabi_dsub>
 8003a9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003aa2:	9d06      	ldr	r5, [sp, #24]
 8003aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aa8:	f7fc ffda 	bl	8000a60 <__aeabi_d2iz>
 8003aac:	4606      	mov	r6, r0
 8003aae:	f7fc fcc1 	bl	8000434 <__aeabi_i2d>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aba:	f7fc fb6d 	bl	8000198 <__aeabi_dsub>
 8003abe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ac2:	3630      	adds	r6, #48	; 0x30
 8003ac4:	f805 6b01 	strb.w	r6, [r5], #1
 8003ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003acc:	f7fc ff8a 	bl	80009e4 <__aeabi_dcmplt>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d164      	bne.n	8003b9e <_dtoa_r+0x5f6>
 8003ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ad8:	2000      	movs	r0, #0
 8003ada:	4938      	ldr	r1, [pc, #224]	; (8003bbc <_dtoa_r+0x614>)
 8003adc:	f7fc fb5c 	bl	8000198 <__aeabi_dsub>
 8003ae0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ae4:	f7fc ff7e 	bl	80009e4 <__aeabi_dcmplt>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	f040 80b9 	bne.w	8003c60 <_dtoa_r+0x6b8>
 8003aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003af0:	429d      	cmp	r5, r3
 8003af2:	f43f af7c 	beq.w	80039ee <_dtoa_r+0x446>
 8003af6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003afa:	2200      	movs	r2, #0
 8003afc:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <_dtoa_r+0x618>)
 8003afe:	f7fc fcff 	bl	8000500 <__aeabi_dmul>
 8003b02:	2200      	movs	r2, #0
 8003b04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b0c:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <_dtoa_r+0x618>)
 8003b0e:	f7fc fcf7 	bl	8000500 <__aeabi_dmul>
 8003b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b16:	e7c5      	b.n	8003aa4 <_dtoa_r+0x4fc>
 8003b18:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b24:	f7fc fcec 	bl	8000500 <__aeabi_dmul>
 8003b28:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b2c:	9d06      	ldr	r5, [sp, #24]
 8003b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b32:	f7fc ff95 	bl	8000a60 <__aeabi_d2iz>
 8003b36:	4606      	mov	r6, r0
 8003b38:	f7fc fc7c 	bl	8000434 <__aeabi_i2d>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b44:	f7fc fb28 	bl	8000198 <__aeabi_dsub>
 8003b48:	3630      	adds	r6, #48	; 0x30
 8003b4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8003b50:	42ab      	cmp	r3, r5
 8003b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	d124      	bne.n	8003ba6 <_dtoa_r+0x5fe>
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <_dtoa_r+0x624>)
 8003b5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b62:	f7fc fb1b 	bl	800019c <__adddf3>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b6e:	f7fc ff57 	bl	8000a20 <__aeabi_dcmpgt>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d174      	bne.n	8003c60 <_dtoa_r+0x6b8>
 8003b76:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	4913      	ldr	r1, [pc, #76]	; (8003bcc <_dtoa_r+0x624>)
 8003b7e:	f7fc fb0b 	bl	8000198 <__aeabi_dsub>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b8a:	f7fc ff2b 	bl	80009e4 <__aeabi_dcmplt>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	f43f af2d 	beq.w	80039ee <_dtoa_r+0x446>
 8003b94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003b98:	1e6a      	subs	r2, r5, #1
 8003b9a:	2b30      	cmp	r3, #48	; 0x30
 8003b9c:	d001      	beq.n	8003ba2 <_dtoa_r+0x5fa>
 8003b9e:	46bb      	mov	fp, r7
 8003ba0:	e04d      	b.n	8003c3e <_dtoa_r+0x696>
 8003ba2:	4615      	mov	r5, r2
 8003ba4:	e7f6      	b.n	8003b94 <_dtoa_r+0x5ec>
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <_dtoa_r+0x618>)
 8003ba8:	f7fc fcaa 	bl	8000500 <__aeabi_dmul>
 8003bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bb0:	e7bd      	b.n	8003b2e <_dtoa_r+0x586>
 8003bb2:	bf00      	nop
 8003bb4:	08004d18 	.word	0x08004d18
 8003bb8:	08004cf0 	.word	0x08004cf0
 8003bbc:	3ff00000 	.word	0x3ff00000
 8003bc0:	40240000 	.word	0x40240000
 8003bc4:	401c0000 	.word	0x401c0000
 8003bc8:	40140000 	.word	0x40140000
 8003bcc:	3fe00000 	.word	0x3fe00000
 8003bd0:	9d06      	ldr	r5, [sp, #24]
 8003bd2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003bd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bda:	4630      	mov	r0, r6
 8003bdc:	4639      	mov	r1, r7
 8003bde:	f7fc fdb9 	bl	8000754 <__aeabi_ddiv>
 8003be2:	f7fc ff3d 	bl	8000a60 <__aeabi_d2iz>
 8003be6:	4680      	mov	r8, r0
 8003be8:	f7fc fc24 	bl	8000434 <__aeabi_i2d>
 8003bec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bf0:	f7fc fc86 	bl	8000500 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	4639      	mov	r1, r7
 8003bfc:	f7fc facc 	bl	8000198 <__aeabi_dsub>
 8003c00:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003c04:	f805 6b01 	strb.w	r6, [r5], #1
 8003c08:	9e06      	ldr	r6, [sp, #24]
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	1bae      	subs	r6, r5, r6
 8003c0e:	45b1      	cmp	r9, r6
 8003c10:	460b      	mov	r3, r1
 8003c12:	d137      	bne.n	8003c84 <_dtoa_r+0x6dc>
 8003c14:	f7fc fac2 	bl	800019c <__adddf3>
 8003c18:	4606      	mov	r6, r0
 8003c1a:	460f      	mov	r7, r1
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c24:	f7fc fede 	bl	80009e4 <__aeabi_dcmplt>
 8003c28:	b9c8      	cbnz	r0, 8003c5e <_dtoa_r+0x6b6>
 8003c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c2e:	4632      	mov	r2, r6
 8003c30:	463b      	mov	r3, r7
 8003c32:	f7fc fecd 	bl	80009d0 <__aeabi_dcmpeq>
 8003c36:	b110      	cbz	r0, 8003c3e <_dtoa_r+0x696>
 8003c38:	f018 0f01 	tst.w	r8, #1
 8003c3c:	d10f      	bne.n	8003c5e <_dtoa_r+0x6b6>
 8003c3e:	4651      	mov	r1, sl
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 fadd 	bl	8004200 <_Bfree>
 8003c46:	2300      	movs	r3, #0
 8003c48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c4a:	702b      	strb	r3, [r5, #0]
 8003c4c:	f10b 0301 	add.w	r3, fp, #1
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f43f acec 	beq.w	8003632 <_dtoa_r+0x8a>
 8003c5a:	601d      	str	r5, [r3, #0]
 8003c5c:	e4e9      	b.n	8003632 <_dtoa_r+0x8a>
 8003c5e:	465f      	mov	r7, fp
 8003c60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003c64:	1e6b      	subs	r3, r5, #1
 8003c66:	2a39      	cmp	r2, #57	; 0x39
 8003c68:	d106      	bne.n	8003c78 <_dtoa_r+0x6d0>
 8003c6a:	9a06      	ldr	r2, [sp, #24]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d107      	bne.n	8003c80 <_dtoa_r+0x6d8>
 8003c70:	2330      	movs	r3, #48	; 0x30
 8003c72:	7013      	strb	r3, [r2, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	3701      	adds	r7, #1
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	3201      	adds	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e78e      	b.n	8003b9e <_dtoa_r+0x5f6>
 8003c80:	461d      	mov	r5, r3
 8003c82:	e7ed      	b.n	8003c60 <_dtoa_r+0x6b8>
 8003c84:	2200      	movs	r2, #0
 8003c86:	4bb5      	ldr	r3, [pc, #724]	; (8003f5c <_dtoa_r+0x9b4>)
 8003c88:	f7fc fc3a 	bl	8000500 <__aeabi_dmul>
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2300      	movs	r3, #0
 8003c90:	4606      	mov	r6, r0
 8003c92:	460f      	mov	r7, r1
 8003c94:	f7fc fe9c 	bl	80009d0 <__aeabi_dcmpeq>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d09c      	beq.n	8003bd6 <_dtoa_r+0x62e>
 8003c9c:	e7cf      	b.n	8003c3e <_dtoa_r+0x696>
 8003c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca0:	2a00      	cmp	r2, #0
 8003ca2:	f000 8129 	beq.w	8003ef8 <_dtoa_r+0x950>
 8003ca6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ca8:	2a01      	cmp	r2, #1
 8003caa:	f300 810e 	bgt.w	8003eca <_dtoa_r+0x922>
 8003cae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	f000 8106 	beq.w	8003ec2 <_dtoa_r+0x91a>
 8003cb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003cba:	4645      	mov	r5, r8
 8003cbc:	9e08      	ldr	r6, [sp, #32]
 8003cbe:	9a07      	ldr	r2, [sp, #28]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	441a      	add	r2, r3
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4498      	add	r8, r3
 8003cc8:	9207      	str	r2, [sp, #28]
 8003cca:	f000 fb39 	bl	8004340 <__i2b>
 8003cce:	4607      	mov	r7, r0
 8003cd0:	2d00      	cmp	r5, #0
 8003cd2:	dd0b      	ble.n	8003cec <_dtoa_r+0x744>
 8003cd4:	9b07      	ldr	r3, [sp, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	dd08      	ble.n	8003cec <_dtoa_r+0x744>
 8003cda:	42ab      	cmp	r3, r5
 8003cdc:	bfa8      	it	ge
 8003cde:	462b      	movge	r3, r5
 8003ce0:	9a07      	ldr	r2, [sp, #28]
 8003ce2:	eba8 0803 	sub.w	r8, r8, r3
 8003ce6:	1aed      	subs	r5, r5, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	9307      	str	r3, [sp, #28]
 8003cec:	9b08      	ldr	r3, [sp, #32]
 8003cee:	b1fb      	cbz	r3, 8003d30 <_dtoa_r+0x788>
 8003cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8104 	beq.w	8003f00 <_dtoa_r+0x958>
 8003cf8:	2e00      	cmp	r6, #0
 8003cfa:	dd11      	ble.n	8003d20 <_dtoa_r+0x778>
 8003cfc:	4639      	mov	r1, r7
 8003cfe:	4632      	mov	r2, r6
 8003d00:	4620      	mov	r0, r4
 8003d02:	f000 fbb3 	bl	800446c <__pow5mult>
 8003d06:	4652      	mov	r2, sl
 8003d08:	4601      	mov	r1, r0
 8003d0a:	4607      	mov	r7, r0
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f000 fb20 	bl	8004352 <__multiply>
 8003d12:	4651      	mov	r1, sl
 8003d14:	900a      	str	r0, [sp, #40]	; 0x28
 8003d16:	4620      	mov	r0, r4
 8003d18:	f000 fa72 	bl	8004200 <_Bfree>
 8003d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1e:	469a      	mov	sl, r3
 8003d20:	9b08      	ldr	r3, [sp, #32]
 8003d22:	1b9a      	subs	r2, r3, r6
 8003d24:	d004      	beq.n	8003d30 <_dtoa_r+0x788>
 8003d26:	4651      	mov	r1, sl
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f000 fb9f 	bl	800446c <__pow5mult>
 8003d2e:	4682      	mov	sl, r0
 8003d30:	2101      	movs	r1, #1
 8003d32:	4620      	mov	r0, r4
 8003d34:	f000 fb04 	bl	8004340 <__i2b>
 8003d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f340 80e1 	ble.w	8003f04 <_dtoa_r+0x95c>
 8003d42:	461a      	mov	r2, r3
 8003d44:	4601      	mov	r1, r0
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 fb90 	bl	800446c <__pow5mult>
 8003d4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d4e:	4606      	mov	r6, r0
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	f340 80da 	ble.w	8003f0a <_dtoa_r+0x962>
 8003d56:	2300      	movs	r3, #0
 8003d58:	9308      	str	r3, [sp, #32]
 8003d5a:	6933      	ldr	r3, [r6, #16]
 8003d5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003d60:	6918      	ldr	r0, [r3, #16]
 8003d62:	f000 fa9f 	bl	80042a4 <__hi0bits>
 8003d66:	f1c0 0020 	rsb	r0, r0, #32
 8003d6a:	9b07      	ldr	r3, [sp, #28]
 8003d6c:	4418      	add	r0, r3
 8003d6e:	f010 001f 	ands.w	r0, r0, #31
 8003d72:	f000 80f0 	beq.w	8003f56 <_dtoa_r+0x9ae>
 8003d76:	f1c0 0320 	rsb	r3, r0, #32
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	f340 80e2 	ble.w	8003f44 <_dtoa_r+0x99c>
 8003d80:	9b07      	ldr	r3, [sp, #28]
 8003d82:	f1c0 001c 	rsb	r0, r0, #28
 8003d86:	4480      	add	r8, r0
 8003d88:	4405      	add	r5, r0
 8003d8a:	4403      	add	r3, r0
 8003d8c:	9307      	str	r3, [sp, #28]
 8003d8e:	f1b8 0f00 	cmp.w	r8, #0
 8003d92:	dd05      	ble.n	8003da0 <_dtoa_r+0x7f8>
 8003d94:	4651      	mov	r1, sl
 8003d96:	4642      	mov	r2, r8
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 fbb5 	bl	8004508 <__lshift>
 8003d9e:	4682      	mov	sl, r0
 8003da0:	9b07      	ldr	r3, [sp, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dd05      	ble.n	8003db2 <_dtoa_r+0x80a>
 8003da6:	4631      	mov	r1, r6
 8003da8:	461a      	mov	r2, r3
 8003daa:	4620      	mov	r0, r4
 8003dac:	f000 fbac 	bl	8004508 <__lshift>
 8003db0:	4606      	mov	r6, r0
 8003db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80d3 	beq.w	8003f60 <_dtoa_r+0x9b8>
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4650      	mov	r0, sl
 8003dbe:	f000 fbf4 	bl	80045aa <__mcmp>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	f280 80cc 	bge.w	8003f60 <_dtoa_r+0x9b8>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4651      	mov	r1, sl
 8003dcc:	220a      	movs	r2, #10
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f000 fa2d 	bl	800422e <__multadd>
 8003dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003dda:	4682      	mov	sl, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 81a9 	beq.w	8004134 <_dtoa_r+0xb8c>
 8003de2:	2300      	movs	r3, #0
 8003de4:	4639      	mov	r1, r7
 8003de6:	220a      	movs	r2, #10
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 fa20 	bl	800422e <__multadd>
 8003dee:	9b04      	ldr	r3, [sp, #16]
 8003df0:	4607      	mov	r7, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	dc03      	bgt.n	8003dfe <_dtoa_r+0x856>
 8003df6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	f300 80b9 	bgt.w	8003f70 <_dtoa_r+0x9c8>
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	dd05      	ble.n	8003e0e <_dtoa_r+0x866>
 8003e02:	4639      	mov	r1, r7
 8003e04:	462a      	mov	r2, r5
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 fb7e 	bl	8004508 <__lshift>
 8003e0c:	4607      	mov	r7, r0
 8003e0e:	9b08      	ldr	r3, [sp, #32]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8110 	beq.w	8004036 <_dtoa_r+0xa8e>
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f000 f9bd 	bl	8004198 <_Balloc>
 8003e1e:	4605      	mov	r5, r0
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	f107 010c 	add.w	r1, r7, #12
 8003e26:	3202      	adds	r2, #2
 8003e28:	0092      	lsls	r2, r2, #2
 8003e2a:	300c      	adds	r0, #12
 8003e2c:	f7fe fe96 	bl	8002b5c <memcpy>
 8003e30:	2201      	movs	r2, #1
 8003e32:	4629      	mov	r1, r5
 8003e34:	4620      	mov	r0, r4
 8003e36:	f000 fb67 	bl	8004508 <__lshift>
 8003e3a:	9707      	str	r7, [sp, #28]
 8003e3c:	4607      	mov	r7, r0
 8003e3e:	9b02      	ldr	r3, [sp, #8]
 8003e40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	9308      	str	r3, [sp, #32]
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	4650      	mov	r0, sl
 8003e4e:	f7ff fb1d 	bl	800348c <quorem>
 8003e52:	9907      	ldr	r1, [sp, #28]
 8003e54:	4605      	mov	r5, r0
 8003e56:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003e5a:	4650      	mov	r0, sl
 8003e5c:	f000 fba5 	bl	80045aa <__mcmp>
 8003e60:	463a      	mov	r2, r7
 8003e62:	9002      	str	r0, [sp, #8]
 8003e64:	4631      	mov	r1, r6
 8003e66:	4620      	mov	r0, r4
 8003e68:	f000 fbb9 	bl	80045de <__mdiff>
 8003e6c:	68c3      	ldr	r3, [r0, #12]
 8003e6e:	4602      	mov	r2, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 80e2 	bne.w	800403a <_dtoa_r+0xa92>
 8003e76:	4601      	mov	r1, r0
 8003e78:	9009      	str	r0, [sp, #36]	; 0x24
 8003e7a:	4650      	mov	r0, sl
 8003e7c:	f000 fb95 	bl	80045aa <__mcmp>
 8003e80:	4603      	mov	r3, r0
 8003e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e84:	4611      	mov	r1, r2
 8003e86:	4620      	mov	r0, r4
 8003e88:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8a:	f000 f9b9 	bl	8004200 <_Bfree>
 8003e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 80d4 	bne.w	800403e <_dtoa_r+0xa96>
 8003e96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003e98:	2a00      	cmp	r2, #0
 8003e9a:	f040 80d0 	bne.w	800403e <_dtoa_r+0xa96>
 8003e9e:	9a08      	ldr	r2, [sp, #32]
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	f040 80cc 	bne.w	800403e <_dtoa_r+0xa96>
 8003ea6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003eaa:	f000 80e8 	beq.w	800407e <_dtoa_r+0xad6>
 8003eae:	9b02      	ldr	r3, [sp, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	dd01      	ble.n	8003eb8 <_dtoa_r+0x910>
 8003eb4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003eb8:	f108 0501 	add.w	r5, r8, #1
 8003ebc:	f888 9000 	strb.w	r9, [r8]
 8003ec0:	e06b      	b.n	8003f9a <_dtoa_r+0x9f2>
 8003ec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ec4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003ec8:	e6f7      	b.n	8003cba <_dtoa_r+0x712>
 8003eca:	9b08      	ldr	r3, [sp, #32]
 8003ecc:	f109 36ff 	add.w	r6, r9, #4294967295
 8003ed0:	42b3      	cmp	r3, r6
 8003ed2:	bfb7      	itett	lt
 8003ed4:	9b08      	ldrlt	r3, [sp, #32]
 8003ed6:	1b9e      	subge	r6, r3, r6
 8003ed8:	1af2      	sublt	r2, r6, r3
 8003eda:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003edc:	bfbf      	itttt	lt
 8003ede:	9608      	strlt	r6, [sp, #32]
 8003ee0:	189b      	addlt	r3, r3, r2
 8003ee2:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003ee4:	2600      	movlt	r6, #0
 8003ee6:	f1b9 0f00 	cmp.w	r9, #0
 8003eea:	bfb9      	ittee	lt
 8003eec:	eba8 0509 	sublt.w	r5, r8, r9
 8003ef0:	2300      	movlt	r3, #0
 8003ef2:	4645      	movge	r5, r8
 8003ef4:	464b      	movge	r3, r9
 8003ef6:	e6e2      	b.n	8003cbe <_dtoa_r+0x716>
 8003ef8:	9e08      	ldr	r6, [sp, #32]
 8003efa:	4645      	mov	r5, r8
 8003efc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003efe:	e6e7      	b.n	8003cd0 <_dtoa_r+0x728>
 8003f00:	9a08      	ldr	r2, [sp, #32]
 8003f02:	e710      	b.n	8003d26 <_dtoa_r+0x77e>
 8003f04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	dc18      	bgt.n	8003f3c <_dtoa_r+0x994>
 8003f0a:	9b02      	ldr	r3, [sp, #8]
 8003f0c:	b9b3      	cbnz	r3, 8003f3c <_dtoa_r+0x994>
 8003f0e:	9b03      	ldr	r3, [sp, #12]
 8003f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f14:	b9a3      	cbnz	r3, 8003f40 <_dtoa_r+0x998>
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f1c:	0d1b      	lsrs	r3, r3, #20
 8003f1e:	051b      	lsls	r3, r3, #20
 8003f20:	b12b      	cbz	r3, 8003f2e <_dtoa_r+0x986>
 8003f22:	9b07      	ldr	r3, [sp, #28]
 8003f24:	f108 0801 	add.w	r8, r8, #1
 8003f28:	3301      	adds	r3, #1
 8003f2a:	9307      	str	r3, [sp, #28]
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	9308      	str	r3, [sp, #32]
 8003f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f47f af11 	bne.w	8003d5a <_dtoa_r+0x7b2>
 8003f38:	2001      	movs	r0, #1
 8003f3a:	e716      	b.n	8003d6a <_dtoa_r+0x7c2>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e7f6      	b.n	8003f2e <_dtoa_r+0x986>
 8003f40:	9b02      	ldr	r3, [sp, #8]
 8003f42:	e7f4      	b.n	8003f2e <_dtoa_r+0x986>
 8003f44:	f43f af23 	beq.w	8003d8e <_dtoa_r+0x7e6>
 8003f48:	9a07      	ldr	r2, [sp, #28]
 8003f4a:	331c      	adds	r3, #28
 8003f4c:	441a      	add	r2, r3
 8003f4e:	4498      	add	r8, r3
 8003f50:	441d      	add	r5, r3
 8003f52:	4613      	mov	r3, r2
 8003f54:	e71a      	b.n	8003d8c <_dtoa_r+0x7e4>
 8003f56:	4603      	mov	r3, r0
 8003f58:	e7f6      	b.n	8003f48 <_dtoa_r+0x9a0>
 8003f5a:	bf00      	nop
 8003f5c:	40240000 	.word	0x40240000
 8003f60:	f1b9 0f00 	cmp.w	r9, #0
 8003f64:	dc33      	bgt.n	8003fce <_dtoa_r+0xa26>
 8003f66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	dd30      	ble.n	8003fce <_dtoa_r+0xa26>
 8003f6c:	f8cd 9010 	str.w	r9, [sp, #16]
 8003f70:	9b04      	ldr	r3, [sp, #16]
 8003f72:	b963      	cbnz	r3, 8003f8e <_dtoa_r+0x9e6>
 8003f74:	4631      	mov	r1, r6
 8003f76:	2205      	movs	r2, #5
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 f958 	bl	800422e <__multadd>
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4606      	mov	r6, r0
 8003f82:	4650      	mov	r0, sl
 8003f84:	f000 fb11 	bl	80045aa <__mcmp>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f73f ad5c 	bgt.w	8003a46 <_dtoa_r+0x49e>
 8003f8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f90:	9d06      	ldr	r5, [sp, #24]
 8003f92:	ea6f 0b03 	mvn.w	fp, r3
 8003f96:	2300      	movs	r3, #0
 8003f98:	9307      	str	r3, [sp, #28]
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f000 f92f 	bl	8004200 <_Bfree>
 8003fa2:	2f00      	cmp	r7, #0
 8003fa4:	f43f ae4b 	beq.w	8003c3e <_dtoa_r+0x696>
 8003fa8:	9b07      	ldr	r3, [sp, #28]
 8003faa:	b12b      	cbz	r3, 8003fb8 <_dtoa_r+0xa10>
 8003fac:	42bb      	cmp	r3, r7
 8003fae:	d003      	beq.n	8003fb8 <_dtoa_r+0xa10>
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f000 f924 	bl	8004200 <_Bfree>
 8003fb8:	4639      	mov	r1, r7
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 f920 	bl	8004200 <_Bfree>
 8003fc0:	e63d      	b.n	8003c3e <_dtoa_r+0x696>
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	4637      	mov	r7, r6
 8003fc6:	e7e2      	b.n	8003f8e <_dtoa_r+0x9e6>
 8003fc8:	46bb      	mov	fp, r7
 8003fca:	4637      	mov	r7, r6
 8003fcc:	e53b      	b.n	8003a46 <_dtoa_r+0x49e>
 8003fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd0:	f8cd 9010 	str.w	r9, [sp, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f af12 	bne.w	8003dfe <_dtoa_r+0x856>
 8003fda:	9d06      	ldr	r5, [sp, #24]
 8003fdc:	4631      	mov	r1, r6
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f7ff fa54 	bl	800348c <quorem>
 8003fe4:	9b06      	ldr	r3, [sp, #24]
 8003fe6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003fea:	f805 9b01 	strb.w	r9, [r5], #1
 8003fee:	9a04      	ldr	r2, [sp, #16]
 8003ff0:	1aeb      	subs	r3, r5, r3
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	f300 8081 	bgt.w	80040fa <_dtoa_r+0xb52>
 8003ff8:	9b06      	ldr	r3, [sp, #24]
 8003ffa:	2a01      	cmp	r2, #1
 8003ffc:	bfac      	ite	ge
 8003ffe:	189b      	addge	r3, r3, r2
 8004000:	3301      	addlt	r3, #1
 8004002:	4698      	mov	r8, r3
 8004004:	2300      	movs	r3, #0
 8004006:	9307      	str	r3, [sp, #28]
 8004008:	4651      	mov	r1, sl
 800400a:	2201      	movs	r2, #1
 800400c:	4620      	mov	r0, r4
 800400e:	f000 fa7b 	bl	8004508 <__lshift>
 8004012:	4631      	mov	r1, r6
 8004014:	4682      	mov	sl, r0
 8004016:	f000 fac8 	bl	80045aa <__mcmp>
 800401a:	2800      	cmp	r0, #0
 800401c:	dc34      	bgt.n	8004088 <_dtoa_r+0xae0>
 800401e:	d102      	bne.n	8004026 <_dtoa_r+0xa7e>
 8004020:	f019 0f01 	tst.w	r9, #1
 8004024:	d130      	bne.n	8004088 <_dtoa_r+0xae0>
 8004026:	4645      	mov	r5, r8
 8004028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800402c:	1e6a      	subs	r2, r5, #1
 800402e:	2b30      	cmp	r3, #48	; 0x30
 8004030:	d1b3      	bne.n	8003f9a <_dtoa_r+0x9f2>
 8004032:	4615      	mov	r5, r2
 8004034:	e7f8      	b.n	8004028 <_dtoa_r+0xa80>
 8004036:	4638      	mov	r0, r7
 8004038:	e6ff      	b.n	8003e3a <_dtoa_r+0x892>
 800403a:	2301      	movs	r3, #1
 800403c:	e722      	b.n	8003e84 <_dtoa_r+0x8dc>
 800403e:	9a02      	ldr	r2, [sp, #8]
 8004040:	2a00      	cmp	r2, #0
 8004042:	db04      	blt.n	800404e <_dtoa_r+0xaa6>
 8004044:	d128      	bne.n	8004098 <_dtoa_r+0xaf0>
 8004046:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004048:	bb32      	cbnz	r2, 8004098 <_dtoa_r+0xaf0>
 800404a:	9a08      	ldr	r2, [sp, #32]
 800404c:	bb22      	cbnz	r2, 8004098 <_dtoa_r+0xaf0>
 800404e:	2b00      	cmp	r3, #0
 8004050:	f77f af32 	ble.w	8003eb8 <_dtoa_r+0x910>
 8004054:	4651      	mov	r1, sl
 8004056:	2201      	movs	r2, #1
 8004058:	4620      	mov	r0, r4
 800405a:	f000 fa55 	bl	8004508 <__lshift>
 800405e:	4631      	mov	r1, r6
 8004060:	4682      	mov	sl, r0
 8004062:	f000 faa2 	bl	80045aa <__mcmp>
 8004066:	2800      	cmp	r0, #0
 8004068:	dc05      	bgt.n	8004076 <_dtoa_r+0xace>
 800406a:	f47f af25 	bne.w	8003eb8 <_dtoa_r+0x910>
 800406e:	f019 0f01 	tst.w	r9, #1
 8004072:	f43f af21 	beq.w	8003eb8 <_dtoa_r+0x910>
 8004076:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800407a:	f47f af1b 	bne.w	8003eb4 <_dtoa_r+0x90c>
 800407e:	2339      	movs	r3, #57	; 0x39
 8004080:	f108 0801 	add.w	r8, r8, #1
 8004084:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004088:	4645      	mov	r5, r8
 800408a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800408e:	1e6a      	subs	r2, r5, #1
 8004090:	2b39      	cmp	r3, #57	; 0x39
 8004092:	d03a      	beq.n	800410a <_dtoa_r+0xb62>
 8004094:	3301      	adds	r3, #1
 8004096:	e03f      	b.n	8004118 <_dtoa_r+0xb70>
 8004098:	2b00      	cmp	r3, #0
 800409a:	f108 0501 	add.w	r5, r8, #1
 800409e:	dd05      	ble.n	80040ac <_dtoa_r+0xb04>
 80040a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80040a4:	d0eb      	beq.n	800407e <_dtoa_r+0xad6>
 80040a6:	f109 0901 	add.w	r9, r9, #1
 80040aa:	e707      	b.n	8003ebc <_dtoa_r+0x914>
 80040ac:	9b06      	ldr	r3, [sp, #24]
 80040ae:	9a04      	ldr	r2, [sp, #16]
 80040b0:	1aeb      	subs	r3, r5, r3
 80040b2:	4293      	cmp	r3, r2
 80040b4:	46a8      	mov	r8, r5
 80040b6:	f805 9c01 	strb.w	r9, [r5, #-1]
 80040ba:	d0a5      	beq.n	8004008 <_dtoa_r+0xa60>
 80040bc:	4651      	mov	r1, sl
 80040be:	2300      	movs	r3, #0
 80040c0:	220a      	movs	r2, #10
 80040c2:	4620      	mov	r0, r4
 80040c4:	f000 f8b3 	bl	800422e <__multadd>
 80040c8:	9b07      	ldr	r3, [sp, #28]
 80040ca:	4682      	mov	sl, r0
 80040cc:	42bb      	cmp	r3, r7
 80040ce:	f04f 020a 	mov.w	r2, #10
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	9907      	ldr	r1, [sp, #28]
 80040d8:	4620      	mov	r0, r4
 80040da:	d104      	bne.n	80040e6 <_dtoa_r+0xb3e>
 80040dc:	f000 f8a7 	bl	800422e <__multadd>
 80040e0:	9007      	str	r0, [sp, #28]
 80040e2:	4607      	mov	r7, r0
 80040e4:	e6b1      	b.n	8003e4a <_dtoa_r+0x8a2>
 80040e6:	f000 f8a2 	bl	800422e <__multadd>
 80040ea:	2300      	movs	r3, #0
 80040ec:	9007      	str	r0, [sp, #28]
 80040ee:	220a      	movs	r2, #10
 80040f0:	4639      	mov	r1, r7
 80040f2:	4620      	mov	r0, r4
 80040f4:	f000 f89b 	bl	800422e <__multadd>
 80040f8:	e7f3      	b.n	80040e2 <_dtoa_r+0xb3a>
 80040fa:	4651      	mov	r1, sl
 80040fc:	2300      	movs	r3, #0
 80040fe:	220a      	movs	r2, #10
 8004100:	4620      	mov	r0, r4
 8004102:	f000 f894 	bl	800422e <__multadd>
 8004106:	4682      	mov	sl, r0
 8004108:	e768      	b.n	8003fdc <_dtoa_r+0xa34>
 800410a:	9b06      	ldr	r3, [sp, #24]
 800410c:	4293      	cmp	r3, r2
 800410e:	d105      	bne.n	800411c <_dtoa_r+0xb74>
 8004110:	2331      	movs	r3, #49	; 0x31
 8004112:	9a06      	ldr	r2, [sp, #24]
 8004114:	f10b 0b01 	add.w	fp, fp, #1
 8004118:	7013      	strb	r3, [r2, #0]
 800411a:	e73e      	b.n	8003f9a <_dtoa_r+0x9f2>
 800411c:	4615      	mov	r5, r2
 800411e:	e7b4      	b.n	800408a <_dtoa_r+0xae2>
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <_dtoa_r+0xba0>)
 8004122:	f7ff baa3 	b.w	800366c <_dtoa_r+0xc4>
 8004126:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004128:	2b00      	cmp	r3, #0
 800412a:	f47f aa7d 	bne.w	8003628 <_dtoa_r+0x80>
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <_dtoa_r+0xba4>)
 8004130:	f7ff ba9c 	b.w	800366c <_dtoa_r+0xc4>
 8004134:	9b04      	ldr	r3, [sp, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f73f af4f 	bgt.w	8003fda <_dtoa_r+0xa32>
 800413c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800413e:	2b02      	cmp	r3, #2
 8004140:	f77f af4b 	ble.w	8003fda <_dtoa_r+0xa32>
 8004144:	e714      	b.n	8003f70 <_dtoa_r+0x9c8>
 8004146:	bf00      	nop
 8004148:	08004cb9 	.word	0x08004cb9
 800414c:	08004cdd 	.word	0x08004cdd

08004150 <_localeconv_r>:
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <_localeconv_r+0x14>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6a18      	ldr	r0, [r3, #32]
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <_localeconv_r+0x18>)
 8004158:	2800      	cmp	r0, #0
 800415a:	bf08      	it	eq
 800415c:	4618      	moveq	r0, r3
 800415e:	30f0      	adds	r0, #240	; 0xf0
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000014 	.word	0x20000014
 8004168:	20000078 	.word	0x20000078

0800416c <malloc>:
 800416c:	4b02      	ldr	r3, [pc, #8]	; (8004178 <malloc+0xc>)
 800416e:	4601      	mov	r1, r0
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	f000 bb3d 	b.w	80047f0 <_malloc_r>
 8004176:	bf00      	nop
 8004178:	20000014 	.word	0x20000014

0800417c <memchr>:
 800417c:	b510      	push	{r4, lr}
 800417e:	b2c9      	uxtb	r1, r1
 8004180:	4402      	add	r2, r0
 8004182:	4290      	cmp	r0, r2
 8004184:	4603      	mov	r3, r0
 8004186:	d101      	bne.n	800418c <memchr+0x10>
 8004188:	2000      	movs	r0, #0
 800418a:	bd10      	pop	{r4, pc}
 800418c:	781c      	ldrb	r4, [r3, #0]
 800418e:	3001      	adds	r0, #1
 8004190:	428c      	cmp	r4, r1
 8004192:	d1f6      	bne.n	8004182 <memchr+0x6>
 8004194:	4618      	mov	r0, r3
 8004196:	bd10      	pop	{r4, pc}

08004198 <_Balloc>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800419c:	4604      	mov	r4, r0
 800419e:	460e      	mov	r6, r1
 80041a0:	b93d      	cbnz	r5, 80041b2 <_Balloc+0x1a>
 80041a2:	2010      	movs	r0, #16
 80041a4:	f7ff ffe2 	bl	800416c <malloc>
 80041a8:	6260      	str	r0, [r4, #36]	; 0x24
 80041aa:	6045      	str	r5, [r0, #4]
 80041ac:	6085      	str	r5, [r0, #8]
 80041ae:	6005      	str	r5, [r0, #0]
 80041b0:	60c5      	str	r5, [r0, #12]
 80041b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80041b4:	68eb      	ldr	r3, [r5, #12]
 80041b6:	b183      	cbz	r3, 80041da <_Balloc+0x42>
 80041b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80041c0:	b9b8      	cbnz	r0, 80041f2 <_Balloc+0x5a>
 80041c2:	2101      	movs	r1, #1
 80041c4:	fa01 f506 	lsl.w	r5, r1, r6
 80041c8:	1d6a      	adds	r2, r5, #5
 80041ca:	0092      	lsls	r2, r2, #2
 80041cc:	4620      	mov	r0, r4
 80041ce:	f000 fab4 	bl	800473a <_calloc_r>
 80041d2:	b160      	cbz	r0, 80041ee <_Balloc+0x56>
 80041d4:	6046      	str	r6, [r0, #4]
 80041d6:	6085      	str	r5, [r0, #8]
 80041d8:	e00e      	b.n	80041f8 <_Balloc+0x60>
 80041da:	2221      	movs	r2, #33	; 0x21
 80041dc:	2104      	movs	r1, #4
 80041de:	4620      	mov	r0, r4
 80041e0:	f000 faab 	bl	800473a <_calloc_r>
 80041e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041e6:	60e8      	str	r0, [r5, #12]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e4      	bne.n	80041b8 <_Balloc+0x20>
 80041ee:	2000      	movs	r0, #0
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	6802      	ldr	r2, [r0, #0]
 80041f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80041f8:	2300      	movs	r3, #0
 80041fa:	6103      	str	r3, [r0, #16]
 80041fc:	60c3      	str	r3, [r0, #12]
 80041fe:	bd70      	pop	{r4, r5, r6, pc}

08004200 <_Bfree>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004204:	4606      	mov	r6, r0
 8004206:	460d      	mov	r5, r1
 8004208:	b93c      	cbnz	r4, 800421a <_Bfree+0x1a>
 800420a:	2010      	movs	r0, #16
 800420c:	f7ff ffae 	bl	800416c <malloc>
 8004210:	6270      	str	r0, [r6, #36]	; 0x24
 8004212:	6044      	str	r4, [r0, #4]
 8004214:	6084      	str	r4, [r0, #8]
 8004216:	6004      	str	r4, [r0, #0]
 8004218:	60c4      	str	r4, [r0, #12]
 800421a:	b13d      	cbz	r5, 800422c <_Bfree+0x2c>
 800421c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800421e:	686a      	ldr	r2, [r5, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004226:	6029      	str	r1, [r5, #0]
 8004228:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800422c:	bd70      	pop	{r4, r5, r6, pc}

0800422e <__multadd>:
 800422e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004232:	461f      	mov	r7, r3
 8004234:	4606      	mov	r6, r0
 8004236:	460c      	mov	r4, r1
 8004238:	2300      	movs	r3, #0
 800423a:	690d      	ldr	r5, [r1, #16]
 800423c:	f101 0e14 	add.w	lr, r1, #20
 8004240:	f8de 0000 	ldr.w	r0, [lr]
 8004244:	3301      	adds	r3, #1
 8004246:	b281      	uxth	r1, r0
 8004248:	fb02 7101 	mla	r1, r2, r1, r7
 800424c:	0c00      	lsrs	r0, r0, #16
 800424e:	0c0f      	lsrs	r7, r1, #16
 8004250:	fb02 7000 	mla	r0, r2, r0, r7
 8004254:	b289      	uxth	r1, r1
 8004256:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800425a:	429d      	cmp	r5, r3
 800425c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004260:	f84e 1b04 	str.w	r1, [lr], #4
 8004264:	dcec      	bgt.n	8004240 <__multadd+0x12>
 8004266:	b1d7      	cbz	r7, 800429e <__multadd+0x70>
 8004268:	68a3      	ldr	r3, [r4, #8]
 800426a:	429d      	cmp	r5, r3
 800426c:	db12      	blt.n	8004294 <__multadd+0x66>
 800426e:	6861      	ldr	r1, [r4, #4]
 8004270:	4630      	mov	r0, r6
 8004272:	3101      	adds	r1, #1
 8004274:	f7ff ff90 	bl	8004198 <_Balloc>
 8004278:	4680      	mov	r8, r0
 800427a:	6922      	ldr	r2, [r4, #16]
 800427c:	f104 010c 	add.w	r1, r4, #12
 8004280:	3202      	adds	r2, #2
 8004282:	0092      	lsls	r2, r2, #2
 8004284:	300c      	adds	r0, #12
 8004286:	f7fe fc69 	bl	8002b5c <memcpy>
 800428a:	4621      	mov	r1, r4
 800428c:	4630      	mov	r0, r6
 800428e:	f7ff ffb7 	bl	8004200 <_Bfree>
 8004292:	4644      	mov	r4, r8
 8004294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004298:	3501      	adds	r5, #1
 800429a:	615f      	str	r7, [r3, #20]
 800429c:	6125      	str	r5, [r4, #16]
 800429e:	4620      	mov	r0, r4
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080042a4 <__hi0bits>:
 80042a4:	0c02      	lsrs	r2, r0, #16
 80042a6:	0412      	lsls	r2, r2, #16
 80042a8:	4603      	mov	r3, r0
 80042aa:	b9b2      	cbnz	r2, 80042da <__hi0bits+0x36>
 80042ac:	0403      	lsls	r3, r0, #16
 80042ae:	2010      	movs	r0, #16
 80042b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80042b4:	bf04      	itt	eq
 80042b6:	021b      	lsleq	r3, r3, #8
 80042b8:	3008      	addeq	r0, #8
 80042ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80042be:	bf04      	itt	eq
 80042c0:	011b      	lsleq	r3, r3, #4
 80042c2:	3004      	addeq	r0, #4
 80042c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80042c8:	bf04      	itt	eq
 80042ca:	009b      	lsleq	r3, r3, #2
 80042cc:	3002      	addeq	r0, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db06      	blt.n	80042e0 <__hi0bits+0x3c>
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	d503      	bpl.n	80042de <__hi0bits+0x3a>
 80042d6:	3001      	adds	r0, #1
 80042d8:	4770      	bx	lr
 80042da:	2000      	movs	r0, #0
 80042dc:	e7e8      	b.n	80042b0 <__hi0bits+0xc>
 80042de:	2020      	movs	r0, #32
 80042e0:	4770      	bx	lr

080042e2 <__lo0bits>:
 80042e2:	6803      	ldr	r3, [r0, #0]
 80042e4:	4601      	mov	r1, r0
 80042e6:	f013 0207 	ands.w	r2, r3, #7
 80042ea:	d00b      	beq.n	8004304 <__lo0bits+0x22>
 80042ec:	07da      	lsls	r2, r3, #31
 80042ee:	d423      	bmi.n	8004338 <__lo0bits+0x56>
 80042f0:	0798      	lsls	r0, r3, #30
 80042f2:	bf49      	itett	mi
 80042f4:	085b      	lsrmi	r3, r3, #1
 80042f6:	089b      	lsrpl	r3, r3, #2
 80042f8:	2001      	movmi	r0, #1
 80042fa:	600b      	strmi	r3, [r1, #0]
 80042fc:	bf5c      	itt	pl
 80042fe:	600b      	strpl	r3, [r1, #0]
 8004300:	2002      	movpl	r0, #2
 8004302:	4770      	bx	lr
 8004304:	b298      	uxth	r0, r3
 8004306:	b9a8      	cbnz	r0, 8004334 <__lo0bits+0x52>
 8004308:	2010      	movs	r0, #16
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004310:	bf04      	itt	eq
 8004312:	0a1b      	lsreq	r3, r3, #8
 8004314:	3008      	addeq	r0, #8
 8004316:	071a      	lsls	r2, r3, #28
 8004318:	bf04      	itt	eq
 800431a:	091b      	lsreq	r3, r3, #4
 800431c:	3004      	addeq	r0, #4
 800431e:	079a      	lsls	r2, r3, #30
 8004320:	bf04      	itt	eq
 8004322:	089b      	lsreq	r3, r3, #2
 8004324:	3002      	addeq	r0, #2
 8004326:	07da      	lsls	r2, r3, #31
 8004328:	d402      	bmi.n	8004330 <__lo0bits+0x4e>
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	d006      	beq.n	800433c <__lo0bits+0x5a>
 800432e:	3001      	adds	r0, #1
 8004330:	600b      	str	r3, [r1, #0]
 8004332:	4770      	bx	lr
 8004334:	4610      	mov	r0, r2
 8004336:	e7e9      	b.n	800430c <__lo0bits+0x2a>
 8004338:	2000      	movs	r0, #0
 800433a:	4770      	bx	lr
 800433c:	2020      	movs	r0, #32
 800433e:	4770      	bx	lr

08004340 <__i2b>:
 8004340:	b510      	push	{r4, lr}
 8004342:	460c      	mov	r4, r1
 8004344:	2101      	movs	r1, #1
 8004346:	f7ff ff27 	bl	8004198 <_Balloc>
 800434a:	2201      	movs	r2, #1
 800434c:	6144      	str	r4, [r0, #20]
 800434e:	6102      	str	r2, [r0, #16]
 8004350:	bd10      	pop	{r4, pc}

08004352 <__multiply>:
 8004352:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004356:	4614      	mov	r4, r2
 8004358:	690a      	ldr	r2, [r1, #16]
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	4689      	mov	r9, r1
 800435e:	429a      	cmp	r2, r3
 8004360:	bfbe      	ittt	lt
 8004362:	460b      	movlt	r3, r1
 8004364:	46a1      	movlt	r9, r4
 8004366:	461c      	movlt	r4, r3
 8004368:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800436c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004370:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004374:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004378:	eb07 060a 	add.w	r6, r7, sl
 800437c:	429e      	cmp	r6, r3
 800437e:	bfc8      	it	gt
 8004380:	3101      	addgt	r1, #1
 8004382:	f7ff ff09 	bl	8004198 <_Balloc>
 8004386:	f100 0514 	add.w	r5, r0, #20
 800438a:	462b      	mov	r3, r5
 800438c:	2200      	movs	r2, #0
 800438e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004392:	4543      	cmp	r3, r8
 8004394:	d316      	bcc.n	80043c4 <__multiply+0x72>
 8004396:	f104 0214 	add.w	r2, r4, #20
 800439a:	f109 0114 	add.w	r1, r9, #20
 800439e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80043a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	9c01      	ldr	r4, [sp, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	4294      	cmp	r4, r2
 80043ae:	d80c      	bhi.n	80043ca <__multiply+0x78>
 80043b0:	2e00      	cmp	r6, #0
 80043b2:	dd03      	ble.n	80043bc <__multiply+0x6a>
 80043b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d054      	beq.n	8004466 <__multiply+0x114>
 80043bc:	6106      	str	r6, [r0, #16]
 80043be:	b003      	add	sp, #12
 80043c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c4:	f843 2b04 	str.w	r2, [r3], #4
 80043c8:	e7e3      	b.n	8004392 <__multiply+0x40>
 80043ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80043ce:	3204      	adds	r2, #4
 80043d0:	f1ba 0f00 	cmp.w	sl, #0
 80043d4:	d020      	beq.n	8004418 <__multiply+0xc6>
 80043d6:	46ae      	mov	lr, r5
 80043d8:	4689      	mov	r9, r1
 80043da:	f04f 0c00 	mov.w	ip, #0
 80043de:	f859 4b04 	ldr.w	r4, [r9], #4
 80043e2:	f8be b000 	ldrh.w	fp, [lr]
 80043e6:	b2a3      	uxth	r3, r4
 80043e8:	fb0a b303 	mla	r3, sl, r3, fp
 80043ec:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80043f0:	f8de 4000 	ldr.w	r4, [lr]
 80043f4:	4463      	add	r3, ip
 80043f6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80043fa:	fb0a c40b 	mla	r4, sl, fp, ip
 80043fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004402:	b29b      	uxth	r3, r3
 8004404:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004408:	454f      	cmp	r7, r9
 800440a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800440e:	f84e 3b04 	str.w	r3, [lr], #4
 8004412:	d8e4      	bhi.n	80043de <__multiply+0x8c>
 8004414:	f8ce c000 	str.w	ip, [lr]
 8004418:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800441c:	f1b9 0f00 	cmp.w	r9, #0
 8004420:	d01f      	beq.n	8004462 <__multiply+0x110>
 8004422:	46ae      	mov	lr, r5
 8004424:	468c      	mov	ip, r1
 8004426:	f04f 0a00 	mov.w	sl, #0
 800442a:	682b      	ldr	r3, [r5, #0]
 800442c:	f8bc 4000 	ldrh.w	r4, [ip]
 8004430:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004434:	b29b      	uxth	r3, r3
 8004436:	fb09 b404 	mla	r4, r9, r4, fp
 800443a:	44a2      	add	sl, r4
 800443c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004440:	f84e 3b04 	str.w	r3, [lr], #4
 8004444:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004448:	f8be 4000 	ldrh.w	r4, [lr]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	fb09 4303 	mla	r3, r9, r3, r4
 8004452:	4567      	cmp	r7, ip
 8004454:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800445c:	d8e6      	bhi.n	800442c <__multiply+0xda>
 800445e:	f8ce 3000 	str.w	r3, [lr]
 8004462:	3504      	adds	r5, #4
 8004464:	e7a0      	b.n	80043a8 <__multiply+0x56>
 8004466:	3e01      	subs	r6, #1
 8004468:	e7a2      	b.n	80043b0 <__multiply+0x5e>
	...

0800446c <__pow5mult>:
 800446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004470:	4615      	mov	r5, r2
 8004472:	f012 0203 	ands.w	r2, r2, #3
 8004476:	4606      	mov	r6, r0
 8004478:	460f      	mov	r7, r1
 800447a:	d007      	beq.n	800448c <__pow5mult+0x20>
 800447c:	4c21      	ldr	r4, [pc, #132]	; (8004504 <__pow5mult+0x98>)
 800447e:	3a01      	subs	r2, #1
 8004480:	2300      	movs	r3, #0
 8004482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004486:	f7ff fed2 	bl	800422e <__multadd>
 800448a:	4607      	mov	r7, r0
 800448c:	10ad      	asrs	r5, r5, #2
 800448e:	d035      	beq.n	80044fc <__pow5mult+0x90>
 8004490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004492:	b93c      	cbnz	r4, 80044a4 <__pow5mult+0x38>
 8004494:	2010      	movs	r0, #16
 8004496:	f7ff fe69 	bl	800416c <malloc>
 800449a:	6270      	str	r0, [r6, #36]	; 0x24
 800449c:	6044      	str	r4, [r0, #4]
 800449e:	6084      	str	r4, [r0, #8]
 80044a0:	6004      	str	r4, [r0, #0]
 80044a2:	60c4      	str	r4, [r0, #12]
 80044a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80044a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80044ac:	b94c      	cbnz	r4, 80044c2 <__pow5mult+0x56>
 80044ae:	f240 2171 	movw	r1, #625	; 0x271
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff ff44 	bl	8004340 <__i2b>
 80044b8:	2300      	movs	r3, #0
 80044ba:	4604      	mov	r4, r0
 80044bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80044c0:	6003      	str	r3, [r0, #0]
 80044c2:	f04f 0800 	mov.w	r8, #0
 80044c6:	07eb      	lsls	r3, r5, #31
 80044c8:	d50a      	bpl.n	80044e0 <__pow5mult+0x74>
 80044ca:	4639      	mov	r1, r7
 80044cc:	4622      	mov	r2, r4
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff ff3f 	bl	8004352 <__multiply>
 80044d4:	4681      	mov	r9, r0
 80044d6:	4639      	mov	r1, r7
 80044d8:	4630      	mov	r0, r6
 80044da:	f7ff fe91 	bl	8004200 <_Bfree>
 80044de:	464f      	mov	r7, r9
 80044e0:	106d      	asrs	r5, r5, #1
 80044e2:	d00b      	beq.n	80044fc <__pow5mult+0x90>
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	b938      	cbnz	r0, 80044f8 <__pow5mult+0x8c>
 80044e8:	4622      	mov	r2, r4
 80044ea:	4621      	mov	r1, r4
 80044ec:	4630      	mov	r0, r6
 80044ee:	f7ff ff30 	bl	8004352 <__multiply>
 80044f2:	6020      	str	r0, [r4, #0]
 80044f4:	f8c0 8000 	str.w	r8, [r0]
 80044f8:	4604      	mov	r4, r0
 80044fa:	e7e4      	b.n	80044c6 <__pow5mult+0x5a>
 80044fc:	4638      	mov	r0, r7
 80044fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004502:	bf00      	nop
 8004504:	08004de0 	.word	0x08004de0

08004508 <__lshift>:
 8004508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	460c      	mov	r4, r1
 800450e:	4607      	mov	r7, r0
 8004510:	4616      	mov	r6, r2
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004518:	eb0a 0903 	add.w	r9, sl, r3
 800451c:	6849      	ldr	r1, [r1, #4]
 800451e:	68a3      	ldr	r3, [r4, #8]
 8004520:	f109 0501 	add.w	r5, r9, #1
 8004524:	42ab      	cmp	r3, r5
 8004526:	db31      	blt.n	800458c <__lshift+0x84>
 8004528:	4638      	mov	r0, r7
 800452a:	f7ff fe35 	bl	8004198 <_Balloc>
 800452e:	2200      	movs	r2, #0
 8004530:	4680      	mov	r8, r0
 8004532:	4611      	mov	r1, r2
 8004534:	f100 0314 	add.w	r3, r0, #20
 8004538:	4552      	cmp	r2, sl
 800453a:	db2a      	blt.n	8004592 <__lshift+0x8a>
 800453c:	6920      	ldr	r0, [r4, #16]
 800453e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004542:	f104 0114 	add.w	r1, r4, #20
 8004546:	f016 021f 	ands.w	r2, r6, #31
 800454a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800454e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004552:	d022      	beq.n	800459a <__lshift+0x92>
 8004554:	2000      	movs	r0, #0
 8004556:	f1c2 0c20 	rsb	ip, r2, #32
 800455a:	680e      	ldr	r6, [r1, #0]
 800455c:	4096      	lsls	r6, r2
 800455e:	4330      	orrs	r0, r6
 8004560:	f843 0b04 	str.w	r0, [r3], #4
 8004564:	f851 0b04 	ldr.w	r0, [r1], #4
 8004568:	458e      	cmp	lr, r1
 800456a:	fa20 f00c 	lsr.w	r0, r0, ip
 800456e:	d8f4      	bhi.n	800455a <__lshift+0x52>
 8004570:	6018      	str	r0, [r3, #0]
 8004572:	b108      	cbz	r0, 8004578 <__lshift+0x70>
 8004574:	f109 0502 	add.w	r5, r9, #2
 8004578:	3d01      	subs	r5, #1
 800457a:	4638      	mov	r0, r7
 800457c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004580:	4621      	mov	r1, r4
 8004582:	f7ff fe3d 	bl	8004200 <_Bfree>
 8004586:	4640      	mov	r0, r8
 8004588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458c:	3101      	adds	r1, #1
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	e7c8      	b.n	8004524 <__lshift+0x1c>
 8004592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004596:	3201      	adds	r2, #1
 8004598:	e7ce      	b.n	8004538 <__lshift+0x30>
 800459a:	3b04      	subs	r3, #4
 800459c:	f851 2b04 	ldr.w	r2, [r1], #4
 80045a0:	458e      	cmp	lr, r1
 80045a2:	f843 2f04 	str.w	r2, [r3, #4]!
 80045a6:	d8f9      	bhi.n	800459c <__lshift+0x94>
 80045a8:	e7e6      	b.n	8004578 <__lshift+0x70>

080045aa <__mcmp>:
 80045aa:	6903      	ldr	r3, [r0, #16]
 80045ac:	690a      	ldr	r2, [r1, #16]
 80045ae:	b530      	push	{r4, r5, lr}
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	d10c      	bne.n	80045ce <__mcmp+0x24>
 80045b4:	0092      	lsls	r2, r2, #2
 80045b6:	3014      	adds	r0, #20
 80045b8:	3114      	adds	r1, #20
 80045ba:	1884      	adds	r4, r0, r2
 80045bc:	4411      	add	r1, r2
 80045be:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80045c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80045c6:	4295      	cmp	r5, r2
 80045c8:	d003      	beq.n	80045d2 <__mcmp+0x28>
 80045ca:	d305      	bcc.n	80045d8 <__mcmp+0x2e>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4618      	mov	r0, r3
 80045d0:	bd30      	pop	{r4, r5, pc}
 80045d2:	42a0      	cmp	r0, r4
 80045d4:	d3f3      	bcc.n	80045be <__mcmp+0x14>
 80045d6:	e7fa      	b.n	80045ce <__mcmp+0x24>
 80045d8:	f04f 33ff 	mov.w	r3, #4294967295
 80045dc:	e7f7      	b.n	80045ce <__mcmp+0x24>

080045de <__mdiff>:
 80045de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e2:	460d      	mov	r5, r1
 80045e4:	4607      	mov	r7, r0
 80045e6:	4611      	mov	r1, r2
 80045e8:	4628      	mov	r0, r5
 80045ea:	4614      	mov	r4, r2
 80045ec:	f7ff ffdd 	bl	80045aa <__mcmp>
 80045f0:	1e06      	subs	r6, r0, #0
 80045f2:	d108      	bne.n	8004606 <__mdiff+0x28>
 80045f4:	4631      	mov	r1, r6
 80045f6:	4638      	mov	r0, r7
 80045f8:	f7ff fdce 	bl	8004198 <_Balloc>
 80045fc:	2301      	movs	r3, #1
 80045fe:	6146      	str	r6, [r0, #20]
 8004600:	6103      	str	r3, [r0, #16]
 8004602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004606:	bfa4      	itt	ge
 8004608:	4623      	movge	r3, r4
 800460a:	462c      	movge	r4, r5
 800460c:	4638      	mov	r0, r7
 800460e:	6861      	ldr	r1, [r4, #4]
 8004610:	bfa6      	itte	ge
 8004612:	461d      	movge	r5, r3
 8004614:	2600      	movge	r6, #0
 8004616:	2601      	movlt	r6, #1
 8004618:	f7ff fdbe 	bl	8004198 <_Balloc>
 800461c:	f04f 0c00 	mov.w	ip, #0
 8004620:	60c6      	str	r6, [r0, #12]
 8004622:	692b      	ldr	r3, [r5, #16]
 8004624:	6926      	ldr	r6, [r4, #16]
 8004626:	f104 0214 	add.w	r2, r4, #20
 800462a:	f105 0914 	add.w	r9, r5, #20
 800462e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004632:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004636:	f100 0114 	add.w	r1, r0, #20
 800463a:	f852 ab04 	ldr.w	sl, [r2], #4
 800463e:	f859 5b04 	ldr.w	r5, [r9], #4
 8004642:	fa1f f38a 	uxth.w	r3, sl
 8004646:	4463      	add	r3, ip
 8004648:	b2ac      	uxth	r4, r5
 800464a:	1b1b      	subs	r3, r3, r4
 800464c:	0c2c      	lsrs	r4, r5, #16
 800464e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004652:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004656:	b29b      	uxth	r3, r3
 8004658:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800465c:	45c8      	cmp	r8, r9
 800465e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004662:	4696      	mov	lr, r2
 8004664:	f841 4b04 	str.w	r4, [r1], #4
 8004668:	d8e7      	bhi.n	800463a <__mdiff+0x5c>
 800466a:	45be      	cmp	lr, r7
 800466c:	d305      	bcc.n	800467a <__mdiff+0x9c>
 800466e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004672:	b18b      	cbz	r3, 8004698 <__mdiff+0xba>
 8004674:	6106      	str	r6, [r0, #16]
 8004676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800467e:	b2a2      	uxth	r2, r4
 8004680:	4462      	add	r2, ip
 8004682:	1413      	asrs	r3, r2, #16
 8004684:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004688:	b292      	uxth	r2, r2
 800468a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800468e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004692:	f841 2b04 	str.w	r2, [r1], #4
 8004696:	e7e8      	b.n	800466a <__mdiff+0x8c>
 8004698:	3e01      	subs	r6, #1
 800469a:	e7e8      	b.n	800466e <__mdiff+0x90>

0800469c <__d2b>:
 800469c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046a0:	461c      	mov	r4, r3
 80046a2:	2101      	movs	r1, #1
 80046a4:	4690      	mov	r8, r2
 80046a6:	9e08      	ldr	r6, [sp, #32]
 80046a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80046aa:	f7ff fd75 	bl	8004198 <_Balloc>
 80046ae:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80046b2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80046b6:	4607      	mov	r7, r0
 80046b8:	bb34      	cbnz	r4, 8004708 <__d2b+0x6c>
 80046ba:	9201      	str	r2, [sp, #4]
 80046bc:	f1b8 0f00 	cmp.w	r8, #0
 80046c0:	d027      	beq.n	8004712 <__d2b+0x76>
 80046c2:	a802      	add	r0, sp, #8
 80046c4:	f840 8d08 	str.w	r8, [r0, #-8]!
 80046c8:	f7ff fe0b 	bl	80042e2 <__lo0bits>
 80046cc:	9900      	ldr	r1, [sp, #0]
 80046ce:	b1f0      	cbz	r0, 800470e <__d2b+0x72>
 80046d0:	9a01      	ldr	r2, [sp, #4]
 80046d2:	f1c0 0320 	rsb	r3, r0, #32
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	430b      	orrs	r3, r1
 80046dc:	40c2      	lsrs	r2, r0
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	9201      	str	r2, [sp, #4]
 80046e2:	9b01      	ldr	r3, [sp, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf14      	ite	ne
 80046e8:	2102      	movne	r1, #2
 80046ea:	2101      	moveq	r1, #1
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	6139      	str	r1, [r7, #16]
 80046f0:	b1c4      	cbz	r4, 8004724 <__d2b+0x88>
 80046f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80046f6:	4404      	add	r4, r0
 80046f8:	6034      	str	r4, [r6, #0]
 80046fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80046fe:	6028      	str	r0, [r5, #0]
 8004700:	4638      	mov	r0, r7
 8004702:	b002      	add	sp, #8
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800470c:	e7d5      	b.n	80046ba <__d2b+0x1e>
 800470e:	6179      	str	r1, [r7, #20]
 8004710:	e7e7      	b.n	80046e2 <__d2b+0x46>
 8004712:	a801      	add	r0, sp, #4
 8004714:	f7ff fde5 	bl	80042e2 <__lo0bits>
 8004718:	2101      	movs	r1, #1
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	6139      	str	r1, [r7, #16]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	3020      	adds	r0, #32
 8004722:	e7e5      	b.n	80046f0 <__d2b+0x54>
 8004724:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004728:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800472c:	6030      	str	r0, [r6, #0]
 800472e:	6918      	ldr	r0, [r3, #16]
 8004730:	f7ff fdb8 	bl	80042a4 <__hi0bits>
 8004734:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004738:	e7e1      	b.n	80046fe <__d2b+0x62>

0800473a <_calloc_r>:
 800473a:	b538      	push	{r3, r4, r5, lr}
 800473c:	fb02 f401 	mul.w	r4, r2, r1
 8004740:	4621      	mov	r1, r4
 8004742:	f000 f855 	bl	80047f0 <_malloc_r>
 8004746:	4605      	mov	r5, r0
 8004748:	b118      	cbz	r0, 8004752 <_calloc_r+0x18>
 800474a:	4622      	mov	r2, r4
 800474c:	2100      	movs	r1, #0
 800474e:	f7fe fa10 	bl	8002b72 <memset>
 8004752:	4628      	mov	r0, r5
 8004754:	bd38      	pop	{r3, r4, r5, pc}
	...

08004758 <_free_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4605      	mov	r5, r0
 800475c:	2900      	cmp	r1, #0
 800475e:	d043      	beq.n	80047e8 <_free_r+0x90>
 8004760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004764:	1f0c      	subs	r4, r1, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	bfb8      	it	lt
 800476a:	18e4      	addlt	r4, r4, r3
 800476c:	f000 fa2a 	bl	8004bc4 <__malloc_lock>
 8004770:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <_free_r+0x94>)
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	4610      	mov	r0, r2
 8004776:	b933      	cbnz	r3, 8004786 <_free_r+0x2e>
 8004778:	6063      	str	r3, [r4, #4]
 800477a:	6014      	str	r4, [r2, #0]
 800477c:	4628      	mov	r0, r5
 800477e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004782:	f000 ba20 	b.w	8004bc6 <__malloc_unlock>
 8004786:	42a3      	cmp	r3, r4
 8004788:	d90b      	bls.n	80047a2 <_free_r+0x4a>
 800478a:	6821      	ldr	r1, [r4, #0]
 800478c:	1862      	adds	r2, r4, r1
 800478e:	4293      	cmp	r3, r2
 8004790:	bf01      	itttt	eq
 8004792:	681a      	ldreq	r2, [r3, #0]
 8004794:	685b      	ldreq	r3, [r3, #4]
 8004796:	1852      	addeq	r2, r2, r1
 8004798:	6022      	streq	r2, [r4, #0]
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	6004      	str	r4, [r0, #0]
 800479e:	e7ed      	b.n	800477c <_free_r+0x24>
 80047a0:	4613      	mov	r3, r2
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	b10a      	cbz	r2, 80047aa <_free_r+0x52>
 80047a6:	42a2      	cmp	r2, r4
 80047a8:	d9fa      	bls.n	80047a0 <_free_r+0x48>
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	1858      	adds	r0, r3, r1
 80047ae:	42a0      	cmp	r0, r4
 80047b0:	d10b      	bne.n	80047ca <_free_r+0x72>
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	4401      	add	r1, r0
 80047b6:	1858      	adds	r0, r3, r1
 80047b8:	4282      	cmp	r2, r0
 80047ba:	6019      	str	r1, [r3, #0]
 80047bc:	d1de      	bne.n	800477c <_free_r+0x24>
 80047be:	6810      	ldr	r0, [r2, #0]
 80047c0:	6852      	ldr	r2, [r2, #4]
 80047c2:	4401      	add	r1, r0
 80047c4:	6019      	str	r1, [r3, #0]
 80047c6:	605a      	str	r2, [r3, #4]
 80047c8:	e7d8      	b.n	800477c <_free_r+0x24>
 80047ca:	d902      	bls.n	80047d2 <_free_r+0x7a>
 80047cc:	230c      	movs	r3, #12
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	e7d4      	b.n	800477c <_free_r+0x24>
 80047d2:	6820      	ldr	r0, [r4, #0]
 80047d4:	1821      	adds	r1, r4, r0
 80047d6:	428a      	cmp	r2, r1
 80047d8:	bf01      	itttt	eq
 80047da:	6811      	ldreq	r1, [r2, #0]
 80047dc:	6852      	ldreq	r2, [r2, #4]
 80047de:	1809      	addeq	r1, r1, r0
 80047e0:	6021      	streq	r1, [r4, #0]
 80047e2:	6062      	str	r2, [r4, #4]
 80047e4:	605c      	str	r4, [r3, #4]
 80047e6:	e7c9      	b.n	800477c <_free_r+0x24>
 80047e8:	bd38      	pop	{r3, r4, r5, pc}
 80047ea:	bf00      	nop
 80047ec:	20000200 	.word	0x20000200

080047f0 <_malloc_r>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	1ccd      	adds	r5, r1, #3
 80047f4:	f025 0503 	bic.w	r5, r5, #3
 80047f8:	3508      	adds	r5, #8
 80047fa:	2d0c      	cmp	r5, #12
 80047fc:	bf38      	it	cc
 80047fe:	250c      	movcc	r5, #12
 8004800:	2d00      	cmp	r5, #0
 8004802:	4606      	mov	r6, r0
 8004804:	db01      	blt.n	800480a <_malloc_r+0x1a>
 8004806:	42a9      	cmp	r1, r5
 8004808:	d903      	bls.n	8004812 <_malloc_r+0x22>
 800480a:	230c      	movs	r3, #12
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	2000      	movs	r0, #0
 8004810:	bd70      	pop	{r4, r5, r6, pc}
 8004812:	f000 f9d7 	bl	8004bc4 <__malloc_lock>
 8004816:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <_malloc_r+0xb4>)
 8004818:	6814      	ldr	r4, [r2, #0]
 800481a:	4621      	mov	r1, r4
 800481c:	b991      	cbnz	r1, 8004844 <_malloc_r+0x54>
 800481e:	4c22      	ldr	r4, [pc, #136]	; (80048a8 <_malloc_r+0xb8>)
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	b91b      	cbnz	r3, 800482c <_malloc_r+0x3c>
 8004824:	4630      	mov	r0, r6
 8004826:	f000 f991 	bl	8004b4c <_sbrk_r>
 800482a:	6020      	str	r0, [r4, #0]
 800482c:	4629      	mov	r1, r5
 800482e:	4630      	mov	r0, r6
 8004830:	f000 f98c 	bl	8004b4c <_sbrk_r>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d126      	bne.n	8004886 <_malloc_r+0x96>
 8004838:	230c      	movs	r3, #12
 800483a:	4630      	mov	r0, r6
 800483c:	6033      	str	r3, [r6, #0]
 800483e:	f000 f9c2 	bl	8004bc6 <__malloc_unlock>
 8004842:	e7e4      	b.n	800480e <_malloc_r+0x1e>
 8004844:	680b      	ldr	r3, [r1, #0]
 8004846:	1b5b      	subs	r3, r3, r5
 8004848:	d41a      	bmi.n	8004880 <_malloc_r+0x90>
 800484a:	2b0b      	cmp	r3, #11
 800484c:	d90f      	bls.n	800486e <_malloc_r+0x7e>
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	18cc      	adds	r4, r1, r3
 8004852:	50cd      	str	r5, [r1, r3]
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f9b6 	bl	8004bc6 <__malloc_unlock>
 800485a:	f104 000b 	add.w	r0, r4, #11
 800485e:	1d23      	adds	r3, r4, #4
 8004860:	f020 0007 	bic.w	r0, r0, #7
 8004864:	1ac3      	subs	r3, r0, r3
 8004866:	d01b      	beq.n	80048a0 <_malloc_r+0xb0>
 8004868:	425a      	negs	r2, r3
 800486a:	50e2      	str	r2, [r4, r3]
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	428c      	cmp	r4, r1
 8004870:	bf0b      	itete	eq
 8004872:	6863      	ldreq	r3, [r4, #4]
 8004874:	684b      	ldrne	r3, [r1, #4]
 8004876:	6013      	streq	r3, [r2, #0]
 8004878:	6063      	strne	r3, [r4, #4]
 800487a:	bf18      	it	ne
 800487c:	460c      	movne	r4, r1
 800487e:	e7e9      	b.n	8004854 <_malloc_r+0x64>
 8004880:	460c      	mov	r4, r1
 8004882:	6849      	ldr	r1, [r1, #4]
 8004884:	e7ca      	b.n	800481c <_malloc_r+0x2c>
 8004886:	1cc4      	adds	r4, r0, #3
 8004888:	f024 0403 	bic.w	r4, r4, #3
 800488c:	42a0      	cmp	r0, r4
 800488e:	d005      	beq.n	800489c <_malloc_r+0xac>
 8004890:	1a21      	subs	r1, r4, r0
 8004892:	4630      	mov	r0, r6
 8004894:	f000 f95a 	bl	8004b4c <_sbrk_r>
 8004898:	3001      	adds	r0, #1
 800489a:	d0cd      	beq.n	8004838 <_malloc_r+0x48>
 800489c:	6025      	str	r5, [r4, #0]
 800489e:	e7d9      	b.n	8004854 <_malloc_r+0x64>
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
 80048a2:	bf00      	nop
 80048a4:	20000200 	.word	0x20000200
 80048a8:	20000204 	.word	0x20000204

080048ac <__ssputs_r>:
 80048ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	688e      	ldr	r6, [r1, #8]
 80048b2:	4682      	mov	sl, r0
 80048b4:	429e      	cmp	r6, r3
 80048b6:	460c      	mov	r4, r1
 80048b8:	4691      	mov	r9, r2
 80048ba:	4698      	mov	r8, r3
 80048bc:	d835      	bhi.n	800492a <__ssputs_r+0x7e>
 80048be:	898a      	ldrh	r2, [r1, #12]
 80048c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048c4:	d031      	beq.n	800492a <__ssputs_r+0x7e>
 80048c6:	2302      	movs	r3, #2
 80048c8:	6825      	ldr	r5, [r4, #0]
 80048ca:	6909      	ldr	r1, [r1, #16]
 80048cc:	1a6f      	subs	r7, r5, r1
 80048ce:	6965      	ldr	r5, [r4, #20]
 80048d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80048d8:	f108 0301 	add.w	r3, r8, #1
 80048dc:	443b      	add	r3, r7
 80048de:	429d      	cmp	r5, r3
 80048e0:	bf38      	it	cc
 80048e2:	461d      	movcc	r5, r3
 80048e4:	0553      	lsls	r3, r2, #21
 80048e6:	d531      	bpl.n	800494c <__ssputs_r+0xa0>
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7ff ff81 	bl	80047f0 <_malloc_r>
 80048ee:	4606      	mov	r6, r0
 80048f0:	b950      	cbnz	r0, 8004908 <__ssputs_r+0x5c>
 80048f2:	230c      	movs	r3, #12
 80048f4:	f8ca 3000 	str.w	r3, [sl]
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295
 80048fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004908:	463a      	mov	r2, r7
 800490a:	6921      	ldr	r1, [r4, #16]
 800490c:	f7fe f926 	bl	8002b5c <memcpy>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	6126      	str	r6, [r4, #16]
 800491e:	443e      	add	r6, r7
 8004920:	6026      	str	r6, [r4, #0]
 8004922:	4646      	mov	r6, r8
 8004924:	6165      	str	r5, [r4, #20]
 8004926:	1bed      	subs	r5, r5, r7
 8004928:	60a5      	str	r5, [r4, #8]
 800492a:	4546      	cmp	r6, r8
 800492c:	bf28      	it	cs
 800492e:	4646      	movcs	r6, r8
 8004930:	4649      	mov	r1, r9
 8004932:	4632      	mov	r2, r6
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	f000 f92b 	bl	8004b90 <memmove>
 800493a:	68a3      	ldr	r3, [r4, #8]
 800493c:	2000      	movs	r0, #0
 800493e:	1b9b      	subs	r3, r3, r6
 8004940:	60a3      	str	r3, [r4, #8]
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	441e      	add	r6, r3
 8004946:	6026      	str	r6, [r4, #0]
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	462a      	mov	r2, r5
 800494e:	f000 f93b 	bl	8004bc8 <_realloc_r>
 8004952:	4606      	mov	r6, r0
 8004954:	2800      	cmp	r0, #0
 8004956:	d1e1      	bne.n	800491c <__ssputs_r+0x70>
 8004958:	6921      	ldr	r1, [r4, #16]
 800495a:	4650      	mov	r0, sl
 800495c:	f7ff fefc 	bl	8004758 <_free_r>
 8004960:	e7c7      	b.n	80048f2 <__ssputs_r+0x46>
	...

08004964 <_svfiprintf_r>:
 8004964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004968:	b09d      	sub	sp, #116	; 0x74
 800496a:	9303      	str	r3, [sp, #12]
 800496c:	898b      	ldrh	r3, [r1, #12]
 800496e:	4680      	mov	r8, r0
 8004970:	061c      	lsls	r4, r3, #24
 8004972:	460d      	mov	r5, r1
 8004974:	4616      	mov	r6, r2
 8004976:	d50f      	bpl.n	8004998 <_svfiprintf_r+0x34>
 8004978:	690b      	ldr	r3, [r1, #16]
 800497a:	b96b      	cbnz	r3, 8004998 <_svfiprintf_r+0x34>
 800497c:	2140      	movs	r1, #64	; 0x40
 800497e:	f7ff ff37 	bl	80047f0 <_malloc_r>
 8004982:	6028      	str	r0, [r5, #0]
 8004984:	6128      	str	r0, [r5, #16]
 8004986:	b928      	cbnz	r0, 8004994 <_svfiprintf_r+0x30>
 8004988:	230c      	movs	r3, #12
 800498a:	f8c8 3000 	str.w	r3, [r8]
 800498e:	f04f 30ff 	mov.w	r0, #4294967295
 8004992:	e0c4      	b.n	8004b1e <_svfiprintf_r+0x1ba>
 8004994:	2340      	movs	r3, #64	; 0x40
 8004996:	616b      	str	r3, [r5, #20]
 8004998:	2300      	movs	r3, #0
 800499a:	9309      	str	r3, [sp, #36]	; 0x24
 800499c:	2320      	movs	r3, #32
 800499e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049a2:	2330      	movs	r3, #48	; 0x30
 80049a4:	f04f 0b01 	mov.w	fp, #1
 80049a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049ac:	4637      	mov	r7, r6
 80049ae:	463c      	mov	r4, r7
 80049b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d13c      	bne.n	8004a32 <_svfiprintf_r+0xce>
 80049b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80049bc:	d00b      	beq.n	80049d6 <_svfiprintf_r+0x72>
 80049be:	4653      	mov	r3, sl
 80049c0:	4632      	mov	r2, r6
 80049c2:	4629      	mov	r1, r5
 80049c4:	4640      	mov	r0, r8
 80049c6:	f7ff ff71 	bl	80048ac <__ssputs_r>
 80049ca:	3001      	adds	r0, #1
 80049cc:	f000 80a2 	beq.w	8004b14 <_svfiprintf_r+0x1b0>
 80049d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d2:	4453      	add	r3, sl
 80049d4:	9309      	str	r3, [sp, #36]	; 0x24
 80049d6:	783b      	ldrb	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 809b 	beq.w	8004b14 <_svfiprintf_r+0x1b0>
 80049de:	2300      	movs	r3, #0
 80049e0:	f04f 32ff 	mov.w	r2, #4294967295
 80049e4:	9304      	str	r3, [sp, #16]
 80049e6:	9307      	str	r3, [sp, #28]
 80049e8:	9205      	str	r2, [sp, #20]
 80049ea:	9306      	str	r3, [sp, #24]
 80049ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049f0:	931a      	str	r3, [sp, #104]	; 0x68
 80049f2:	2205      	movs	r2, #5
 80049f4:	7821      	ldrb	r1, [r4, #0]
 80049f6:	4850      	ldr	r0, [pc, #320]	; (8004b38 <_svfiprintf_r+0x1d4>)
 80049f8:	f7ff fbc0 	bl	800417c <memchr>
 80049fc:	1c67      	adds	r7, r4, #1
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	b9d8      	cbnz	r0, 8004a3a <_svfiprintf_r+0xd6>
 8004a02:	06d9      	lsls	r1, r3, #27
 8004a04:	bf44      	itt	mi
 8004a06:	2220      	movmi	r2, #32
 8004a08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a0c:	071a      	lsls	r2, r3, #28
 8004a0e:	bf44      	itt	mi
 8004a10:	222b      	movmi	r2, #43	; 0x2b
 8004a12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a16:	7822      	ldrb	r2, [r4, #0]
 8004a18:	2a2a      	cmp	r2, #42	; 0x2a
 8004a1a:	d016      	beq.n	8004a4a <_svfiprintf_r+0xe6>
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	200a      	movs	r0, #10
 8004a20:	9a07      	ldr	r2, [sp, #28]
 8004a22:	4627      	mov	r7, r4
 8004a24:	783b      	ldrb	r3, [r7, #0]
 8004a26:	3401      	adds	r4, #1
 8004a28:	3b30      	subs	r3, #48	; 0x30
 8004a2a:	2b09      	cmp	r3, #9
 8004a2c:	d950      	bls.n	8004ad0 <_svfiprintf_r+0x16c>
 8004a2e:	b1c9      	cbz	r1, 8004a64 <_svfiprintf_r+0x100>
 8004a30:	e011      	b.n	8004a56 <_svfiprintf_r+0xf2>
 8004a32:	2b25      	cmp	r3, #37	; 0x25
 8004a34:	d0c0      	beq.n	80049b8 <_svfiprintf_r+0x54>
 8004a36:	4627      	mov	r7, r4
 8004a38:	e7b9      	b.n	80049ae <_svfiprintf_r+0x4a>
 8004a3a:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <_svfiprintf_r+0x1d4>)
 8004a3c:	463c      	mov	r4, r7
 8004a3e:	1a80      	subs	r0, r0, r2
 8004a40:	fa0b f000 	lsl.w	r0, fp, r0
 8004a44:	4318      	orrs	r0, r3
 8004a46:	9004      	str	r0, [sp, #16]
 8004a48:	e7d3      	b.n	80049f2 <_svfiprintf_r+0x8e>
 8004a4a:	9a03      	ldr	r2, [sp, #12]
 8004a4c:	1d11      	adds	r1, r2, #4
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	9103      	str	r1, [sp, #12]
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	db01      	blt.n	8004a5a <_svfiprintf_r+0xf6>
 8004a56:	9207      	str	r2, [sp, #28]
 8004a58:	e004      	b.n	8004a64 <_svfiprintf_r+0x100>
 8004a5a:	4252      	negs	r2, r2
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	9207      	str	r2, [sp, #28]
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	783b      	ldrb	r3, [r7, #0]
 8004a66:	2b2e      	cmp	r3, #46	; 0x2e
 8004a68:	d10d      	bne.n	8004a86 <_svfiprintf_r+0x122>
 8004a6a:	787b      	ldrb	r3, [r7, #1]
 8004a6c:	1c79      	adds	r1, r7, #1
 8004a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a70:	d132      	bne.n	8004ad8 <_svfiprintf_r+0x174>
 8004a72:	9b03      	ldr	r3, [sp, #12]
 8004a74:	3702      	adds	r7, #2
 8004a76:	1d1a      	adds	r2, r3, #4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	9203      	str	r2, [sp, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bfb8      	it	lt
 8004a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a84:	9305      	str	r3, [sp, #20]
 8004a86:	4c2d      	ldr	r4, [pc, #180]	; (8004b3c <_svfiprintf_r+0x1d8>)
 8004a88:	2203      	movs	r2, #3
 8004a8a:	7839      	ldrb	r1, [r7, #0]
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7ff fb75 	bl	800417c <memchr>
 8004a92:	b138      	cbz	r0, 8004aa4 <_svfiprintf_r+0x140>
 8004a94:	2340      	movs	r3, #64	; 0x40
 8004a96:	1b00      	subs	r0, r0, r4
 8004a98:	fa03 f000 	lsl.w	r0, r3, r0
 8004a9c:	9b04      	ldr	r3, [sp, #16]
 8004a9e:	3701      	adds	r7, #1
 8004aa0:	4303      	orrs	r3, r0
 8004aa2:	9304      	str	r3, [sp, #16]
 8004aa4:	7839      	ldrb	r1, [r7, #0]
 8004aa6:	2206      	movs	r2, #6
 8004aa8:	4825      	ldr	r0, [pc, #148]	; (8004b40 <_svfiprintf_r+0x1dc>)
 8004aaa:	1c7e      	adds	r6, r7, #1
 8004aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ab0:	f7ff fb64 	bl	800417c <memchr>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d035      	beq.n	8004b24 <_svfiprintf_r+0x1c0>
 8004ab8:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <_svfiprintf_r+0x1e0>)
 8004aba:	b9fb      	cbnz	r3, 8004afc <_svfiprintf_r+0x198>
 8004abc:	9b03      	ldr	r3, [sp, #12]
 8004abe:	3307      	adds	r3, #7
 8004ac0:	f023 0307 	bic.w	r3, r3, #7
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	9303      	str	r3, [sp, #12]
 8004ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aca:	444b      	add	r3, r9
 8004acc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ace:	e76d      	b.n	80049ac <_svfiprintf_r+0x48>
 8004ad0:	fb00 3202 	mla	r2, r0, r2, r3
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	e7a4      	b.n	8004a22 <_svfiprintf_r+0xbe>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	240a      	movs	r4, #10
 8004adc:	4618      	mov	r0, r3
 8004ade:	9305      	str	r3, [sp, #20]
 8004ae0:	460f      	mov	r7, r1
 8004ae2:	783a      	ldrb	r2, [r7, #0]
 8004ae4:	3101      	adds	r1, #1
 8004ae6:	3a30      	subs	r2, #48	; 0x30
 8004ae8:	2a09      	cmp	r2, #9
 8004aea:	d903      	bls.n	8004af4 <_svfiprintf_r+0x190>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ca      	beq.n	8004a86 <_svfiprintf_r+0x122>
 8004af0:	9005      	str	r0, [sp, #20]
 8004af2:	e7c8      	b.n	8004a86 <_svfiprintf_r+0x122>
 8004af4:	fb04 2000 	mla	r0, r4, r0, r2
 8004af8:	2301      	movs	r3, #1
 8004afa:	e7f1      	b.n	8004ae0 <_svfiprintf_r+0x17c>
 8004afc:	ab03      	add	r3, sp, #12
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	462a      	mov	r2, r5
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <_svfiprintf_r+0x1e4>)
 8004b04:	a904      	add	r1, sp, #16
 8004b06:	4640      	mov	r0, r8
 8004b08:	f7fe f8cc 	bl	8002ca4 <_printf_float>
 8004b0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b10:	4681      	mov	r9, r0
 8004b12:	d1d9      	bne.n	8004ac8 <_svfiprintf_r+0x164>
 8004b14:	89ab      	ldrh	r3, [r5, #12]
 8004b16:	065b      	lsls	r3, r3, #25
 8004b18:	f53f af39 	bmi.w	800498e <_svfiprintf_r+0x2a>
 8004b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b1e:	b01d      	add	sp, #116	; 0x74
 8004b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b24:	ab03      	add	r3, sp, #12
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <_svfiprintf_r+0x1e4>)
 8004b2c:	a904      	add	r1, sp, #16
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f7fe fb68 	bl	8003204 <_printf_i>
 8004b34:	e7ea      	b.n	8004b0c <_svfiprintf_r+0x1a8>
 8004b36:	bf00      	nop
 8004b38:	08004dec 	.word	0x08004dec
 8004b3c:	08004df2 	.word	0x08004df2
 8004b40:	08004df6 	.word	0x08004df6
 8004b44:	08002ca5 	.word	0x08002ca5
 8004b48:	080048ad 	.word	0x080048ad

08004b4c <_sbrk_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	2300      	movs	r3, #0
 8004b50:	4c05      	ldr	r4, [pc, #20]	; (8004b68 <_sbrk_r+0x1c>)
 8004b52:	4605      	mov	r5, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	f000 f872 	bl	8004c40 <_sbrk>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_sbrk_r+0x1a>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_sbrk_r+0x1a>
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	200002b4 	.word	0x200002b4

08004b6c <__ascii_mbtowc>:
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	b901      	cbnz	r1, 8004b72 <__ascii_mbtowc+0x6>
 8004b70:	a901      	add	r1, sp, #4
 8004b72:	b142      	cbz	r2, 8004b86 <__ascii_mbtowc+0x1a>
 8004b74:	b14b      	cbz	r3, 8004b8a <__ascii_mbtowc+0x1e>
 8004b76:	7813      	ldrb	r3, [r2, #0]
 8004b78:	600b      	str	r3, [r1, #0]
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	1c10      	adds	r0, r2, #0
 8004b7e:	bf18      	it	ne
 8004b80:	2001      	movne	r0, #1
 8004b82:	b002      	add	sp, #8
 8004b84:	4770      	bx	lr
 8004b86:	4610      	mov	r0, r2
 8004b88:	e7fb      	b.n	8004b82 <__ascii_mbtowc+0x16>
 8004b8a:	f06f 0001 	mvn.w	r0, #1
 8004b8e:	e7f8      	b.n	8004b82 <__ascii_mbtowc+0x16>

08004b90 <memmove>:
 8004b90:	4288      	cmp	r0, r1
 8004b92:	b510      	push	{r4, lr}
 8004b94:	eb01 0302 	add.w	r3, r1, r2
 8004b98:	d803      	bhi.n	8004ba2 <memmove+0x12>
 8004b9a:	1e42      	subs	r2, r0, #1
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	d10c      	bne.n	8004bba <memmove+0x2a>
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	4298      	cmp	r0, r3
 8004ba4:	d2f9      	bcs.n	8004b9a <memmove+0xa>
 8004ba6:	1881      	adds	r1, r0, r2
 8004ba8:	1ad2      	subs	r2, r2, r3
 8004baa:	42d3      	cmn	r3, r2
 8004bac:	d100      	bne.n	8004bb0 <memmove+0x20>
 8004bae:	bd10      	pop	{r4, pc}
 8004bb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bb4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004bb8:	e7f7      	b.n	8004baa <memmove+0x1a>
 8004bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bbe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bc2:	e7eb      	b.n	8004b9c <memmove+0xc>

08004bc4 <__malloc_lock>:
 8004bc4:	4770      	bx	lr

08004bc6 <__malloc_unlock>:
 8004bc6:	4770      	bx	lr

08004bc8 <_realloc_r>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	4607      	mov	r7, r0
 8004bcc:	4614      	mov	r4, r2
 8004bce:	460e      	mov	r6, r1
 8004bd0:	b921      	cbnz	r1, 8004bdc <_realloc_r+0x14>
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bd8:	f7ff be0a 	b.w	80047f0 <_malloc_r>
 8004bdc:	b922      	cbnz	r2, 8004be8 <_realloc_r+0x20>
 8004bde:	f7ff fdbb 	bl	8004758 <_free_r>
 8004be2:	4625      	mov	r5, r4
 8004be4:	4628      	mov	r0, r5
 8004be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be8:	f000 f821 	bl	8004c2e <_malloc_usable_size_r>
 8004bec:	4284      	cmp	r4, r0
 8004bee:	d90f      	bls.n	8004c10 <_realloc_r+0x48>
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	f7ff fdfc 	bl	80047f0 <_malloc_r>
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d0f2      	beq.n	8004be4 <_realloc_r+0x1c>
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4622      	mov	r2, r4
 8004c02:	f7fd ffab 	bl	8002b5c <memcpy>
 8004c06:	4631      	mov	r1, r6
 8004c08:	4638      	mov	r0, r7
 8004c0a:	f7ff fda5 	bl	8004758 <_free_r>
 8004c0e:	e7e9      	b.n	8004be4 <_realloc_r+0x1c>
 8004c10:	4635      	mov	r5, r6
 8004c12:	e7e7      	b.n	8004be4 <_realloc_r+0x1c>

08004c14 <__ascii_wctomb>:
 8004c14:	b149      	cbz	r1, 8004c2a <__ascii_wctomb+0x16>
 8004c16:	2aff      	cmp	r2, #255	; 0xff
 8004c18:	bf8b      	itete	hi
 8004c1a:	238a      	movhi	r3, #138	; 0x8a
 8004c1c:	700a      	strbls	r2, [r1, #0]
 8004c1e:	6003      	strhi	r3, [r0, #0]
 8004c20:	2001      	movls	r0, #1
 8004c22:	bf88      	it	hi
 8004c24:	f04f 30ff 	movhi.w	r0, #4294967295
 8004c28:	4770      	bx	lr
 8004c2a:	4608      	mov	r0, r1
 8004c2c:	4770      	bx	lr

08004c2e <_malloc_usable_size_r>:
 8004c2e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004c32:	2800      	cmp	r0, #0
 8004c34:	f1a0 0004 	sub.w	r0, r0, #4
 8004c38:	bfbc      	itt	lt
 8004c3a:	580b      	ldrlt	r3, [r1, r0]
 8004c3c:	18c0      	addlt	r0, r0, r3
 8004c3e:	4770      	bx	lr

08004c40 <_sbrk>:
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <_sbrk+0x14>)
 8004c42:	4602      	mov	r2, r0
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	b909      	cbnz	r1, 8004c4c <_sbrk+0xc>
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <_sbrk+0x18>)
 8004c4a:	6019      	str	r1, [r3, #0]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	4402      	add	r2, r0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	4770      	bx	lr
 8004c54:	20000208 	.word	0x20000208
 8004c58:	200002b8 	.word	0x200002b8

08004c5c <_init>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr

08004c68 <_fini>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr
